// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 714 nanoseconds.
        Weight::from_parts(762_000, 0)
            // Standard Error: 916
            .saturating_add(Weight::from_parts(249_959, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `74 + c * (1024 ±0)`
        //  Estimated: `2546 + c * (1024 ±0)`
        // Minimum execution time: 2_591 nanoseconds.
        Weight::from_parts(2_658_000, 2546)
            // Standard Error: 1_587
            .saturating_add(Weight::from_parts(691_791, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 47_048 nanoseconds.
        Weight::from_parts(80_532_528, 0)
            // Standard Error: 4_561
            .saturating_add(Weight::from_parts(2_208_073, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `847`
        //  Estimated: `17017`
        // Minimum execution time: 49_187 nanoseconds.
        Weight::from_parts(51_290_000, 17017)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `3010`
        // Minimum execution time: 55_252 nanoseconds.
        Weight::from_parts(39_508_166, 3010)
            // Standard Error: 54_990
            .saturating_add(Weight::from_parts(53_653_596, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `604`
        //  Estimated: `17714`
        // Minimum execution time: 45_837 nanoseconds.
        Weight::from_parts(67_499_867, 17714)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_312, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `13432`
        // Minimum execution time: 9_772_476 nanoseconds.
        Weight::from_parts(137_998_681, 13432)
            // Standard Error: 153_459
            .saturating_add(Weight::from_parts(54_040_008, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_271, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `374`
        //  Estimated: `14759`
        // Minimum execution time: 47_594 nanoseconds.
        Weight::from_parts(39_261_875, 14759)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_154, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1042`
        //  Estimated: `30879`
        // Minimum execution time: 69_752 nanoseconds.
        Weight::from_parts(56_435_092, 30879)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_169, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `40731`
        // Minimum execution time: 257_221 nanoseconds.
        Weight::from_parts(266_363_888, 40731)
            // Standard Error: 927
            .saturating_add(Weight::from_parts(13_060, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `40581`
        // Minimum execution time: 272_686 nanoseconds.
        Weight::from_parts(284_450_996, 40581)
            // Standard Error: 786
            .saturating_add(Weight::from_parts(260, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2973 + c * (2150 ±0)`
        // Minimum execution time: 40_325 nanoseconds.
        Weight::from_parts(40_776_000, 2973)
            // Standard Error: 26_634
            .saturating_add(Weight::from_parts(51_482_330, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_124 nanoseconds.
        Weight::from_parts(56_808_831, 0)
            // Standard Error: 286_293
            .saturating_add(Weight::from_parts(121_779_133, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 193_689 nanoseconds.
        Weight::from_parts(170_580_231, 0)
            // Standard Error: 278_566
            .saturating_add(Weight::from_parts(123_420_096, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_404 nanoseconds.
        Weight::from_parts(88_583_428, 0)
            // Standard Error: 3_546
            .saturating_add(Weight::from_parts(3_421_193, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_673 nanoseconds.
        Weight::from_parts(139_085_832, 0)
            // Standard Error: 15_674
            .saturating_add(Weight::from_parts(3_646_255, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_127 nanoseconds.
        Weight::from_parts(107_304_676, 0)
            // Standard Error: 280_555
            .saturating_add(Weight::from_parts(183_537_739, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_204 nanoseconds.
        Weight::from_parts(63_855_671, 0)
            // Standard Error: 255_652
            .saturating_add(Weight::from_parts(180_882_229, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_747 nanoseconds.
        Weight::from_parts(62_378_952, 0)
            // Standard Error: 243_378
            .saturating_add(Weight::from_parts(181_354_986, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_628 nanoseconds.
        Weight::from_parts(62_023_316, 0)
            // Standard Error: 239_172
            .saturating_add(Weight::from_parts(181_312_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_107 nanoseconds.
        Weight::from_parts(64_448_589, 0)
            // Standard Error: 243_926
            .saturating_add(Weight::from_parts(181_908_539, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_063 nanoseconds.
        Weight::from_parts(63_994_362, 0)
            // Standard Error: 222_109
            .saturating_add(Weight::from_parts(180_538_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_507 nanoseconds.
        Weight::from_parts(62_253_457, 0)
            // Standard Error: 237_685
            .saturating_add(Weight::from_parts(180_220_624, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_164 nanoseconds.
        Weight::from_parts(64_087_928, 0)
            // Standard Error: 254_664
            .saturating_add(Weight::from_parts(180_159_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_583 nanoseconds.
        Weight::from_parts(67_596_795, 0)
            // Standard Error: 234_491
            .saturating_add(Weight::from_parts(181_034_283, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 707_674 nanoseconds.
        Weight::from_parts(799_106_757, 0)
            // Standard Error: 290_054
            .saturating_add(Weight::from_parts(237_370_449, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 952_371 nanoseconds.
        Weight::from_parts(956_495_000, 0)
            // Standard Error: 60_878
            .saturating_add(Weight::from_parts(14_227_144, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_283 nanoseconds.
        Weight::from_parts(67_213_364, 0)
            // Standard Error: 216_089
            .saturating_add(Weight::from_parts(179_717_831, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_151 nanoseconds.
        Weight::from_parts(64_827_395, 0)
            // Standard Error: 240_155
            .saturating_add(Weight::from_parts(180_340_647, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_607 nanoseconds.
        Weight::from_parts(97_606_147, 0)
            // Standard Error: 253_065
            .saturating_add(Weight::from_parts(234_245_810, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_345 nanoseconds.
        Weight::from_parts(63_840_792, 0)
            // Standard Error: 226_520
            .saturating_add(Weight::from_parts(187_131_229, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_677_374 nanoseconds.
        Weight::from_parts(3_820_987_062, 0)
            // Standard Error: 268_252
            .saturating_add(Weight::from_parts(255_977_920, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 515_418 nanoseconds.
        Weight::from_parts(522_188_000, 0)
            // Standard Error: 55_829
            .saturating_add(Weight::from_parts(31_257_326, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_956 nanoseconds.
        Weight::from_parts(135_884_682, 0)
            // Standard Error: 312_774
            .saturating_add(Weight::from_parts(353_743_445, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 437_809 nanoseconds.
        Weight::from_parts(441_185_000, 0)
            // Standard Error: 64_589
            .saturating_add(Weight::from_parts(21_143_950, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 240_166 nanoseconds.
        Weight::from_parts(307_423_566, 0)
            // Standard Error: 263_198
            .saturating_add(Weight::from_parts(365_304_897, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 466_793 nanoseconds.
        Weight::from_parts(479_126_000, 0)
            // Standard Error: 63_386
            .saturating_add(Weight::from_parts(21_350_039, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_102 nanoseconds.
        Weight::from_parts(83_399_128, 0)
            // Standard Error: 229_588
            .saturating_add(Weight::from_parts(20_817_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_001 nanoseconds.
        Weight::from_parts(86_637_798, 0)
            // Standard Error: 923
            .saturating_add(Weight::from_parts(424_190, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_499 nanoseconds.
        Weight::from_parts(131_462_314, 0)
            // Standard Error: 296_583
            .saturating_add(Weight::from_parts(246_894_431, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_357 nanoseconds.
        Weight::from_parts(97_184_000, 0)
            // Standard Error: 2_351
            .saturating_add(Weight::from_parts(640_572, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_493 nanoseconds.
        Weight::from_parts(93_301_112, 0)
            // Standard Error: 231_085
            .saturating_add(Weight::from_parts(9_751_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_738 nanoseconds.
        Weight::from_parts(85_959_957, 0)
            // Standard Error: 1_056
            .saturating_add(Weight::from_parts(426_826, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_593 nanoseconds.
        Weight::from_parts(61_040_651, 0)
            // Standard Error: 231_867
            .saturating_add(Weight::from_parts(183_706_745, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_324 nanoseconds.
        Weight::from_parts(66_339_260, 0)
            // Standard Error: 254_057
            .saturating_add(Weight::from_parts(181_778_743, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_163 nanoseconds.
        Weight::from_parts(746_906_968, 0)
            // Standard Error: 289_363
            .saturating_add(Weight::from_parts(197_735_344, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 727_470 nanoseconds.
        Weight::from_parts(764_436_591, 0)
            // Standard Error: 1_954
            .saturating_add(Weight::from_parts(155_898, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_379_140 nanoseconds.
        Weight::from_parts(4_509_467_459, 0)
            // Standard Error: 293_145
            .saturating_add(Weight::from_parts(202_192_351, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_116_085 nanoseconds.
        Weight::from_parts(1_161_687_850, 0)
            // Standard Error: 9_577
            .saturating_add(Weight::from_parts(13_711_920, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_884 nanoseconds.
        Weight::from_parts(97_414_295, 0)
            // Standard Error: 266_242
            .saturating_add(Weight::from_parts(191_541_864, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 259_961 nanoseconds.
        Weight::from_parts(261_294_000, 0)
            // Standard Error: 55_450
            .saturating_add(Weight::from_parts(26_992_075, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_153 nanoseconds.
        Weight::from_parts(92_584_315, 0)
            // Standard Error: 263_504
            .saturating_add(Weight::from_parts(235_583_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_011 nanoseconds.
        Weight::from_parts(60_532_712, 0)
            // Standard Error: 252_427
            .saturating_add(Weight::from_parts(181_273_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_956 nanoseconds.
        Weight::from_parts(83_128_273, 0)
            // Standard Error: 233_270
            .saturating_add(Weight::from_parts(24_200_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_471 nanoseconds.
        Weight::from_parts(84_933_897, 0)
            // Standard Error: 228_044
            .saturating_add(Weight::from_parts(10_863_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_140 nanoseconds.
        Weight::from_parts(82_413_287, 0)
            // Standard Error: 242_017
            .saturating_add(Weight::from_parts(15_558_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_597 nanoseconds.
        Weight::from_parts(83_256_853, 0)
            // Standard Error: 251_615
            .saturating_add(Weight::from_parts(14_287_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_149 nanoseconds.
        Weight::from_parts(84_067_253, 0)
            // Standard Error: 242_934
            .saturating_add(Weight::from_parts(12_984_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_568 nanoseconds.
        Weight::from_parts(191_754_546, 0)
            // Standard Error: 310_042
            .saturating_add(Weight::from_parts(258_517_274, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_961 nanoseconds.
        Weight::from_parts(135_401_157, 0)
            // Standard Error: 330_013
            .saturating_add(Weight::from_parts(438_218_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_618_378 nanoseconds.
        Weight::from_parts(44_975_555_000, 0)
            // Standard Error: 259_430
            .saturating_add(Weight::from_parts(7_365_489, 0).saturating_mul(p.into()))
            // Standard Error: 259_417
            .saturating_add(Weight::from_parts(155_224_672, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 81_060 nanoseconds.
        Weight::from_parts(116_078_081, 141)
            // Standard Error: 8_097
            .saturating_add(Weight::from_parts(11_697_667, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 82_253 nanoseconds.
        Weight::from_parts(83_487_000, 141)
            // Standard Error: 44_559
            .saturating_add(Weight::from_parts(36_153_847, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 6_059_320 nanoseconds.
        Weight::from_parts(6_026_768_509, 5068941)
            // Standard Error: 74_371
            .saturating_add(Weight::from_parts(37_256_749, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `949 + p * (75606 ±0)`
        // Minimum execution time: 82_117 nanoseconds.
        Weight::from_parts(84_007_000, 949)
            // Standard Error: 37_631
            .saturating_add(Weight::from_parts(45_958_696, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 93_080 nanoseconds.
        Weight::from_parts(77_592_595, 506)
            // Standard Error: 74_142
            .saturating_add(Weight::from_parts(37_638_856, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 748_265 nanoseconds.
        Weight::from_parts(748_224_476, 506)
            // Standard Error: 324_620
            .saturating_add(Weight::from_parts(46_953_221, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 1_126_554 nanoseconds.
        Weight::from_parts(1_175_012_009, 316941)
            // Standard Error: 204_912
            .saturating_add(Weight::from_parts(43_619_826, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_248_587 nanoseconds.
        Weight::from_parts(4_247_395_501, 0)
            // Standard Error: 11_091
            .saturating_add(Weight::from_parts(3_323_996, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_244_604 nanoseconds.
        Weight::from_parts(4_236_154_065, 0)
            // Standard Error: 10_679
            .saturating_add(Weight::from_parts(3_383_238, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_566_548 nanoseconds.
        Weight::from_parts(10_110_815_063, 0)
            // Standard Error: 164_010
            .saturating_add(Weight::from_parts(15_834_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_594_891 nanoseconds.
        Weight::from_parts(10_824_075_202, 0)
            // Standard Error: 246_795
            .saturating_add(Weight::from_parts(8_865_110, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984 nanoseconds.
        Weight::from_parts(2_022_000, 0)
            // Standard Error: 8_549
            .saturating_add(Weight::from_parts(3_833_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_972 nanoseconds.
        Weight::from_parts(2_014_000, 0)
            // Standard Error: 4_696
            .saturating_add(Weight::from_parts(3_071_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_990 nanoseconds.
        Weight::from_parts(3_141_848, 0)
            // Standard Error: 1_067
            .saturating_add(Weight::from_parts(1_565_212, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_910 nanoseconds.
        Weight::from_parts(1_977_000, 0)
            // Standard Error: 10_190
            .saturating_add(Weight::from_parts(2_916_284, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_055 nanoseconds.
        Weight::from_parts(2_124_000, 0)
            // Standard Error: 9_616
            .saturating_add(Weight::from_parts(5_239_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_569 nanoseconds.
        Weight::from_parts(5_561_073, 0)
            // Standard Error: 1_593
            .saturating_add(Weight::from_parts(158_847, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_001 nanoseconds.
        Weight::from_parts(4_351_879, 0)
            // Standard Error: 6_992
            .saturating_add(Weight::from_parts(2_579_629, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_579_629 -
            2_411_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_001 nanoseconds.
        Weight::from_parts(4_619_716, 0)
            // Standard Error: 12_765
            .saturating_add(Weight::from_parts(2_411_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_321 nanoseconds.
        Weight::from_parts(13_844_527, 0)
            // Standard Error: 28_587
            .saturating_add(Weight::from_parts(10_571_661, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_173 nanoseconds.
        Weight::from_parts(4_877_843, 0)
            // Standard Error: 7_292
            .saturating_add(Weight::from_parts(1_288_806, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_997 nanoseconds.
        Weight::from_parts(5_260_743, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(22, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_940 nanoseconds.
        Weight::from_parts(1_830_043, 0)
            // Standard Error: 2_843
            .saturating_add(Weight::from_parts(258_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_991 nanoseconds.
        Weight::from_parts(2_027_000, 0)
            // Standard Error: 5_369
            .saturating_add(Weight::from_parts(736_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_000 nanoseconds.
        Weight::from_parts(2_062_000, 0)
            // Standard Error: 4_630
            .saturating_add(Weight::from_parts(719_367, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_741 nanoseconds.
        Weight::from_parts(2_616_782, 0)
            // Standard Error: 6_777
            .saturating_add(Weight::from_parts(731_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_795 nanoseconds.
        Weight::from_parts(5_840_000, 0)
            // Standard Error: 8_144
            .saturating_add(Weight::from_parts(1_259_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_596 nanoseconds.
        Weight::from_parts(2_374_393, 0)
            // Standard Error: 12_129
            .saturating_add(Weight::from_parts(6_823_668, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_980 nanoseconds.
        Weight::from_parts(2_045_000, 0)
            // Standard Error: 8_388
            .saturating_add(Weight::from_parts(3_325_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_950 nanoseconds.
        Weight::from_parts(2_041_000, 0)
            // Standard Error: 7_692
            .saturating_add(Weight::from_parts(3_034_615, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_981 nanoseconds.
        Weight::from_parts(2_061_000, 0)
            // Standard Error: 8_251
            .saturating_add(Weight::from_parts(3_019_593, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_980 nanoseconds.
        Weight::from_parts(2_039_000, 0)
            // Standard Error: 6_062
            .saturating_add(Weight::from_parts(2_592_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_036 nanoseconds.
        Weight::from_parts(2_085_000, 0)
            // Standard Error: 3_811
            .saturating_add(Weight::from_parts(537_423, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_987 nanoseconds.
        Weight::from_parts(1_301_383, 0)
            // Standard Error: 3_109
            .saturating_add(Weight::from_parts(381_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_999 nanoseconds.
        Weight::from_parts(2_069_000, 0)
            // Standard Error: 11_800
            .saturating_add(Weight::from_parts(1_805_699, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_014 nanoseconds.
        Weight::from_parts(2_070_000, 0)
            // Standard Error: 8_255
            .saturating_add(Weight::from_parts(1_114_949, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_900 nanoseconds.
        Weight::from_parts(1_701_470, 0)
            // Standard Error: 2_591
            .saturating_add(Weight::from_parts(312_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_982 nanoseconds.
        Weight::from_parts(2_190_000, 0)
            // Standard Error: 1_685
            .saturating_add(Weight::from_parts(172_493, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_041 nanoseconds.
        Weight::from_parts(2_605_622, 0)
            // Standard Error: 1_576
            .saturating_add(Weight::from_parts(159_097, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_918 nanoseconds.
        Weight::from_parts(2_021_000, 0)
            // Standard Error: 11_160
            .saturating_add(Weight::from_parts(1_781_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_990 nanoseconds.
        Weight::from_parts(2_047_000, 0)
            // Standard Error: 6_989
            .saturating_add(Weight::from_parts(1_086_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_991 nanoseconds.
        Weight::from_parts(2_035_000, 0)
            // Standard Error: 9_623
            .saturating_add(Weight::from_parts(1_797_223, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_957 nanoseconds.
        Weight::from_parts(2_016_000, 0)
            // Standard Error: 7_516
            .saturating_add(Weight::from_parts(1_100_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_975 nanoseconds.
        Weight::from_parts(2_042_000, 0)
            // Standard Error: 9_617
            .saturating_add(Weight::from_parts(1_798_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_919 nanoseconds.
        Weight::from_parts(2_044_000, 0)
            // Standard Error: 7_469
            .saturating_add(Weight::from_parts(1_119_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_983 nanoseconds.
        Weight::from_parts(2_025_000, 0)
            // Standard Error: 11_078
            .saturating_add(Weight::from_parts(1_866_193, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_945 nanoseconds.
        Weight::from_parts(2_063_000, 0)
            // Standard Error: 7_762
            .saturating_add(Weight::from_parts(1_098_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984 nanoseconds.
        Weight::from_parts(2_013_000, 0)
            // Standard Error: 13_010
            .saturating_add(Weight::from_parts(1_809_632, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_936 nanoseconds.
        Weight::from_parts(2_085_000, 0)
            // Standard Error: 7_662
            .saturating_add(Weight::from_parts(1_077_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_960 nanoseconds.
        Weight::from_parts(2_013_000, 0)
            // Standard Error: 11_774
            .saturating_add(Weight::from_parts(1_786_196, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_938 nanoseconds.
        Weight::from_parts(1_981_000, 0)
            // Standard Error: 7_698
            .saturating_add(Weight::from_parts(1_068_379, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_992 nanoseconds.
        Weight::from_parts(2_053_000, 0)
            // Standard Error: 11_716
            .saturating_add(Weight::from_parts(1_786_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_940 nanoseconds.
        Weight::from_parts(2_005_000, 0)
            // Standard Error: 7_815
            .saturating_add(Weight::from_parts(1_090_447, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_930 nanoseconds.
        Weight::from_parts(2_037_000, 0)
            // Standard Error: 14_146
            .saturating_add(Weight::from_parts(1_837_345, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_953 nanoseconds.
        Weight::from_parts(1_994_000, 0)
            // Standard Error: 7_326
            .saturating_add(Weight::from_parts(1_124_069, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_990 nanoseconds.
        Weight::from_parts(2_022_000, 0)
            // Standard Error: 11_502
            .saturating_add(Weight::from_parts(1_784_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_955 nanoseconds.
        Weight::from_parts(2_030_000, 0)
            // Standard Error: 7_269
            .saturating_add(Weight::from_parts(1_087_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_966 nanoseconds.
        Weight::from_parts(2_021_000, 0)
            // Standard Error: 10_931
            .saturating_add(Weight::from_parts(1_779_890, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_985 nanoseconds.
        Weight::from_parts(2_057_000, 0)
            // Standard Error: 7_783
            .saturating_add(Weight::from_parts(1_115_230, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_927 nanoseconds.
        Weight::from_parts(2_053_000, 0)
            // Standard Error: 7_508
            .saturating_add(Weight::from_parts(1_212_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_009 nanoseconds.
        Weight::from_parts(2_075_000, 0)
            // Standard Error: 3_877
            .saturating_add(Weight::from_parts(576_488, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_909 nanoseconds.
        Weight::from_parts(1_957_000, 0)
            // Standard Error: 7_060
            .saturating_add(Weight::from_parts(1_174_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_985 nanoseconds.
        Weight::from_parts(2_041_000, 0)
            // Standard Error: 4_555
            .saturating_add(Weight::from_parts(594_904, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_982 nanoseconds.
        Weight::from_parts(2_073_000, 0)
            // Standard Error: 12_025
            .saturating_add(Weight::from_parts(1_724_065, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_957 nanoseconds.
        Weight::from_parts(2_007_000, 0)
            // Standard Error: 8_716
            .saturating_add(Weight::from_parts(1_150_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_884 nanoseconds.
        Weight::from_parts(1_144_446, 0)
            // Standard Error: 10_547
            .saturating_add(Weight::from_parts(2_675_861, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_006 nanoseconds.
        Weight::from_parts(69_582, 0)
            // Standard Error: 11_472
            .saturating_add(Weight::from_parts(2_348_861, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_935 nanoseconds.
        Weight::from_parts(1_504_156, 0)
            // Standard Error: 16_606
            .saturating_add(Weight::from_parts(2_805_608, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_982 nanoseconds.
        Weight::from_parts(7_507_453, 0)
            // Standard Error: 27_413
            .saturating_add(Weight::from_parts(2_106_829, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_957 nanoseconds.
        Weight::from_parts(2_062_000, 0)
            // Standard Error: 22_291
            .saturating_add(Weight::from_parts(9_226_033, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_952 nanoseconds.
        Weight::from_parts(737_483, 0)
            // Standard Error: 45_126
            .saturating_add(Weight::from_parts(7_533_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_957 nanoseconds.
        Weight::from_parts(3_376_184, 0)
            // Standard Error: 20_172
            .saturating_add(Weight::from_parts(2_862_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_982 nanoseconds.
        Weight::from_parts(2_067_000, 0)
            // Standard Error: 5_984
            .saturating_add(Weight::from_parts(2_531_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_968 nanoseconds.
        Weight::from_parts(2_028_000, 0)
            // Standard Error: 8_261
            .saturating_add(Weight::from_parts(1_261_509, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_029 nanoseconds.
        Weight::from_parts(2_047_000, 0)
            // Standard Error: 4_691
            .saturating_add(Weight::from_parts(613_890, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_946 nanoseconds.
        Weight::from_parts(2_035_000, 0)
            // Standard Error: 8_090
            .saturating_add(Weight::from_parts(1_206_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_022 nanoseconds.
        Weight::from_parts(2_069_000, 0)
            // Standard Error: 4_558
            .saturating_add(Weight::from_parts(600_340, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_031 nanoseconds.
        Weight::from_parts(2_088_000, 0)
            // Standard Error: 7_497
            .saturating_add(Weight::from_parts(1_200_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_007 nanoseconds.
        Weight::from_parts(2_047_000, 0)
            // Standard Error: 4_583
            .saturating_add(Weight::from_parts(601_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_968 nanoseconds.
        Weight::from_parts(2_035_000, 0)
            // Standard Error: 7_148
            .saturating_add(Weight::from_parts(1_033_991, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_951 nanoseconds.
        Weight::from_parts(2_036_000, 0)
            // Standard Error: 3_798
            .saturating_add(Weight::from_parts(557_173, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_008 nanoseconds.
        Weight::from_parts(2_059_000, 0)
            // Standard Error: 6_814
            .saturating_add(Weight::from_parts(1_071_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_988 nanoseconds.
        Weight::from_parts(2_050_000, 0)
            // Standard Error: 3_646
            .saturating_add(Weight::from_parts(552_674, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_975 nanoseconds.
        Weight::from_parts(2_007_000, 0)
            // Standard Error: 6_233
            .saturating_add(Weight::from_parts(1_020_688, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_921 nanoseconds.
        Weight::from_parts(2_007_000, 0)
            // Standard Error: 3_338
            .saturating_add(Weight::from_parts(524_904, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_035 nanoseconds.
        Weight::from_parts(2_096_000, 0)
            // Standard Error: 6_820
            .saturating_add(Weight::from_parts(989_478, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_917 nanoseconds.
        Weight::from_parts(10_071, 0)
            // Standard Error: 5_314
            .saturating_add(Weight::from_parts(585_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_993 nanoseconds.
        Weight::from_parts(2_062_000, 0)
            // Standard Error: 7_508
            .saturating_add(Weight::from_parts(1_010_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_944 nanoseconds.
        Weight::from_parts(1_993_000, 0)
            // Standard Error: 3_741
            .saturating_add(Weight::from_parts(549_410, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 714 nanoseconds.
        Weight::from_parts(762_000, 0)
            // Standard Error: 916
            .saturating_add(Weight::from_parts(249_959, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `74 + c * (1024 ±0)`
        //  Estimated: `2546 + c * (1024 ±0)`
        // Minimum execution time: 2_591 nanoseconds.
        Weight::from_parts(2_658_000, 2546)
            // Standard Error: 1_587
            .saturating_add(Weight::from_parts(691_791, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 47_048 nanoseconds.
        Weight::from_parts(80_532_528, 0)
            // Standard Error: 4_561
            .saturating_add(Weight::from_parts(2_208_073, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `847`
        //  Estimated: `17017`
        // Minimum execution time: 49_187 nanoseconds.
        Weight::from_parts(51_290_000, 17017)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `3010`
        // Minimum execution time: 55_252 nanoseconds.
        Weight::from_parts(39_508_166, 3010)
            // Standard Error: 54_990
            .saturating_add(Weight::from_parts(53_653_596, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `604`
        //  Estimated: `17714`
        // Minimum execution time: 45_837 nanoseconds.
        Weight::from_parts(67_499_867, 17714)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_312, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `13432`
        // Minimum execution time: 9_772_476 nanoseconds.
        Weight::from_parts(137_998_681, 13432)
            // Standard Error: 153_459
            .saturating_add(Weight::from_parts(54_040_008, 0).saturating_mul(c.into()))
            // Standard Error: 9
            .saturating_add(Weight::from_parts(2_271, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `374`
        //  Estimated: `14759`
        // Minimum execution time: 47_594 nanoseconds.
        Weight::from_parts(39_261_875, 14759)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_154, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1042`
        //  Estimated: `30879`
        // Minimum execution time: 69_752 nanoseconds.
        Weight::from_parts(56_435_092, 30879)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_169, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `40731`
        // Minimum execution time: 257_221 nanoseconds.
        Weight::from_parts(266_363_888, 40731)
            // Standard Error: 927
            .saturating_add(Weight::from_parts(13_060, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `40581`
        // Minimum execution time: 272_686 nanoseconds.
        Weight::from_parts(284_450_996, 40581)
            // Standard Error: 786
            .saturating_add(Weight::from_parts(260, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2973 + c * (2150 ±0)`
        // Minimum execution time: 40_325 nanoseconds.
        Weight::from_parts(40_776_000, 2973)
            // Standard Error: 26_634
            .saturating_add(Weight::from_parts(51_482_330, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_124 nanoseconds.
        Weight::from_parts(56_808_831, 0)
            // Standard Error: 286_293
            .saturating_add(Weight::from_parts(121_779_133, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 193_689 nanoseconds.
        Weight::from_parts(170_580_231, 0)
            // Standard Error: 278_566
            .saturating_add(Weight::from_parts(123_420_096, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_404 nanoseconds.
        Weight::from_parts(88_583_428, 0)
            // Standard Error: 3_546
            .saturating_add(Weight::from_parts(3_421_193, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 131_673 nanoseconds.
        Weight::from_parts(139_085_832, 0)
            // Standard Error: 15_674
            .saturating_add(Weight::from_parts(3_646_255, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_127 nanoseconds.
        Weight::from_parts(107_304_676, 0)
            // Standard Error: 280_555
            .saturating_add(Weight::from_parts(183_537_739, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_204 nanoseconds.
        Weight::from_parts(63_855_671, 0)
            // Standard Error: 255_652
            .saturating_add(Weight::from_parts(180_882_229, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_747 nanoseconds.
        Weight::from_parts(62_378_952, 0)
            // Standard Error: 243_378
            .saturating_add(Weight::from_parts(181_354_986, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_628 nanoseconds.
        Weight::from_parts(62_023_316, 0)
            // Standard Error: 239_172
            .saturating_add(Weight::from_parts(181_312_090, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_107 nanoseconds.
        Weight::from_parts(64_448_589, 0)
            // Standard Error: 243_926
            .saturating_add(Weight::from_parts(181_908_539, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_063 nanoseconds.
        Weight::from_parts(63_994_362, 0)
            // Standard Error: 222_109
            .saturating_add(Weight::from_parts(180_538_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_507 nanoseconds.
        Weight::from_parts(62_253_457, 0)
            // Standard Error: 237_685
            .saturating_add(Weight::from_parts(180_220_624, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_164 nanoseconds.
        Weight::from_parts(64_087_928, 0)
            // Standard Error: 254_664
            .saturating_add(Weight::from_parts(180_159_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_583 nanoseconds.
        Weight::from_parts(67_596_795, 0)
            // Standard Error: 234_491
            .saturating_add(Weight::from_parts(181_034_283, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 707_674 nanoseconds.
        Weight::from_parts(799_106_757, 0)
            // Standard Error: 290_054
            .saturating_add(Weight::from_parts(237_370_449, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 952_371 nanoseconds.
        Weight::from_parts(956_495_000, 0)
            // Standard Error: 60_878
            .saturating_add(Weight::from_parts(14_227_144, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_283 nanoseconds.
        Weight::from_parts(67_213_364, 0)
            // Standard Error: 216_089
            .saturating_add(Weight::from_parts(179_717_831, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_151 nanoseconds.
        Weight::from_parts(64_827_395, 0)
            // Standard Error: 240_155
            .saturating_add(Weight::from_parts(180_340_647, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_607 nanoseconds.
        Weight::from_parts(97_606_147, 0)
            // Standard Error: 253_065
            .saturating_add(Weight::from_parts(234_245_810, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_345 nanoseconds.
        Weight::from_parts(63_840_792, 0)
            // Standard Error: 226_520
            .saturating_add(Weight::from_parts(187_131_229, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_677_374 nanoseconds.
        Weight::from_parts(3_820_987_062, 0)
            // Standard Error: 268_252
            .saturating_add(Weight::from_parts(255_977_920, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 515_418 nanoseconds.
        Weight::from_parts(522_188_000, 0)
            // Standard Error: 55_829
            .saturating_add(Weight::from_parts(31_257_326, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_956 nanoseconds.
        Weight::from_parts(135_884_682, 0)
            // Standard Error: 312_774
            .saturating_add(Weight::from_parts(353_743_445, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 437_809 nanoseconds.
        Weight::from_parts(441_185_000, 0)
            // Standard Error: 64_589
            .saturating_add(Weight::from_parts(21_143_950, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 240_166 nanoseconds.
        Weight::from_parts(307_423_566, 0)
            // Standard Error: 263_198
            .saturating_add(Weight::from_parts(365_304_897, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 466_793 nanoseconds.
        Weight::from_parts(479_126_000, 0)
            // Standard Error: 63_386
            .saturating_add(Weight::from_parts(21_350_039, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_102 nanoseconds.
        Weight::from_parts(83_399_128, 0)
            // Standard Error: 229_588
            .saturating_add(Weight::from_parts(20_817_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_001 nanoseconds.
        Weight::from_parts(86_637_798, 0)
            // Standard Error: 923
            .saturating_add(Weight::from_parts(424_190, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_499 nanoseconds.
        Weight::from_parts(131_462_314, 0)
            // Standard Error: 296_583
            .saturating_add(Weight::from_parts(246_894_431, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_357 nanoseconds.
        Weight::from_parts(97_184_000, 0)
            // Standard Error: 2_351
            .saturating_add(Weight::from_parts(640_572, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_493 nanoseconds.
        Weight::from_parts(93_301_112, 0)
            // Standard Error: 231_085
            .saturating_add(Weight::from_parts(9_751_187, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_738 nanoseconds.
        Weight::from_parts(85_959_957, 0)
            // Standard Error: 1_056
            .saturating_add(Weight::from_parts(426_826, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_593 nanoseconds.
        Weight::from_parts(61_040_651, 0)
            // Standard Error: 231_867
            .saturating_add(Weight::from_parts(183_706_745, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_324 nanoseconds.
        Weight::from_parts(66_339_260, 0)
            // Standard Error: 254_057
            .saturating_add(Weight::from_parts(181_778_743, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_163 nanoseconds.
        Weight::from_parts(746_906_968, 0)
            // Standard Error: 289_363
            .saturating_add(Weight::from_parts(197_735_344, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 727_470 nanoseconds.
        Weight::from_parts(764_436_591, 0)
            // Standard Error: 1_954
            .saturating_add(Weight::from_parts(155_898, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_379_140 nanoseconds.
        Weight::from_parts(4_509_467_459, 0)
            // Standard Error: 293_145
            .saturating_add(Weight::from_parts(202_192_351, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_116_085 nanoseconds.
        Weight::from_parts(1_161_687_850, 0)
            // Standard Error: 9_577
            .saturating_add(Weight::from_parts(13_711_920, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_884 nanoseconds.
        Weight::from_parts(97_414_295, 0)
            // Standard Error: 266_242
            .saturating_add(Weight::from_parts(191_541_864, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 259_961 nanoseconds.
        Weight::from_parts(261_294_000, 0)
            // Standard Error: 55_450
            .saturating_add(Weight::from_parts(26_992_075, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_153 nanoseconds.
        Weight::from_parts(92_584_315, 0)
            // Standard Error: 263_504
            .saturating_add(Weight::from_parts(235_583_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_011 nanoseconds.
        Weight::from_parts(60_532_712, 0)
            // Standard Error: 252_427
            .saturating_add(Weight::from_parts(181_273_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_956 nanoseconds.
        Weight::from_parts(83_128_273, 0)
            // Standard Error: 233_270
            .saturating_add(Weight::from_parts(24_200_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_471 nanoseconds.
        Weight::from_parts(84_933_897, 0)
            // Standard Error: 228_044
            .saturating_add(Weight::from_parts(10_863_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_140 nanoseconds.
        Weight::from_parts(82_413_287, 0)
            // Standard Error: 242_017
            .saturating_add(Weight::from_parts(15_558_512, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 79_597 nanoseconds.
        Weight::from_parts(83_256_853, 0)
            // Standard Error: 251_615
            .saturating_add(Weight::from_parts(14_287_546, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_149 nanoseconds.
        Weight::from_parts(84_067_253, 0)
            // Standard Error: 242_934
            .saturating_add(Weight::from_parts(12_984_046, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_568 nanoseconds.
        Weight::from_parts(191_754_546, 0)
            // Standard Error: 310_042
            .saturating_add(Weight::from_parts(258_517_274, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_961 nanoseconds.
        Weight::from_parts(135_401_157, 0)
            // Standard Error: 330_013
            .saturating_add(Weight::from_parts(438_218_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_618_378 nanoseconds.
        Weight::from_parts(44_975_555_000, 0)
            // Standard Error: 259_430
            .saturating_add(Weight::from_parts(7_365_489, 0).saturating_mul(p.into()))
            // Standard Error: 259_417
            .saturating_add(Weight::from_parts(155_224_672, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 81_060 nanoseconds.
        Weight::from_parts(116_078_081, 141)
            // Standard Error: 8_097
            .saturating_add(Weight::from_parts(11_697_667, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 82_253 nanoseconds.
        Weight::from_parts(83_487_000, 141)
            // Standard Error: 44_559
            .saturating_add(Weight::from_parts(36_153_847, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 6_059_320 nanoseconds.
        Weight::from_parts(6_026_768_509, 5068941)
            // Standard Error: 74_371
            .saturating_add(Weight::from_parts(37_256_749, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `949 + p * (75606 ±0)`
        // Minimum execution time: 82_117 nanoseconds.
        Weight::from_parts(84_007_000, 949)
            // Standard Error: 37_631
            .saturating_add(Weight::from_parts(45_958_696, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 93_080 nanoseconds.
        Weight::from_parts(77_592_595, 506)
            // Standard Error: 74_142
            .saturating_add(Weight::from_parts(37_638_856, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `506 + p * (9883 ±2)`
        // Minimum execution time: 748_265 nanoseconds.
        Weight::from_parts(748_224_476, 506)
            // Standard Error: 324_620
            .saturating_add(Weight::from_parts(46_953_221, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 1_126_554 nanoseconds.
        Weight::from_parts(1_175_012_009, 316941)
            // Standard Error: 204_912
            .saturating_add(Weight::from_parts(43_619_826, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_248_587 nanoseconds.
        Weight::from_parts(4_247_395_501, 0)
            // Standard Error: 11_091
            .saturating_add(Weight::from_parts(3_323_996, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_244_604 nanoseconds.
        Weight::from_parts(4_236_154_065, 0)
            // Standard Error: 10_679
            .saturating_add(Weight::from_parts(3_383_238, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_566_548 nanoseconds.
        Weight::from_parts(10_110_815_063, 0)
            // Standard Error: 164_010
            .saturating_add(Weight::from_parts(15_834_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_594_891 nanoseconds.
        Weight::from_parts(10_824_075_202, 0)
            // Standard Error: 246_795
            .saturating_add(Weight::from_parts(8_865_110, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984 nanoseconds.
        Weight::from_parts(2_022_000, 0)
            // Standard Error: 8_549
            .saturating_add(Weight::from_parts(3_833_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_972 nanoseconds.
        Weight::from_parts(2_014_000, 0)
            // Standard Error: 4_696
            .saturating_add(Weight::from_parts(3_071_869, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_990 nanoseconds.
        Weight::from_parts(3_141_848, 0)
            // Standard Error: 1_067
            .saturating_add(Weight::from_parts(1_565_212, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_910 nanoseconds.
        Weight::from_parts(1_977_000, 0)
            // Standard Error: 10_190
            .saturating_add(Weight::from_parts(2_916_284, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_055 nanoseconds.
        Weight::from_parts(2_124_000, 0)
            // Standard Error: 9_616
            .saturating_add(Weight::from_parts(5_239_104, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_569 nanoseconds.
        Weight::from_parts(5_561_073, 0)
            // Standard Error: 1_593
            .saturating_add(Weight::from_parts(158_847, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_001 nanoseconds.
        Weight::from_parts(4_351_879, 0)
            // Standard Error: 6_992
            .saturating_add(Weight::from_parts(2_579_629, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_579_629 -
            2_411_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_001 nanoseconds.
        Weight::from_parts(4_619_716, 0)
            // Standard Error: 12_765
            .saturating_add(Weight::from_parts(2_411_507, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_321 nanoseconds.
        Weight::from_parts(13_844_527, 0)
            // Standard Error: 28_587
            .saturating_add(Weight::from_parts(10_571_661, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_173 nanoseconds.
        Weight::from_parts(4_877_843, 0)
            // Standard Error: 7_292
            .saturating_add(Weight::from_parts(1_288_806, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_997 nanoseconds.
        Weight::from_parts(5_260_743, 0)
            // Standard Error: 13
            .saturating_add(Weight::from_parts(22, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_940 nanoseconds.
        Weight::from_parts(1_830_043, 0)
            // Standard Error: 2_843
            .saturating_add(Weight::from_parts(258_952, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_991 nanoseconds.
        Weight::from_parts(2_027_000, 0)
            // Standard Error: 5_369
            .saturating_add(Weight::from_parts(736_000, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_000 nanoseconds.
        Weight::from_parts(2_062_000, 0)
            // Standard Error: 4_630
            .saturating_add(Weight::from_parts(719_367, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_741 nanoseconds.
        Weight::from_parts(2_616_782, 0)
            // Standard Error: 6_777
            .saturating_add(Weight::from_parts(731_002, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_795 nanoseconds.
        Weight::from_parts(5_840_000, 0)
            // Standard Error: 8_144
            .saturating_add(Weight::from_parts(1_259_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_596 nanoseconds.
        Weight::from_parts(2_374_393, 0)
            // Standard Error: 12_129
            .saturating_add(Weight::from_parts(6_823_668, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_980 nanoseconds.
        Weight::from_parts(2_045_000, 0)
            // Standard Error: 8_388
            .saturating_add(Weight::from_parts(3_325_416, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_950 nanoseconds.
        Weight::from_parts(2_041_000, 0)
            // Standard Error: 7_692
            .saturating_add(Weight::from_parts(3_034_615, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_981 nanoseconds.
        Weight::from_parts(2_061_000, 0)
            // Standard Error: 8_251
            .saturating_add(Weight::from_parts(3_019_593, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_980 nanoseconds.
        Weight::from_parts(2_039_000, 0)
            // Standard Error: 6_062
            .saturating_add(Weight::from_parts(2_592_066, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_036 nanoseconds.
        Weight::from_parts(2_085_000, 0)
            // Standard Error: 3_811
            .saturating_add(Weight::from_parts(537_423, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_987 nanoseconds.
        Weight::from_parts(1_301_383, 0)
            // Standard Error: 3_109
            .saturating_add(Weight::from_parts(381_295, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_999 nanoseconds.
        Weight::from_parts(2_069_000, 0)
            // Standard Error: 11_800
            .saturating_add(Weight::from_parts(1_805_699, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_014 nanoseconds.
        Weight::from_parts(2_070_000, 0)
            // Standard Error: 8_255
            .saturating_add(Weight::from_parts(1_114_949, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_900 nanoseconds.
        Weight::from_parts(1_701_470, 0)
            // Standard Error: 2_591
            .saturating_add(Weight::from_parts(312_279, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_982 nanoseconds.
        Weight::from_parts(2_190_000, 0)
            // Standard Error: 1_685
            .saturating_add(Weight::from_parts(172_493, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_041 nanoseconds.
        Weight::from_parts(2_605_622, 0)
            // Standard Error: 1_576
            .saturating_add(Weight::from_parts(159_097, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_918 nanoseconds.
        Weight::from_parts(2_021_000, 0)
            // Standard Error: 11_160
            .saturating_add(Weight::from_parts(1_781_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_990 nanoseconds.
        Weight::from_parts(2_047_000, 0)
            // Standard Error: 6_989
            .saturating_add(Weight::from_parts(1_086_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_991 nanoseconds.
        Weight::from_parts(2_035_000, 0)
            // Standard Error: 9_623
            .saturating_add(Weight::from_parts(1_797_223, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_957 nanoseconds.
        Weight::from_parts(2_016_000, 0)
            // Standard Error: 7_516
            .saturating_add(Weight::from_parts(1_100_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_975 nanoseconds.
        Weight::from_parts(2_042_000, 0)
            // Standard Error: 9_617
            .saturating_add(Weight::from_parts(1_798_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_919 nanoseconds.
        Weight::from_parts(2_044_000, 0)
            // Standard Error: 7_469
            .saturating_add(Weight::from_parts(1_119_079, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_983 nanoseconds.
        Weight::from_parts(2_025_000, 0)
            // Standard Error: 11_078
            .saturating_add(Weight::from_parts(1_866_193, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_945 nanoseconds.
        Weight::from_parts(2_063_000, 0)
            // Standard Error: 7_762
            .saturating_add(Weight::from_parts(1_098_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_984 nanoseconds.
        Weight::from_parts(2_013_000, 0)
            // Standard Error: 13_010
            .saturating_add(Weight::from_parts(1_809_632, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_936 nanoseconds.
        Weight::from_parts(2_085_000, 0)
            // Standard Error: 7_662
            .saturating_add(Weight::from_parts(1_077_967, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_960 nanoseconds.
        Weight::from_parts(2_013_000, 0)
            // Standard Error: 11_774
            .saturating_add(Weight::from_parts(1_786_196, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_938 nanoseconds.
        Weight::from_parts(1_981_000, 0)
            // Standard Error: 7_698
            .saturating_add(Weight::from_parts(1_068_379, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_992 nanoseconds.
        Weight::from_parts(2_053_000, 0)
            // Standard Error: 11_716
            .saturating_add(Weight::from_parts(1_786_578, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_940 nanoseconds.
        Weight::from_parts(2_005_000, 0)
            // Standard Error: 7_815
            .saturating_add(Weight::from_parts(1_090_447, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_930 nanoseconds.
        Weight::from_parts(2_037_000, 0)
            // Standard Error: 14_146
            .saturating_add(Weight::from_parts(1_837_345, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_953 nanoseconds.
        Weight::from_parts(1_994_000, 0)
            // Standard Error: 7_326
            .saturating_add(Weight::from_parts(1_124_069, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_990 nanoseconds.
        Weight::from_parts(2_022_000, 0)
            // Standard Error: 11_502
            .saturating_add(Weight::from_parts(1_784_579, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_955 nanoseconds.
        Weight::from_parts(2_030_000, 0)
            // Standard Error: 7_269
            .saturating_add(Weight::from_parts(1_087_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_966 nanoseconds.
        Weight::from_parts(2_021_000, 0)
            // Standard Error: 10_931
            .saturating_add(Weight::from_parts(1_779_890, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_985 nanoseconds.
        Weight::from_parts(2_057_000, 0)
            // Standard Error: 7_783
            .saturating_add(Weight::from_parts(1_115_230, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_927 nanoseconds.
        Weight::from_parts(2_053_000, 0)
            // Standard Error: 7_508
            .saturating_add(Weight::from_parts(1_212_190, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_009 nanoseconds.
        Weight::from_parts(2_075_000, 0)
            // Standard Error: 3_877
            .saturating_add(Weight::from_parts(576_488, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_909 nanoseconds.
        Weight::from_parts(1_957_000, 0)
            // Standard Error: 7_060
            .saturating_add(Weight::from_parts(1_174_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_985 nanoseconds.
        Weight::from_parts(2_041_000, 0)
            // Standard Error: 4_555
            .saturating_add(Weight::from_parts(594_904, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_982 nanoseconds.
        Weight::from_parts(2_073_000, 0)
            // Standard Error: 12_025
            .saturating_add(Weight::from_parts(1_724_065, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_957 nanoseconds.
        Weight::from_parts(2_007_000, 0)
            // Standard Error: 8_716
            .saturating_add(Weight::from_parts(1_150_408, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_884 nanoseconds.
        Weight::from_parts(1_144_446, 0)
            // Standard Error: 10_547
            .saturating_add(Weight::from_parts(2_675_861, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_006 nanoseconds.
        Weight::from_parts(69_582, 0)
            // Standard Error: 11_472
            .saturating_add(Weight::from_parts(2_348_861, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_935 nanoseconds.
        Weight::from_parts(1_504_156, 0)
            // Standard Error: 16_606
            .saturating_add(Weight::from_parts(2_805_608, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_982 nanoseconds.
        Weight::from_parts(7_507_453, 0)
            // Standard Error: 27_413
            .saturating_add(Weight::from_parts(2_106_829, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_957 nanoseconds.
        Weight::from_parts(2_062_000, 0)
            // Standard Error: 22_291
            .saturating_add(Weight::from_parts(9_226_033, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_952 nanoseconds.
        Weight::from_parts(737_483, 0)
            // Standard Error: 45_126
            .saturating_add(Weight::from_parts(7_533_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_957 nanoseconds.
        Weight::from_parts(3_376_184, 0)
            // Standard Error: 20_172
            .saturating_add(Weight::from_parts(2_862_201, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_982 nanoseconds.
        Weight::from_parts(2_067_000, 0)
            // Standard Error: 5_984
            .saturating_add(Weight::from_parts(2_531_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_968 nanoseconds.
        Weight::from_parts(2_028_000, 0)
            // Standard Error: 8_261
            .saturating_add(Weight::from_parts(1_261_509, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_029 nanoseconds.
        Weight::from_parts(2_047_000, 0)
            // Standard Error: 4_691
            .saturating_add(Weight::from_parts(613_890, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_946 nanoseconds.
        Weight::from_parts(2_035_000, 0)
            // Standard Error: 8_090
            .saturating_add(Weight::from_parts(1_206_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_022 nanoseconds.
        Weight::from_parts(2_069_000, 0)
            // Standard Error: 4_558
            .saturating_add(Weight::from_parts(600_340, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_031 nanoseconds.
        Weight::from_parts(2_088_000, 0)
            // Standard Error: 7_497
            .saturating_add(Weight::from_parts(1_200_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_007 nanoseconds.
        Weight::from_parts(2_047_000, 0)
            // Standard Error: 4_583
            .saturating_add(Weight::from_parts(601_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_968 nanoseconds.
        Weight::from_parts(2_035_000, 0)
            // Standard Error: 7_148
            .saturating_add(Weight::from_parts(1_033_991, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_951 nanoseconds.
        Weight::from_parts(2_036_000, 0)
            // Standard Error: 3_798
            .saturating_add(Weight::from_parts(557_173, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_008 nanoseconds.
        Weight::from_parts(2_059_000, 0)
            // Standard Error: 6_814
            .saturating_add(Weight::from_parts(1_071_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_988 nanoseconds.
        Weight::from_parts(2_050_000, 0)
            // Standard Error: 3_646
            .saturating_add(Weight::from_parts(552_674, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_975 nanoseconds.
        Weight::from_parts(2_007_000, 0)
            // Standard Error: 6_233
            .saturating_add(Weight::from_parts(1_020_688, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_921 nanoseconds.
        Weight::from_parts(2_007_000, 0)
            // Standard Error: 3_338
            .saturating_add(Weight::from_parts(524_904, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_035 nanoseconds.
        Weight::from_parts(2_096_000, 0)
            // Standard Error: 6_820
            .saturating_add(Weight::from_parts(989_478, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_917 nanoseconds.
        Weight::from_parts(10_071, 0)
            // Standard Error: 5_314
            .saturating_add(Weight::from_parts(585_983, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_993 nanoseconds.
        Weight::from_parts(2_062_000, 0)
            // Standard Error: 7_508
            .saturating_add(Weight::from_parts(1_010_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_944 nanoseconds.
        Weight::from_parts(1_993_000, 0)
            // Standard Error: 3_741
            .saturating_add(Weight::from_parts(549_410, 0).saturating_mul(r.into()))
    }
}
