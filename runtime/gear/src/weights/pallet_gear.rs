// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 945_000 picoseconds.
        Weight::from_parts(1_005_000, 0)
            // Standard Error: 737
            .saturating_add(Weight::from_parts(208_694, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_834_000 picoseconds.
        Weight::from_parts(2_898_000, 3506)
            // Standard Error: 836
            .saturating_add(Weight::from_parts(727_098, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_004_000 picoseconds.
        Weight::from_parts(56_620_530, 0)
            // Standard Error: 13_548
            .saturating_add(Weight::from_parts(2_670_768, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `782`
        //  Estimated: `23471`
        // Minimum execution time: 59_242_000 picoseconds.
        Weight::from_parts(61_430_000, 23471)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `679`
        //  Estimated: `15019`
        // Minimum execution time: 60_915 nanoseconds.
        Weight::from_parts(71_195_000, 15019)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 72_256_000 picoseconds.
        Weight::from_parts(46_988_794, 4990)
            // Standard Error: 51_525
            .saturating_add(Weight::from_parts(54_624_407, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `719`
        //  Estimated: `39166`
        // Minimum execution time: 64_471_000 picoseconds.
        Weight::from_parts(86_483_641, 39166)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_399, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `202`
        //  Estimated: `33883`
        // Minimum execution time: 10_233_155_000 picoseconds.
        Weight::from_parts(134_253_661, 33883)
            // Standard Error: 168_550
            .saturating_add(Weight::from_parts(55_930_464, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_388, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 54_747_000 picoseconds.
        Weight::from_parts(22_367_510, 23853)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_237, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `945`
        //  Estimated: `41930`
        // Minimum execution time: 81_993_000 picoseconds.
        Weight::from_parts(27_241_736, 41930)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(1_306, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `727`
        //  Estimated: `73959`
        // Minimum execution time: 305_857_000 picoseconds.
        Weight::from_parts(319_224_438, 73959)
            // Standard Error: 1_410
            .saturating_add(Weight::from_parts(1_309, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `727`
        //  Estimated: `73833`
        // Minimum execution time: 320_793_000 picoseconds.
        Weight::from_parts(334_855_853, 73833)
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 55_831_000 picoseconds.
        Weight::from_parts(56_191_000, 3899)
            // Standard Error: 34_380
            .saturating_add(Weight::from_parts(52_973_937, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_393_000 picoseconds.
        Weight::from_parts(106_847_113, 0)
            // Standard Error: 353_319
            .saturating_add(Weight::from_parts(153_643_805, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 234_831_000 picoseconds.
        Weight::from_parts(275_068_127, 0)
            // Standard Error: 413_548
            .saturating_add(Weight::from_parts(156_270_751, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_275_000 picoseconds.
        Weight::from_parts(89_529_131, 0)
            // Standard Error: 5_084
            .saturating_add(Weight::from_parts(4_058_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 137_746_000 picoseconds.
        Weight::from_parts(138_333_879, 0)
            // Standard Error: 27_303
            .saturating_add(Weight::from_parts(4_552_665, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_406_000 picoseconds.
        Weight::from_parts(106_234_466, 0)
            // Standard Error: 404_061
            .saturating_add(Weight::from_parts(222_760_538, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_965_000 picoseconds.
        Weight::from_parts(77_984_173, 0)
            // Standard Error: 379_922
            .saturating_add(Weight::from_parts(220_287_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_475_000 picoseconds.
        Weight::from_parts(80_001_134, 0)
            // Standard Error: 355_046
            .saturating_add(Weight::from_parts(219_371_481, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 120_198 nanoseconds.
        Weight::from_parts(130_172_800, 0)
            // Standard Error: 2_420_191
            .saturating_add(Weight::from_parts(9_196_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_489_000 picoseconds.
        Weight::from_parts(76_357_422, 0)
            // Standard Error: 367_413
            .saturating_add(Weight::from_parts(220_849_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_702_000 picoseconds.
        Weight::from_parts(91_221_728, 0)
            // Standard Error: 421_543
            .saturating_add(Weight::from_parts(222_424_790, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_972_000 picoseconds.
        Weight::from_parts(80_354_802, 0)
            // Standard Error: 371_977
            .saturating_add(Weight::from_parts(222_688_751, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_833_000 picoseconds.
        Weight::from_parts(84_394_656, 0)
            // Standard Error: 348_008
            .saturating_add(Weight::from_parts(221_377_374, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_457_000 picoseconds.
        Weight::from_parts(79_746_261, 0)
            // Standard Error: 390_099
            .saturating_add(Weight::from_parts(221_110_992, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_887_000 picoseconds.
        Weight::from_parts(87_526_953, 0)
            // Standard Error: 353_025
            .saturating_add(Weight::from_parts(217_000_105, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 563_875_000 picoseconds.
        Weight::from_parts(641_088_750, 0)
            // Standard Error: 572_966
            .saturating_add(Weight::from_parts(302_754_150, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 831_015_000 picoseconds.
        Weight::from_parts(862_926_000, 0)
            // Standard Error: 52_118
            .saturating_add(Weight::from_parts(13_340_281, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_019_000 picoseconds.
        Weight::from_parts(78_450_513, 0)
            // Standard Error: 326_764
            .saturating_add(Weight::from_parts(219_173_988, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_983_000 picoseconds.
        Weight::from_parts(72_605_733, 0)
            // Standard Error: 323_470
            .saturating_add(Weight::from_parts(222_408_138, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_754_000 picoseconds.
        Weight::from_parts(85_752_580, 0)
            // Standard Error: 531_291
            .saturating_add(Weight::from_parts(296_535_999, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_287_000 picoseconds.
        Weight::from_parts(159_571_412, 0)
            // Standard Error: 609_809
            .saturating_add(Weight::from_parts(419_885_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 499_125_000 picoseconds.
        Weight::from_parts(502_807_000, 0)
            // Standard Error: 59_392
            .saturating_add(Weight::from_parts(24_809_865, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_273_000 picoseconds.
        Weight::from_parts(145_565_179, 0)
            // Standard Error: 606_765
            .saturating_add(Weight::from_parts(425_379_527, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 493_208_000 picoseconds.
        Weight::from_parts(499_473_000, 0)
            // Standard Error: 61_943
            .saturating_add(Weight::from_parts(25_105_371, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_761_000 picoseconds.
        Weight::from_parts(655_296_256, 0)
            // Standard Error: 562_645
            .saturating_add(Weight::from_parts(442_400_445, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 562_618_000 picoseconds.
        Weight::from_parts(680_781_224, 0)
            // Standard Error: 769_646
            .saturating_add(Weight::from_parts(453_560_640, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_864_000 picoseconds.
        Weight::from_parts(72_238_992, 0)
            // Standard Error: 377_496
            .saturating_add(Weight::from_parts(227_792_180, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_442_174_000 picoseconds.
        Weight::from_parts(4_652_175_576, 0)
            // Standard Error: 708_061
            .saturating_add(Weight::from_parts(322_892_456, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 551_474_000 picoseconds.
        Weight::from_parts(559_791_000, 0)
            // Standard Error: 61_072
            .saturating_add(Weight::from_parts(34_628_105, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_459_071_000 picoseconds.
        Weight::from_parts(4_606_912_139, 0)
            // Standard Error: 1_088_199
            .saturating_add(Weight::from_parts(380_610_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_440_126_000 picoseconds.
        Weight::from_parts(4_633_287_817, 0)
            // Standard Error: 660_344
            .saturating_add(Weight::from_parts(387_725_749, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 247_363_000 picoseconds.
        Weight::from_parts(311_195_601, 0)
            // Standard Error: 527_554
            .saturating_add(Weight::from_parts(439_547_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 667_214_000 picoseconds.
        Weight::from_parts(678_815_000, 0)
            // Standard Error: 57_256
            .saturating_add(Weight::from_parts(24_920_225, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_650_853_000 picoseconds.
        Weight::from_parts(4_775_733_462, 0)
            // Standard Error: 828_017
            .saturating_add(Weight::from_parts(396_148_023, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_348_000 picoseconds.
        Weight::from_parts(90_138_753, 0)
            // Standard Error: 267_292
            .saturating_add(Weight::from_parts(19_761_946, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_899_000 picoseconds.
        Weight::from_parts(91_028_836, 0)
            // Standard Error: 1_097
            .saturating_add(Weight::from_parts(487_131, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_014_000 picoseconds.
        Weight::from_parts(88_326_622, 0)
            // Standard Error: 248_923
            .saturating_add(Weight::from_parts(23_421_477, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_237_000 picoseconds.
        Weight::from_parts(94_692_189, 0)
            // Standard Error: 1_035
            .saturating_add(Weight::from_parts(483_082, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_416_000 picoseconds.
        Weight::from_parts(87_317_289, 0)
            // Standard Error: 266_231
            .saturating_add(Weight::from_parts(21_523_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_909_000 picoseconds.
        Weight::from_parts(88_839_457, 0)
            // Standard Error: 277_872
            .saturating_add(Weight::from_parts(22_582_042, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_363_000 picoseconds.
        Weight::from_parts(116_908_789, 0)
            // Standard Error: 683_539
            .saturating_add(Weight::from_parts(309_102_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_567_000 picoseconds.
        Weight::from_parts(102_827_000, 0)
            // Standard Error: 2_652
            .saturating_add(Weight::from_parts(678_137, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 562_006_000 picoseconds.
        Weight::from_parts(601_212_636, 0)
            // Standard Error: 5_364_744
            .saturating_add(Weight::from_parts(69_470_063, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 561_397_000 picoseconds.
        Weight::from_parts(604_352_755, 0)
            // Standard Error: 4_485_279
            .saturating_add(Weight::from_parts(74_607_044, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_922_000 picoseconds.
        Weight::from_parts(96_771_448, 0)
            // Standard Error: 347_145
            .saturating_add(Weight::from_parts(12_270_451, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_661_000 picoseconds.
        Weight::from_parts(99_078_897, 0)
            // Standard Error: 988
            .saturating_add(Weight::from_parts(480_973, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_307_000 picoseconds.
        Weight::from_parts(95_527_177, 0)
            // Standard Error: 297_181
            .saturating_add(Weight::from_parts(12_604_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_225_000 picoseconds.
        Weight::from_parts(94_188_592, 0)
            // Standard Error: 1_159
            .saturating_add(Weight::from_parts(485_047, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_875_000 picoseconds.
        Weight::from_parts(73_918_549, 0)
            // Standard Error: 412_796
            .saturating_add(Weight::from_parts(220_755_918, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_953_000 picoseconds.
        Weight::from_parts(75_737_176, 0)
            // Standard Error: 343_863
            .saturating_add(Weight::from_parts(220_777_362, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_524_000 picoseconds.
        Weight::from_parts(606_607_187, 0)
            // Standard Error: 626_044
            .saturating_add(Weight::from_parts(238_560_779, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 580_496_000 picoseconds.
        Weight::from_parts(627_256_401, 0)
            // Standard Error: 2_795
            .saturating_add(Weight::from_parts(142_455, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_036_026_000 picoseconds.
        Weight::from_parts(5_306_547_392, 0)
            // Standard Error: 870_640
            .saturating_add(Weight::from_parts(246_564_024, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_249_236_000 picoseconds.
        Weight::from_parts(5_224_407_330, 0)
            // Standard Error: 15_621
            .saturating_add(Weight::from_parts(12_739_141, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_397_000 picoseconds.
        Weight::from_parts(99_919_732, 0)
            // Standard Error: 411_567
            .saturating_add(Weight::from_parts(232_035_973, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 225_854_000 picoseconds.
        Weight::from_parts(230_891_000, 0)
            // Standard Error: 50_643
            .saturating_add(Weight::from_parts(30_591_636, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_757_000 picoseconds.
        Weight::from_parts(113_148_580, 0)
            // Standard Error: 443_132
            .saturating_add(Weight::from_parts(284_447_218, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_555_000 picoseconds.
        Weight::from_parts(81_981_120, 0)
            // Standard Error: 321_718
            .saturating_add(Weight::from_parts(218_741_547, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_170_000 picoseconds.
        Weight::from_parts(89_024_979, 0)
            // Standard Error: 286_118
            .saturating_add(Weight::from_parts(25_789_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_217_000 picoseconds.
        Weight::from_parts(85_173_187, 0)
            // Standard Error: 267_426
            .saturating_add(Weight::from_parts(17_947_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_606_000 picoseconds.
        Weight::from_parts(85_147_393, 0)
            // Standard Error: 258_734
            .saturating_add(Weight::from_parts(17_554_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_574_000 picoseconds.
        Weight::from_parts(88_968_475, 0)
            // Standard Error: 269_927
            .saturating_add(Weight::from_parts(15_568_224, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_410_000 picoseconds.
        Weight::from_parts(88_892_912, 0)
            // Standard Error: 251_557
            .saturating_add(Weight::from_parts(15_511_787, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_324_000 picoseconds.
        Weight::from_parts(218_506_308, 0)
            // Standard Error: 640_752
            .saturating_add(Weight::from_parts(319_275_183, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_116_000 picoseconds.
        Weight::from_parts(156_239_310, 0)
            // Standard Error: 515_580
            .saturating_add(Weight::from_parts(505_503_962, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_300_629_000 picoseconds.
        Weight::from_parts(51_527_408_000, 0)
            // Standard Error: 319_104
            .saturating_add(Weight::from_parts(9_532_283, 0).saturating_mul(p.into()))
            // Standard Error: 319_088
            .saturating_add(Weight::from_parts(159_092_699, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_522_000 picoseconds.
        Weight::from_parts(167_157_306, 0)
            // Standard Error: 536_721
            .saturating_add(Weight::from_parts(507_328_415, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_220_456_000 picoseconds.
        Weight::from_parts(52_483_378_000, 0)
            // Standard Error: 322_335
            .saturating_add(Weight::from_parts(9_058_998, 0).saturating_mul(p.into()))
            // Standard Error: 322_319
            .saturating_add(Weight::from_parts(158_692_758, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 82_802_000 picoseconds.
        Weight::from_parts(127_978_272, 1131)
            // Standard Error: 7_477
            .saturating_add(Weight::from_parts(12_112_608, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 81_842_000 picoseconds.
        Weight::from_parts(84_555_000, 1131)
            // Standard Error: 46_008
            .saturating_add(Weight::from_parts(39_701_689, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_312_028_000 picoseconds.
        Weight::from_parts(6_216_212_610, 5069931)
            // Standard Error: 71_510
            .saturating_add(Weight::from_parts(39_633_629, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 84_033_000 picoseconds.
        Weight::from_parts(85_794_000, 1939)
            // Standard Error: 27_157
            .saturating_add(Weight::from_parts(47_678_898, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 92_871_000 picoseconds.
        Weight::from_parts(90_460_985, 1131)
            // Standard Error: 65_404
            .saturating_add(Weight::from_parts(40_004_408, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 599_400_000 picoseconds.
        Weight::from_parts(563_301_639, 1496)
            // Standard Error: 366_348
            .saturating_add(Weight::from_parts(54_814_539, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_031_738_000 picoseconds.
        Weight::from_parts(1_080_973_264, 317931)
            // Standard Error: 377_279
            .saturating_add(Weight::from_parts(49_034_638, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_323_498_000 picoseconds.
        Weight::from_parts(4_345_692_669, 0)
            // Standard Error: 11_308
            .saturating_add(Weight::from_parts(3_318_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_322_418_000 picoseconds.
        Weight::from_parts(4_342_233_194, 0)
            // Standard Error: 11_212
            .saturating_add(Weight::from_parts(3_365_867, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_640_308_000 picoseconds.
        Weight::from_parts(10_652_579_573, 0)
            // Standard Error: 203_912
            .saturating_add(Weight::from_parts(13_545_018, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_052_681_000 picoseconds.
        Weight::from_parts(9_835_842_754, 0)
            // Standard Error: 250_959
            .saturating_add(Weight::from_parts(13_538_317, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_289_000 picoseconds.
        Weight::from_parts(2_353_000, 0)
            // Standard Error: 8_668
            .saturating_add(Weight::from_parts(3_795_197, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_244_000 picoseconds.
        Weight::from_parts(54_586, 0)
            // Standard Error: 7_240
            .saturating_add(Weight::from_parts(3_105_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(3_036_888, 0)
            // Standard Error: 1_888
            .saturating_add(Weight::from_parts(1_597_562, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_263_000 picoseconds.
        Weight::from_parts(2_357_000, 0)
            // Standard Error: 8_582
            .saturating_add(Weight::from_parts(2_932_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_359_000, 0)
            // Standard Error: 9_919
            .saturating_add(Weight::from_parts(5_266_624, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_089_000 picoseconds.
        Weight::from_parts(7_195_959, 0)
            // Standard Error: 1_959
            .saturating_add(Weight::from_parts(145_948, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_325_000 picoseconds.
        Weight::from_parts(4_493_456, 0)
            // Standard Error: 7_028
            .saturating_add(Weight::from_parts(2_591_640, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_591_640 -
            2_424_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_266_000 picoseconds.
        Weight::from_parts(4_759_647, 0)
            // Standard Error: 12_816
            .saturating_add(Weight::from_parts(2_424_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_733_000 picoseconds.
        Weight::from_parts(16_422_614, 0)
            // Standard Error: 26_478
            .saturating_add(Weight::from_parts(10_183_222, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_752_000 picoseconds.
        Weight::from_parts(4_096_965, 0)
            // Standard Error: 7_367
            .saturating_add(Weight::from_parts(1_260_821, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_361_000 picoseconds.
        Weight::from_parts(5_750_520, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(1_895_667, 0)
            // Standard Error: 3_185
            .saturating_add(Weight::from_parts(269_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_311_000 picoseconds.
        Weight::from_parts(2_408_000, 0)
            // Standard Error: 5_023
            .saturating_add(Weight::from_parts(736_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_305_000 picoseconds.
        Weight::from_parts(2_350_000, 0)
            // Standard Error: 5_876
            .saturating_add(Weight::from_parts(789_964, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_117_000 picoseconds.
        Weight::from_parts(3_287_635, 0)
            // Standard Error: 5_795
            .saturating_add(Weight::from_parts(762_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_178_000 picoseconds.
        Weight::from_parts(6_291_000, 0)
            // Standard Error: 8_065
            .saturating_add(Weight::from_parts(1_305_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_264_000 picoseconds.
        Weight::from_parts(2_362_289, 0)
            // Standard Error: 10_286
            .saturating_add(Weight::from_parts(7_059_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_251_000 picoseconds.
        Weight::from_parts(2_355_000, 0)
            // Standard Error: 5_440
            .saturating_add(Weight::from_parts(3_331_461, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_318_000 picoseconds.
        Weight::from_parts(2_362_000, 0)
            // Standard Error: 4_939
            .saturating_add(Weight::from_parts(3_107_217, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_348_000, 0)
            // Standard Error: 5_313
            .saturating_add(Weight::from_parts(3_107_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_362_000, 0)
            // Standard Error: 4_682
            .saturating_add(Weight::from_parts(2_600_188, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_262_000 picoseconds.
        Weight::from_parts(2_333_000, 0)
            // Standard Error: 3_903
            .saturating_add(Weight::from_parts(559_855, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(1_288_199, 0)
            // Standard Error: 4_644
            .saturating_add(Weight::from_parts(448_121, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(2_404_000, 0)
            // Standard Error: 10_045
            .saturating_add(Weight::from_parts(1_823_572, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_291_000 picoseconds.
        Weight::from_parts(2_370_000, 0)
            // Standard Error: 7_251
            .saturating_add(Weight::from_parts(1_187_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_275_000 picoseconds.
        Weight::from_parts(1_108_310, 0)
            // Standard Error: 4_694
            .saturating_add(Weight::from_parts(426_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(1_738_492, 0)
            // Standard Error: 3_326
            .saturating_add(Weight::from_parts(383_698, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_334_000, 0)
            // Standard Error: 3_868
            .saturating_add(Weight::from_parts(529_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_326_000 picoseconds.
        Weight::from_parts(2_396_000, 0)
            // Standard Error: 4_728
            .saturating_add(Weight::from_parts(525_181, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(416_491, 0)
            // Standard Error: 7_377
            .saturating_add(Weight::from_parts(530_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_251_000 picoseconds.
        Weight::from_parts(1_792_921, 0)
            // Standard Error: 4_167
            .saturating_add(Weight::from_parts(356_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_330_000 picoseconds.
        Weight::from_parts(2_960_416, 0)
            // Standard Error: 2_070
            .saturating_add(Weight::from_parts(166_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_000 picoseconds.
        Weight::from_parts(2_860_928, 0)
            // Standard Error: 2_068
            .saturating_add(Weight::from_parts(169_353, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_320_000, 0)
            // Standard Error: 8_736
            .saturating_add(Weight::from_parts(1_756_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(2_345_000, 0)
            // Standard Error: 6_414
            .saturating_add(Weight::from_parts(1_112_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 8_680
            .saturating_add(Weight::from_parts(1_779_797, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_264_000 picoseconds.
        Weight::from_parts(2_348_000, 0)
            // Standard Error: 6_926
            .saturating_add(Weight::from_parts(1_102_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_206_000 picoseconds.
        Weight::from_parts(2_348_000, 0)
            // Standard Error: 11_019
            .saturating_add(Weight::from_parts(1_864_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_303_000 picoseconds.
        Weight::from_parts(2_368_000, 0)
            // Standard Error: 6_631
            .saturating_add(Weight::from_parts(1_139_610, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_251_000 picoseconds.
        Weight::from_parts(2_340_000, 0)
            // Standard Error: 9_063
            .saturating_add(Weight::from_parts(1_779_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_325_000, 0)
            // Standard Error: 7_903
            .saturating_add(Weight::from_parts(1_099_920, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(2_387_000, 0)
            // Standard Error: 9_426
            .saturating_add(Weight::from_parts(1_767_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_297_000 picoseconds.
        Weight::from_parts(2_432_000, 0)
            // Standard Error: 8_352
            .saturating_add(Weight::from_parts(1_151_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_000 picoseconds.
        Weight::from_parts(2_342_000, 0)
            // Standard Error: 8_089
            .saturating_add(Weight::from_parts(1_799_876, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_241_000 picoseconds.
        Weight::from_parts(2_332_000, 0)
            // Standard Error: 6_834
            .saturating_add(Weight::from_parts(1_114_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(2_340_000, 0)
            // Standard Error: 10_916
            .saturating_add(Weight::from_parts(1_789_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(2_417_000, 0)
            // Standard Error: 8_609
            .saturating_add(Weight::from_parts(1_149_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_254_000 picoseconds.
        Weight::from_parts(2_298_000, 0)
            // Standard Error: 8_691
            .saturating_add(Weight::from_parts(1_704_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(2_385_000, 0)
            // Standard Error: 7_015
            .saturating_add(Weight::from_parts(1_105_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_210_000 picoseconds.
        Weight::from_parts(2_302_000, 0)
            // Standard Error: 8_878
            .saturating_add(Weight::from_parts(1_688_987, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(2_387_000, 0)
            // Standard Error: 7_411
            .saturating_add(Weight::from_parts(1_089_702, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_276_000 picoseconds.
        Weight::from_parts(2_379_000, 0)
            // Standard Error: 9_247
            .saturating_add(Weight::from_parts(1_750_830, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_356_000 picoseconds.
        Weight::from_parts(2_424_000, 0)
            // Standard Error: 7_922
            .saturating_add(Weight::from_parts(1_135_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_246_000 picoseconds.
        Weight::from_parts(2_277_000, 0)
            // Standard Error: 8_463
            .saturating_add(Weight::from_parts(1_288_638, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_313_000 picoseconds.
        Weight::from_parts(2_371_000, 0)
            // Standard Error: 3_965
            .saturating_add(Weight::from_parts(616_411, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_194_000 picoseconds.
        Weight::from_parts(2_240_000, 0)
            // Standard Error: 6_718
            .saturating_add(Weight::from_parts(1_193_482, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_205_000 picoseconds.
        Weight::from_parts(125_285, 0)
            // Standard Error: 7_032
            .saturating_add(Weight::from_parts(660_115, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_357_000, 0)
            // Standard Error: 9_316
            .saturating_add(Weight::from_parts(1_728_746, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_339_000, 0)
            // Standard Error: 7_302
            .saturating_add(Weight::from_parts(1_186_105, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_264_000 picoseconds.
        Weight::from_parts(1_113_101, 0)
            // Standard Error: 17_534
            .saturating_add(Weight::from_parts(2_684_380, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_270_000 picoseconds.
        Weight::from_parts(1_940_489, 0)
            // Standard Error: 9_117
            .saturating_add(Weight::from_parts(2_411_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(2_340_000, 0)
            // Standard Error: 5_201
            .saturating_add(Weight::from_parts(3_020_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(5_469_667, 0)
            // Standard Error: 24_636
            .saturating_add(Weight::from_parts(2_213_918, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(6_853_381, 0)
            // Standard Error: 51_042
            .saturating_add(Weight::from_parts(9_393_234, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_339_000 picoseconds.
        Weight::from_parts(9_327_604, 0)
            // Standard Error: 53_697
            .saturating_add(Weight::from_parts(7_210_782, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_249_000 picoseconds.
        Weight::from_parts(4_442_437, 0)
            // Standard Error: 18_586
            .saturating_add(Weight::from_parts(2_913_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_302_000 picoseconds.
        Weight::from_parts(1_685_238, 0)
            // Standard Error: 9_409
            .saturating_add(Weight::from_parts(2_535_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_319_000 picoseconds.
        Weight::from_parts(2_413_000, 0)
            // Standard Error: 9_274
            .saturating_add(Weight::from_parts(1_355_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_291_000 picoseconds.
        Weight::from_parts(2_415_000, 0)
            // Standard Error: 5_548
            .saturating_add(Weight::from_parts(640_692, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_244_000 picoseconds.
        Weight::from_parts(2_366_000, 0)
            // Standard Error: 9_800
            .saturating_add(Weight::from_parts(1_314_911, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_209_000 picoseconds.
        Weight::from_parts(2_362_000, 0)
            // Standard Error: 4_329
            .saturating_add(Weight::from_parts(652_195, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_325_000 picoseconds.
        Weight::from_parts(2_409_000, 0)
            // Standard Error: 8_465
            .saturating_add(Weight::from_parts(1_260_421, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(2_375_000, 0)
            // Standard Error: 6_699
            .saturating_add(Weight::from_parts(665_371, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_363_000, 0)
            // Standard Error: 8_383
            .saturating_add(Weight::from_parts(1_176_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_248_000 picoseconds.
        Weight::from_parts(2_313_000, 0)
            // Standard Error: 5_311
            .saturating_add(Weight::from_parts(600_403, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_198_000 picoseconds.
        Weight::from_parts(2_331_000, 0)
            // Standard Error: 7_356
            .saturating_add(Weight::from_parts(1_092_157, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_261_000 picoseconds.
        Weight::from_parts(72_799, 0)
            // Standard Error: 6_815
            .saturating_add(Weight::from_parts(645_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_328_000 picoseconds.
        Weight::from_parts(2_409_000, 0)
            // Standard Error: 7_706
            .saturating_add(Weight::from_parts(1_105_456, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(2_345_000, 0)
            // Standard Error: 4_891
            .saturating_add(Weight::from_parts(609_876, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(2_303_000, 0)
            // Standard Error: 7_056
            .saturating_add(Weight::from_parts(1_106_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_000 picoseconds.
        Weight::from_parts(2_363_000, 0)
            // Standard Error: 4_187
            .saturating_add(Weight::from_parts(602_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_342_000 picoseconds.
        Weight::from_parts(2_380_000, 0)
            // Standard Error: 7_256
            .saturating_add(Weight::from_parts(1_116_321, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_000 picoseconds.
        Weight::from_parts(2_312_000, 0)
            // Standard Error: 3_660
            .saturating_add(Weight::from_parts(551_181, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 945_000 picoseconds.
        Weight::from_parts(1_005_000, 0)
            // Standard Error: 737
            .saturating_add(Weight::from_parts(208_694, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_834_000 picoseconds.
        Weight::from_parts(2_898_000, 3506)
            // Standard Error: 836
            .saturating_add(Weight::from_parts(727_098, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 53_004_000 picoseconds.
        Weight::from_parts(56_620_530, 0)
            // Standard Error: 13_548
            .saturating_add(Weight::from_parts(2_670_768, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `782`
        //  Estimated: `23471`
        // Minimum execution time: 59_242_000 picoseconds.
        Weight::from_parts(61_430_000, 23471)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `679`
        //  Estimated: `15019`
        // Minimum execution time: 60_915 nanoseconds.
        Weight::from_parts(71_195_000, 15019)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 72_256_000 picoseconds.
        Weight::from_parts(46_988_794, 4990)
            // Standard Error: 51_525
            .saturating_add(Weight::from_parts(54_624_407, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `719`
        //  Estimated: `39166`
        // Minimum execution time: 64_471_000 picoseconds.
        Weight::from_parts(86_483_641, 39166)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_399, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `202`
        //  Estimated: `33883`
        // Minimum execution time: 10_233_155_000 picoseconds.
        Weight::from_parts(134_253_661, 33883)
            // Standard Error: 168_550
            .saturating_add(Weight::from_parts(55_930_464, 0).saturating_mul(c.into()))
            // Standard Error: 10
            .saturating_add(Weight::from_parts(2_388, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 54_747_000 picoseconds.
        Weight::from_parts(22_367_510, 23853)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_237, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `945`
        //  Estimated: `41930`
        // Minimum execution time: 81_993_000 picoseconds.
        Weight::from_parts(27_241_736, 41930)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(1_306, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `727`
        //  Estimated: `73959`
        // Minimum execution time: 305_857_000 picoseconds.
        Weight::from_parts(319_224_438, 73959)
            // Standard Error: 1_410
            .saturating_add(Weight::from_parts(1_309, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `727`
        //  Estimated: `73833`
        // Minimum execution time: 320_793_000 picoseconds.
        Weight::from_parts(334_855_853, 73833)
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 55_831_000 picoseconds.
        Weight::from_parts(56_191_000, 3899)
            // Standard Error: 34_380
            .saturating_add(Weight::from_parts(52_973_937, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_393_000 picoseconds.
        Weight::from_parts(106_847_113, 0)
            // Standard Error: 353_319
            .saturating_add(Weight::from_parts(153_643_805, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 234_831_000 picoseconds.
        Weight::from_parts(275_068_127, 0)
            // Standard Error: 413_548
            .saturating_add(Weight::from_parts(156_270_751, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_275_000 picoseconds.
        Weight::from_parts(89_529_131, 0)
            // Standard Error: 5_084
            .saturating_add(Weight::from_parts(4_058_667, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 137_746_000 picoseconds.
        Weight::from_parts(138_333_879, 0)
            // Standard Error: 27_303
            .saturating_add(Weight::from_parts(4_552_665, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_406_000 picoseconds.
        Weight::from_parts(106_234_466, 0)
            // Standard Error: 404_061
            .saturating_add(Weight::from_parts(222_760_538, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_965_000 picoseconds.
        Weight::from_parts(77_984_173, 0)
            // Standard Error: 379_922
            .saturating_add(Weight::from_parts(220_287_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_475_000 picoseconds.
        Weight::from_parts(80_001_134, 0)
            // Standard Error: 355_046
            .saturating_add(Weight::from_parts(219_371_481, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 120_198 nanoseconds.
        Weight::from_parts(130_172_800, 0)
            // Standard Error: 2_420_191
            .saturating_add(Weight::from_parts(9_196_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_489_000 picoseconds.
        Weight::from_parts(76_357_422, 0)
            // Standard Error: 367_413
            .saturating_add(Weight::from_parts(220_849_666, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_702_000 picoseconds.
        Weight::from_parts(91_221_728, 0)
            // Standard Error: 421_543
            .saturating_add(Weight::from_parts(222_424_790, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_972_000 picoseconds.
        Weight::from_parts(80_354_802, 0)
            // Standard Error: 371_977
            .saturating_add(Weight::from_parts(222_688_751, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_833_000 picoseconds.
        Weight::from_parts(84_394_656, 0)
            // Standard Error: 348_008
            .saturating_add(Weight::from_parts(221_377_374, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_457_000 picoseconds.
        Weight::from_parts(79_746_261, 0)
            // Standard Error: 390_099
            .saturating_add(Weight::from_parts(221_110_992, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_887_000 picoseconds.
        Weight::from_parts(87_526_953, 0)
            // Standard Error: 353_025
            .saturating_add(Weight::from_parts(217_000_105, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 563_875_000 picoseconds.
        Weight::from_parts(641_088_750, 0)
            // Standard Error: 572_966
            .saturating_add(Weight::from_parts(302_754_150, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 831_015_000 picoseconds.
        Weight::from_parts(862_926_000, 0)
            // Standard Error: 52_118
            .saturating_add(Weight::from_parts(13_340_281, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_019_000 picoseconds.
        Weight::from_parts(78_450_513, 0)
            // Standard Error: 326_764
            .saturating_add(Weight::from_parts(219_173_988, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_983_000 picoseconds.
        Weight::from_parts(72_605_733, 0)
            // Standard Error: 323_470
            .saturating_add(Weight::from_parts(222_408_138, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_754_000 picoseconds.
        Weight::from_parts(85_752_580, 0)
            // Standard Error: 531_291
            .saturating_add(Weight::from_parts(296_535_999, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_287_000 picoseconds.
        Weight::from_parts(159_571_412, 0)
            // Standard Error: 609_809
            .saturating_add(Weight::from_parts(419_885_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 499_125_000 picoseconds.
        Weight::from_parts(502_807_000, 0)
            // Standard Error: 59_392
            .saturating_add(Weight::from_parts(24_809_865, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_273_000 picoseconds.
        Weight::from_parts(145_565_179, 0)
            // Standard Error: 606_765
            .saturating_add(Weight::from_parts(425_379_527, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 493_208_000 picoseconds.
        Weight::from_parts(499_473_000, 0)
            // Standard Error: 61_943
            .saturating_add(Weight::from_parts(25_105_371, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_761_000 picoseconds.
        Weight::from_parts(655_296_256, 0)
            // Standard Error: 562_645
            .saturating_add(Weight::from_parts(442_400_445, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 562_618_000 picoseconds.
        Weight::from_parts(680_781_224, 0)
            // Standard Error: 769_646
            .saturating_add(Weight::from_parts(453_560_640, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_864_000 picoseconds.
        Weight::from_parts(72_238_992, 0)
            // Standard Error: 377_496
            .saturating_add(Weight::from_parts(227_792_180, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_442_174_000 picoseconds.
        Weight::from_parts(4_652_175_576, 0)
            // Standard Error: 708_061
            .saturating_add(Weight::from_parts(322_892_456, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 551_474_000 picoseconds.
        Weight::from_parts(559_791_000, 0)
            // Standard Error: 61_072
            .saturating_add(Weight::from_parts(34_628_105, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_459_071_000 picoseconds.
        Weight::from_parts(4_606_912_139, 0)
            // Standard Error: 1_088_199
            .saturating_add(Weight::from_parts(380_610_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_440_126_000 picoseconds.
        Weight::from_parts(4_633_287_817, 0)
            // Standard Error: 660_344
            .saturating_add(Weight::from_parts(387_725_749, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 247_363_000 picoseconds.
        Weight::from_parts(311_195_601, 0)
            // Standard Error: 527_554
            .saturating_add(Weight::from_parts(439_547_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 667_214_000 picoseconds.
        Weight::from_parts(678_815_000, 0)
            // Standard Error: 57_256
            .saturating_add(Weight::from_parts(24_920_225, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_650_853_000 picoseconds.
        Weight::from_parts(4_775_733_462, 0)
            // Standard Error: 828_017
            .saturating_add(Weight::from_parts(396_148_023, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_348_000 picoseconds.
        Weight::from_parts(90_138_753, 0)
            // Standard Error: 267_292
            .saturating_add(Weight::from_parts(19_761_946, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_899_000 picoseconds.
        Weight::from_parts(91_028_836, 0)
            // Standard Error: 1_097
            .saturating_add(Weight::from_parts(487_131, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_014_000 picoseconds.
        Weight::from_parts(88_326_622, 0)
            // Standard Error: 248_923
            .saturating_add(Weight::from_parts(23_421_477, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_237_000 picoseconds.
        Weight::from_parts(94_692_189, 0)
            // Standard Error: 1_035
            .saturating_add(Weight::from_parts(483_082, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_416_000 picoseconds.
        Weight::from_parts(87_317_289, 0)
            // Standard Error: 266_231
            .saturating_add(Weight::from_parts(21_523_510, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_909_000 picoseconds.
        Weight::from_parts(88_839_457, 0)
            // Standard Error: 277_872
            .saturating_add(Weight::from_parts(22_582_042, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_363_000 picoseconds.
        Weight::from_parts(116_908_789, 0)
            // Standard Error: 683_539
            .saturating_add(Weight::from_parts(309_102_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 101_567_000 picoseconds.
        Weight::from_parts(102_827_000, 0)
            // Standard Error: 2_652
            .saturating_add(Weight::from_parts(678_137, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 562_006_000 picoseconds.
        Weight::from_parts(601_212_636, 0)
            // Standard Error: 5_364_744
            .saturating_add(Weight::from_parts(69_470_063, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 561_397_000 picoseconds.
        Weight::from_parts(604_352_755, 0)
            // Standard Error: 4_485_279
            .saturating_add(Weight::from_parts(74_607_044, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_922_000 picoseconds.
        Weight::from_parts(96_771_448, 0)
            // Standard Error: 347_145
            .saturating_add(Weight::from_parts(12_270_451, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_661_000 picoseconds.
        Weight::from_parts(99_078_897, 0)
            // Standard Error: 988
            .saturating_add(Weight::from_parts(480_973, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_307_000 picoseconds.
        Weight::from_parts(95_527_177, 0)
            // Standard Error: 297_181
            .saturating_add(Weight::from_parts(12_604_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_225_000 picoseconds.
        Weight::from_parts(94_188_592, 0)
            // Standard Error: 1_159
            .saturating_add(Weight::from_parts(485_047, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_875_000 picoseconds.
        Weight::from_parts(73_918_549, 0)
            // Standard Error: 412_796
            .saturating_add(Weight::from_parts(220_755_918, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_953_000 picoseconds.
        Weight::from_parts(75_737_176, 0)
            // Standard Error: 343_863
            .saturating_add(Weight::from_parts(220_777_362, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 570_524_000 picoseconds.
        Weight::from_parts(606_607_187, 0)
            // Standard Error: 626_044
            .saturating_add(Weight::from_parts(238_560_779, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 580_496_000 picoseconds.
        Weight::from_parts(627_256_401, 0)
            // Standard Error: 2_795
            .saturating_add(Weight::from_parts(142_455, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_036_026_000 picoseconds.
        Weight::from_parts(5_306_547_392, 0)
            // Standard Error: 870_640
            .saturating_add(Weight::from_parts(246_564_024, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_249_236_000 picoseconds.
        Weight::from_parts(5_224_407_330, 0)
            // Standard Error: 15_621
            .saturating_add(Weight::from_parts(12_739_141, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_397_000 picoseconds.
        Weight::from_parts(99_919_732, 0)
            // Standard Error: 411_567
            .saturating_add(Weight::from_parts(232_035_973, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 225_854_000 picoseconds.
        Weight::from_parts(230_891_000, 0)
            // Standard Error: 50_643
            .saturating_add(Weight::from_parts(30_591_636, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_757_000 picoseconds.
        Weight::from_parts(113_148_580, 0)
            // Standard Error: 443_132
            .saturating_add(Weight::from_parts(284_447_218, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_555_000 picoseconds.
        Weight::from_parts(81_981_120, 0)
            // Standard Error: 321_718
            .saturating_add(Weight::from_parts(218_741_547, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_170_000 picoseconds.
        Weight::from_parts(89_024_979, 0)
            // Standard Error: 286_118
            .saturating_add(Weight::from_parts(25_789_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_217_000 picoseconds.
        Weight::from_parts(85_173_187, 0)
            // Standard Error: 267_426
            .saturating_add(Weight::from_parts(17_947_412, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_606_000 picoseconds.
        Weight::from_parts(85_147_393, 0)
            // Standard Error: 258_734
            .saturating_add(Weight::from_parts(17_554_006, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_574_000 picoseconds.
        Weight::from_parts(88_968_475, 0)
            // Standard Error: 269_927
            .saturating_add(Weight::from_parts(15_568_224, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_410_000 picoseconds.
        Weight::from_parts(88_892_912, 0)
            // Standard Error: 251_557
            .saturating_add(Weight::from_parts(15_511_787, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_324_000 picoseconds.
        Weight::from_parts(218_506_308, 0)
            // Standard Error: 640_752
            .saturating_add(Weight::from_parts(319_275_183, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_116_000 picoseconds.
        Weight::from_parts(156_239_310, 0)
            // Standard Error: 515_580
            .saturating_add(Weight::from_parts(505_503_962, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_300_629_000 picoseconds.
        Weight::from_parts(51_527_408_000, 0)
            // Standard Error: 319_104
            .saturating_add(Weight::from_parts(9_532_283, 0).saturating_mul(p.into()))
            // Standard Error: 319_088
            .saturating_add(Weight::from_parts(159_092_699, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_522_000 picoseconds.
        Weight::from_parts(167_157_306, 0)
            // Standard Error: 536_721
            .saturating_add(Weight::from_parts(507_328_415, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_220_456_000 picoseconds.
        Weight::from_parts(52_483_378_000, 0)
            // Standard Error: 322_335
            .saturating_add(Weight::from_parts(9_058_998, 0).saturating_mul(p.into()))
            // Standard Error: 322_319
            .saturating_add(Weight::from_parts(158_692_758, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 82_802_000 picoseconds.
        Weight::from_parts(127_978_272, 1131)
            // Standard Error: 7_477
            .saturating_add(Weight::from_parts(12_112_608, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 81_842_000 picoseconds.
        Weight::from_parts(84_555_000, 1131)
            // Standard Error: 46_008
            .saturating_add(Weight::from_parts(39_701_689, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_312_028_000 picoseconds.
        Weight::from_parts(6_216_212_610, 5069931)
            // Standard Error: 71_510
            .saturating_add(Weight::from_parts(39_633_629, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 84_033_000 picoseconds.
        Weight::from_parts(85_794_000, 1939)
            // Standard Error: 27_157
            .saturating_add(Weight::from_parts(47_678_898, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 92_871_000 picoseconds.
        Weight::from_parts(90_460_985, 1131)
            // Standard Error: 65_404
            .saturating_add(Weight::from_parts(40_004_408, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 599_400_000 picoseconds.
        Weight::from_parts(563_301_639, 1496)
            // Standard Error: 366_348
            .saturating_add(Weight::from_parts(54_814_539, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_031_738_000 picoseconds.
        Weight::from_parts(1_080_973_264, 317931)
            // Standard Error: 377_279
            .saturating_add(Weight::from_parts(49_034_638, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_323_498_000 picoseconds.
        Weight::from_parts(4_345_692_669, 0)
            // Standard Error: 11_308
            .saturating_add(Weight::from_parts(3_318_809, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_322_418_000 picoseconds.
        Weight::from_parts(4_342_233_194, 0)
            // Standard Error: 11_212
            .saturating_add(Weight::from_parts(3_365_867, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_640_308_000 picoseconds.
        Weight::from_parts(10_652_579_573, 0)
            // Standard Error: 203_912
            .saturating_add(Weight::from_parts(13_545_018, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_052_681_000 picoseconds.
        Weight::from_parts(9_835_842_754, 0)
            // Standard Error: 250_959
            .saturating_add(Weight::from_parts(13_538_317, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_289_000 picoseconds.
        Weight::from_parts(2_353_000, 0)
            // Standard Error: 8_668
            .saturating_add(Weight::from_parts(3_795_197, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_244_000 picoseconds.
        Weight::from_parts(54_586, 0)
            // Standard Error: 7_240
            .saturating_add(Weight::from_parts(3_105_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(3_036_888, 0)
            // Standard Error: 1_888
            .saturating_add(Weight::from_parts(1_597_562, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_263_000 picoseconds.
        Weight::from_parts(2_357_000, 0)
            // Standard Error: 8_582
            .saturating_add(Weight::from_parts(2_932_494, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_359_000, 0)
            // Standard Error: 9_919
            .saturating_add(Weight::from_parts(5_266_624, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_089_000 picoseconds.
        Weight::from_parts(7_195_959, 0)
            // Standard Error: 1_959
            .saturating_add(Weight::from_parts(145_948, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_325_000 picoseconds.
        Weight::from_parts(4_493_456, 0)
            // Standard Error: 7_028
            .saturating_add(Weight::from_parts(2_591_640, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_591_640 -
            2_424_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_266_000 picoseconds.
        Weight::from_parts(4_759_647, 0)
            // Standard Error: 12_816
            .saturating_add(Weight::from_parts(2_424_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_733_000 picoseconds.
        Weight::from_parts(16_422_614, 0)
            // Standard Error: 26_478
            .saturating_add(Weight::from_parts(10_183_222, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_752_000 picoseconds.
        Weight::from_parts(4_096_965, 0)
            // Standard Error: 7_367
            .saturating_add(Weight::from_parts(1_260_821, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(_l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_361_000 picoseconds.
        Weight::from_parts(5_750_520, 0)
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_353_000 picoseconds.
        Weight::from_parts(1_895_667, 0)
            // Standard Error: 3_185
            .saturating_add(Weight::from_parts(269_326, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_311_000 picoseconds.
        Weight::from_parts(2_408_000, 0)
            // Standard Error: 5_023
            .saturating_add(Weight::from_parts(736_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_305_000 picoseconds.
        Weight::from_parts(2_350_000, 0)
            // Standard Error: 5_876
            .saturating_add(Weight::from_parts(789_964, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_117_000 picoseconds.
        Weight::from_parts(3_287_635, 0)
            // Standard Error: 5_795
            .saturating_add(Weight::from_parts(762_359, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_178_000 picoseconds.
        Weight::from_parts(6_291_000, 0)
            // Standard Error: 8_065
            .saturating_add(Weight::from_parts(1_305_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_264_000 picoseconds.
        Weight::from_parts(2_362_289, 0)
            // Standard Error: 10_286
            .saturating_add(Weight::from_parts(7_059_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_251_000 picoseconds.
        Weight::from_parts(2_355_000, 0)
            // Standard Error: 5_440
            .saturating_add(Weight::from_parts(3_331_461, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_318_000 picoseconds.
        Weight::from_parts(2_362_000, 0)
            // Standard Error: 4_939
            .saturating_add(Weight::from_parts(3_107_217, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_348_000, 0)
            // Standard Error: 5_313
            .saturating_add(Weight::from_parts(3_107_418, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(2_362_000, 0)
            // Standard Error: 4_682
            .saturating_add(Weight::from_parts(2_600_188, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_262_000 picoseconds.
        Weight::from_parts(2_333_000, 0)
            // Standard Error: 3_903
            .saturating_add(Weight::from_parts(559_855, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_268_000 picoseconds.
        Weight::from_parts(1_288_199, 0)
            // Standard Error: 4_644
            .saturating_add(Weight::from_parts(448_121, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(2_404_000, 0)
            // Standard Error: 10_045
            .saturating_add(Weight::from_parts(1_823_572, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_291_000 picoseconds.
        Weight::from_parts(2_370_000, 0)
            // Standard Error: 7_251
            .saturating_add(Weight::from_parts(1_187_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_275_000 picoseconds.
        Weight::from_parts(1_108_310, 0)
            // Standard Error: 4_694
            .saturating_add(Weight::from_parts(426_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(1_738_492, 0)
            // Standard Error: 3_326
            .saturating_add(Weight::from_parts(383_698, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_334_000, 0)
            // Standard Error: 3_868
            .saturating_add(Weight::from_parts(529_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_326_000 picoseconds.
        Weight::from_parts(2_396_000, 0)
            // Standard Error: 4_728
            .saturating_add(Weight::from_parts(525_181, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(416_491, 0)
            // Standard Error: 7_377
            .saturating_add(Weight::from_parts(530_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_251_000 picoseconds.
        Weight::from_parts(1_792_921, 0)
            // Standard Error: 4_167
            .saturating_add(Weight::from_parts(356_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_330_000 picoseconds.
        Weight::from_parts(2_960_416, 0)
            // Standard Error: 2_070
            .saturating_add(Weight::from_parts(166_410, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_000 picoseconds.
        Weight::from_parts(2_860_928, 0)
            // Standard Error: 2_068
            .saturating_add(Weight::from_parts(169_353, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_320_000, 0)
            // Standard Error: 8_736
            .saturating_add(Weight::from_parts(1_756_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(2_345_000, 0)
            // Standard Error: 6_414
            .saturating_add(Weight::from_parts(1_112_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 8_680
            .saturating_add(Weight::from_parts(1_779_797, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_264_000 picoseconds.
        Weight::from_parts(2_348_000, 0)
            // Standard Error: 6_926
            .saturating_add(Weight::from_parts(1_102_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_206_000 picoseconds.
        Weight::from_parts(2_348_000, 0)
            // Standard Error: 11_019
            .saturating_add(Weight::from_parts(1_864_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_303_000 picoseconds.
        Weight::from_parts(2_368_000, 0)
            // Standard Error: 6_631
            .saturating_add(Weight::from_parts(1_139_610, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_251_000 picoseconds.
        Weight::from_parts(2_340_000, 0)
            // Standard Error: 9_063
            .saturating_add(Weight::from_parts(1_779_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_325_000, 0)
            // Standard Error: 7_903
            .saturating_add(Weight::from_parts(1_099_920, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_284_000 picoseconds.
        Weight::from_parts(2_387_000, 0)
            // Standard Error: 9_426
            .saturating_add(Weight::from_parts(1_767_373, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_297_000 picoseconds.
        Weight::from_parts(2_432_000, 0)
            // Standard Error: 8_352
            .saturating_add(Weight::from_parts(1_151_434, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_237_000 picoseconds.
        Weight::from_parts(2_342_000, 0)
            // Standard Error: 8_089
            .saturating_add(Weight::from_parts(1_799_876, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_241_000 picoseconds.
        Weight::from_parts(2_332_000, 0)
            // Standard Error: 6_834
            .saturating_add(Weight::from_parts(1_114_226, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(2_340_000, 0)
            // Standard Error: 10_916
            .saturating_add(Weight::from_parts(1_789_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(2_417_000, 0)
            // Standard Error: 8_609
            .saturating_add(Weight::from_parts(1_149_574, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_254_000 picoseconds.
        Weight::from_parts(2_298_000, 0)
            // Standard Error: 8_691
            .saturating_add(Weight::from_parts(1_704_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_292_000 picoseconds.
        Weight::from_parts(2_385_000, 0)
            // Standard Error: 7_015
            .saturating_add(Weight::from_parts(1_105_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_210_000 picoseconds.
        Weight::from_parts(2_302_000, 0)
            // Standard Error: 8_878
            .saturating_add(Weight::from_parts(1_688_987, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(2_387_000, 0)
            // Standard Error: 7_411
            .saturating_add(Weight::from_parts(1_089_702, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_276_000 picoseconds.
        Weight::from_parts(2_379_000, 0)
            // Standard Error: 9_247
            .saturating_add(Weight::from_parts(1_750_830, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_356_000 picoseconds.
        Weight::from_parts(2_424_000, 0)
            // Standard Error: 7_922
            .saturating_add(Weight::from_parts(1_135_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_246_000 picoseconds.
        Weight::from_parts(2_277_000, 0)
            // Standard Error: 8_463
            .saturating_add(Weight::from_parts(1_288_638, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_313_000 picoseconds.
        Weight::from_parts(2_371_000, 0)
            // Standard Error: 3_965
            .saturating_add(Weight::from_parts(616_411, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_194_000 picoseconds.
        Weight::from_parts(2_240_000, 0)
            // Standard Error: 6_718
            .saturating_add(Weight::from_parts(1_193_482, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_205_000 picoseconds.
        Weight::from_parts(125_285, 0)
            // Standard Error: 7_032
            .saturating_add(Weight::from_parts(660_115, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_256_000 picoseconds.
        Weight::from_parts(2_357_000, 0)
            // Standard Error: 9_316
            .saturating_add(Weight::from_parts(1_728_746, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_339_000, 0)
            // Standard Error: 7_302
            .saturating_add(Weight::from_parts(1_186_105, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_264_000 picoseconds.
        Weight::from_parts(1_113_101, 0)
            // Standard Error: 17_534
            .saturating_add(Weight::from_parts(2_684_380, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_270_000 picoseconds.
        Weight::from_parts(1_940_489, 0)
            // Standard Error: 9_117
            .saturating_add(Weight::from_parts(2_411_524, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_269_000 picoseconds.
        Weight::from_parts(2_340_000, 0)
            // Standard Error: 5_201
            .saturating_add(Weight::from_parts(3_020_273, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(5_469_667, 0)
            // Standard Error: 24_636
            .saturating_add(Weight::from_parts(2_213_918, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_235_000 picoseconds.
        Weight::from_parts(6_853_381, 0)
            // Standard Error: 51_042
            .saturating_add(Weight::from_parts(9_393_234, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_339_000 picoseconds.
        Weight::from_parts(9_327_604, 0)
            // Standard Error: 53_697
            .saturating_add(Weight::from_parts(7_210_782, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_249_000 picoseconds.
        Weight::from_parts(4_442_437, 0)
            // Standard Error: 18_586
            .saturating_add(Weight::from_parts(2_913_438, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_302_000 picoseconds.
        Weight::from_parts(1_685_238, 0)
            // Standard Error: 9_409
            .saturating_add(Weight::from_parts(2_535_397, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_319_000 picoseconds.
        Weight::from_parts(2_413_000, 0)
            // Standard Error: 9_274
            .saturating_add(Weight::from_parts(1_355_116, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_291_000 picoseconds.
        Weight::from_parts(2_415_000, 0)
            // Standard Error: 5_548
            .saturating_add(Weight::from_parts(640_692, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_244_000 picoseconds.
        Weight::from_parts(2_366_000, 0)
            // Standard Error: 9_800
            .saturating_add(Weight::from_parts(1_314_911, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_209_000 picoseconds.
        Weight::from_parts(2_362_000, 0)
            // Standard Error: 4_329
            .saturating_add(Weight::from_parts(652_195, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_325_000 picoseconds.
        Weight::from_parts(2_409_000, 0)
            // Standard Error: 8_465
            .saturating_add(Weight::from_parts(1_260_421, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_299_000 picoseconds.
        Weight::from_parts(2_375_000, 0)
            // Standard Error: 6_699
            .saturating_add(Weight::from_parts(665_371, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_363_000, 0)
            // Standard Error: 8_383
            .saturating_add(Weight::from_parts(1_176_741, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_248_000 picoseconds.
        Weight::from_parts(2_313_000, 0)
            // Standard Error: 5_311
            .saturating_add(Weight::from_parts(600_403, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_198_000 picoseconds.
        Weight::from_parts(2_331_000, 0)
            // Standard Error: 7_356
            .saturating_add(Weight::from_parts(1_092_157, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_261_000 picoseconds.
        Weight::from_parts(72_799, 0)
            // Standard Error: 6_815
            .saturating_add(Weight::from_parts(645_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_328_000 picoseconds.
        Weight::from_parts(2_409_000, 0)
            // Standard Error: 7_706
            .saturating_add(Weight::from_parts(1_105_456, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_236_000 picoseconds.
        Weight::from_parts(2_345_000, 0)
            // Standard Error: 4_891
            .saturating_add(Weight::from_parts(609_876, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(2_303_000, 0)
            // Standard Error: 7_056
            .saturating_add(Weight::from_parts(1_106_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_316_000 picoseconds.
        Weight::from_parts(2_363_000, 0)
            // Standard Error: 4_187
            .saturating_add(Weight::from_parts(602_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_342_000 picoseconds.
        Weight::from_parts(2_380_000, 0)
            // Standard Error: 7_256
            .saturating_add(Weight::from_parts(1_116_321, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_000 picoseconds.
        Weight::from_parts(2_312_000, 0)
            // Standard Error: 3_660
            .saturating_add(Weight::from_parts(551_181, 0).saturating_mul(r.into()))
    }
}
