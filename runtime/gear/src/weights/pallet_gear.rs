// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-29, STEPS: `20`, REPEAT: `40`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=20 --repeat=40 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_140 nanoseconds.
        Weight::from_ref_time(1_247_000)
            // Standard Error: 576
            .saturating_add(Weight::from_ref_time(204_884).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `74 + c * (1024 ±0)`
        //  Estimated: `2542 + c * (1024 ±0)`
        // Minimum execution time: 2_950 nanoseconds.
        Weight::from_parts(3_057_000, 2542)
            // Standard Error: 1_230
            .saturating_add(Weight::from_ref_time(730_405).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 55_454 nanoseconds.
        Weight::from_ref_time(100_747_095)
            // Standard Error: 7_153
            .saturating_add(Weight::from_ref_time(2_213_723).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `847`
        //  Estimated: `17017`
        // Minimum execution time: 54_886 nanoseconds.
        Weight::from_parts(56_493_000, 17017)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `3010`
        // Minimum execution time: 66_734 nanoseconds.
        Weight::from_parts(26_845_906, 3010)
            // Standard Error: 45_975
            .saturating_add(Weight::from_ref_time(52_498_944).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `604`
        //  Estimated: `17714`
        // Minimum execution time: 51_634 nanoseconds.
        Weight::from_parts(60_150_116, 17714)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_363).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `13432`
        // Minimum execution time: 9_617_724 nanoseconds.
        Weight::from_parts(9_751_025_000, 13432)
            // Standard Error: 522_066
            .saturating_add(Weight::from_ref_time(28_853_985).saturating_mul(c.into()))
            // Standard Error: 31
            .saturating_add(Weight::from_ref_time(857).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `374`
        //  Estimated: `14759`
        // Minimum execution time: 54_249 nanoseconds.
        Weight::from_parts(36_564_268, 14759)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_186).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1042`
        //  Estimated: `30879`
        // Minimum execution time: 76_660 nanoseconds.
        Weight::from_parts(62_361_454, 30879)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_198).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `41136`
        // Minimum execution time: 298_482 nanoseconds.
        Weight::from_parts(309_219_321, 41136)
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `40641`
        // Minimum execution time: 313_649 nanoseconds.
        Weight::from_parts(325_573_621, 40641)
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2997 + c * (2150 ±0)`
        // Minimum execution time: 51_465 nanoseconds.
        Weight::from_parts(52_121_000, 2997)
            // Standard Error: 33_199
            .saturating_add(Weight::from_ref_time(53_251_860).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_802 nanoseconds.
        Weight::from_ref_time(93_930_505)
            // Standard Error: 77_989
            .saturating_add(Weight::from_ref_time(150_675_372).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 243_871 nanoseconds.
        Weight::from_ref_time(246_203_543)
            // Standard Error: 130_791
            .saturating_add(Weight::from_ref_time(140_597_443).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_343 nanoseconds.
        Weight::from_ref_time(92_383_000)
            // Standard Error: 1_221_632
            .saturating_add(Weight::from_ref_time(380_956_761).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 169_756 nanoseconds.
        Weight::from_ref_time(187_817_893)
            // Standard Error: 289_806
            .saturating_add(Weight::from_ref_time(307_779_371).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_296 nanoseconds.
        Weight::from_ref_time(115_235_678)
            // Standard Error: 115_939
            .saturating_add(Weight::from_ref_time(209_260_497).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_719 nanoseconds.
        Weight::from_ref_time(101_569_090)
            // Standard Error: 82_500
            .saturating_add(Weight::from_ref_time(209_310_107).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_356 nanoseconds.
        Weight::from_ref_time(102_895_171)
            // Standard Error: 96_131
            .saturating_add(Weight::from_ref_time(209_273_475).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_295 nanoseconds.
        Weight::from_ref_time(102_966_265)
            // Standard Error: 95_576
            .saturating_add(Weight::from_ref_time(208_813_542).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_130 nanoseconds.
        Weight::from_ref_time(101_281_176)
            // Standard Error: 81_525
            .saturating_add(Weight::from_ref_time(210_187_060).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_824 nanoseconds.
        Weight::from_ref_time(109_582_615)
            // Standard Error: 86_439
            .saturating_add(Weight::from_ref_time(209_811_634).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_125 nanoseconds.
        Weight::from_ref_time(107_956_897)
            // Standard Error: 82_247
            .saturating_add(Weight::from_ref_time(207_604_825).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_022 nanoseconds.
        Weight::from_ref_time(104_051_360)
            // Standard Error: 89_314
            .saturating_add(Weight::from_ref_time(205_733_007).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_403 nanoseconds.
        Weight::from_ref_time(95_945_549)
            // Standard Error: 126_864
            .saturating_add(Weight::from_ref_time(208_842_592).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 623_361 nanoseconds.
        Weight::from_ref_time(689_161_511)
            // Standard Error: 302_553
            .saturating_add(Weight::from_ref_time(284_052_762).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 910_043 nanoseconds.
        Weight::from_ref_time(921_997_000)
            // Standard Error: 60_410
            .saturating_add(Weight::from_ref_time(12_772_806).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_016 nanoseconds.
        Weight::from_ref_time(101_174_981)
            // Standard Error: 97_899
            .saturating_add(Weight::from_ref_time(207_470_601).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_174 nanoseconds.
        Weight::from_ref_time(101_619_623)
            // Standard Error: 86_356
            .saturating_add(Weight::from_ref_time(206_502_088).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_717 nanoseconds.
        Weight::from_ref_time(107_518_118)
            // Standard Error: 109_471
            .saturating_add(Weight::from_ref_time(267_567_748).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_400 nanoseconds.
        Weight::from_ref_time(101_703_326)
            // Standard Error: 99_507
            .saturating_add(Weight::from_ref_time(213_638_301).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_320_463 nanoseconds.
        Weight::from_ref_time(4_386_244_537)
            // Standard Error: 203_237
            .saturating_add(Weight::from_ref_time(300_013_858).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 602_954 nanoseconds.
        Weight::from_ref_time(607_609_000)
            // Standard Error: 59_714
            .saturating_add(Weight::from_ref_time(33_508_556).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_335 nanoseconds.
        Weight::from_ref_time(123_870_028)
            // Standard Error: 224_656
            .saturating_add(Weight::from_ref_time(392_104_288).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 483_905 nanoseconds.
        Weight::from_ref_time(486_671_000)
            // Standard Error: 70_631
            .saturating_add(Weight::from_ref_time(24_100_153).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 257_246 nanoseconds.
        Weight::from_ref_time(289_490_238)
            // Standard Error: 210_959
            .saturating_add(Weight::from_ref_time(409_671_185).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 523_436 nanoseconds.
        Weight::from_ref_time(533_847_000)
            // Standard Error: 69_246
            .saturating_add(Weight::from_ref_time(24_074_994).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_083 nanoseconds.
        Weight::from_ref_time(93_505_815)
            // Standard Error: 234_003
            .saturating_add(Weight::from_ref_time(19_119_484).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_266 nanoseconds.
        Weight::from_ref_time(91_868_001)
            // Standard Error: 838
            .saturating_add(Weight::from_ref_time(468_604).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_782 nanoseconds.
        Weight::from_ref_time(124_599_451)
            // Standard Error: 141_148
            .saturating_add(Weight::from_ref_time(285_173_633).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_671 nanoseconds.
        Weight::from_ref_time(69_567_165)
            // Standard Error: 651
            .saturating_add(Weight::from_ref_time(586_922).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_838 nanoseconds.
        Weight::from_ref_time(101_543_660)
            // Standard Error: 247_065
            .saturating_add(Weight::from_ref_time(12_818_089).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_176 nanoseconds.
        Weight::from_ref_time(93_008_047)
            // Standard Error: 875
            .saturating_add(Weight::from_ref_time(467_094).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_407 nanoseconds.
        Weight::from_ref_time(105_815_991)
            // Standard Error: 96_364
            .saturating_add(Weight::from_ref_time(208_771_424).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_956 nanoseconds.
        Weight::from_ref_time(101_669_227)
            // Standard Error: 104_325
            .saturating_add(Weight::from_ref_time(209_831_907).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 584_286 nanoseconds.
        Weight::from_ref_time(639_198_065)
            // Standard Error: 279_613
            .saturating_add(Weight::from_ref_time(220_077_217).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 601_667 nanoseconds.
        Weight::from_ref_time(630_246_210)
            // Standard Error: 1_824
            .saturating_add(Weight::from_ref_time(124_688).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_916_250 nanoseconds.
        Weight::from_ref_time(4_982_269_118)
            // Standard Error: 404_611
            .saturating_add(Weight::from_ref_time(235_406_185).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_050_008 nanoseconds.
        Weight::from_ref_time(1_016_618_953)
            // Standard Error: 11_912
            .saturating_add(Weight::from_ref_time(11_875_558).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_655 nanoseconds.
        Weight::from_ref_time(110_613_935)
            // Standard Error: 129_392
            .saturating_add(Weight::from_ref_time(219_040_802).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 299_505 nanoseconds.
        Weight::from_ref_time(305_518_000)
            // Standard Error: 60_865
            .saturating_add(Weight::from_ref_time(30_685_324).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_273 nanoseconds.
        Weight::from_ref_time(118_142_057)
            // Standard Error: 105_142
            .saturating_add(Weight::from_ref_time(273_627_692).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_535 nanoseconds.
        Weight::from_ref_time(102_103_200)
            // Standard Error: 89_468
            .saturating_add(Weight::from_ref_time(205_500_504).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_511 nanoseconds.
        Weight::from_ref_time(92_377_857)
            // Standard Error: 231_472
            .saturating_add(Weight::from_ref_time(30_933_792).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_758 nanoseconds.
        Weight::from_ref_time(91_657_402)
            // Standard Error: 244_115
            .saturating_add(Weight::from_ref_time(21_725_947).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_000 nanoseconds.
        Weight::from_ref_time(91_735_228)
            // Standard Error: 233_899
            .saturating_add(Weight::from_ref_time(22_269_621).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_307 nanoseconds.
        Weight::from_ref_time(92_105_426)
            // Standard Error: 264_531
            .saturating_add(Weight::from_ref_time(23_386_923).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_768 nanoseconds.
        Weight::from_ref_time(92_182_389)
            // Standard Error: 266_037
            .saturating_add(Weight::from_ref_time(23_378_210).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_252 nanoseconds.
        Weight::from_ref_time(188_272_141)
            // Standard Error: 149_647
            .saturating_add(Weight::from_ref_time(301_283_670).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_722 nanoseconds.
        Weight::from_ref_time(127_649_027)
            // Standard Error: 346_072
            .saturating_add(Weight::from_ref_time(473_984_869).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_014_214 nanoseconds.
        Weight::from_ref_time(51_118_751_000)
            // Standard Error: 347_589
            .saturating_add(Weight::from_ref_time(8_706_425).saturating_mul(p.into()))
            // Standard Error: 347_569
            .saturating_add(Weight::from_ref_time(155_459_007).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 86_153 nanoseconds.
        Weight::from_parts(114_201_096, 141)
            // Standard Error: 5_187
            .saturating_add(Weight::from_ref_time(11_182_955).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 87_042 nanoseconds.
        Weight::from_parts(89_112_000, 141)
            // Standard Error: 30_776
            .saturating_add(Weight::from_ref_time(37_500_823).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 5_787_833 nanoseconds.
        Weight::from_parts(5_609_275_390, 5068941)
            // Standard Error: 54_501
            .saturating_add(Weight::from_ref_time(39_302_723).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `1012 + p * (75606 ±0)`
        // Minimum execution time: 86_999 nanoseconds.
        Weight::from_parts(88_367_000, 1012)
            // Standard Error: 23_420
            .saturating_add(Weight::from_ref_time(42_581_675).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 102_514 nanoseconds.
        Weight::from_parts(96_231_638, 584)
            // Standard Error: 43_387
            .saturating_add(Weight::from_ref_time(39_572_786).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 626_484 nanoseconds.
        Weight::from_parts(615_373_880, 584)
            // Standard Error: 151_161
            .saturating_add(Weight::from_ref_time(45_274_481).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 996_592 nanoseconds.
        Weight::from_parts(1_005_736_467, 316941)
            // Standard Error: 139_541
            .saturating_add(Weight::from_ref_time(45_464_900).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_033_741 nanoseconds.
        Weight::from_ref_time(3_412_500_885)
            // Standard Error: 70_695
            .saturating_add(Weight::from_ref_time(8_004_413).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_040_518 nanoseconds.
        Weight::from_ref_time(3_499_848_810)
            // Standard Error: 63_779
            .saturating_add(Weight::from_ref_time(9_522_432).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_936_946 nanoseconds.
        Weight::from_ref_time(9_719_267_617)
            // Standard Error: 140_243
            .saturating_add(Weight::from_ref_time(13_402_522).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_146_392 nanoseconds.
        Weight::from_ref_time(11_214_000_333)
            // Standard Error: 214_016
            .saturating_add(Weight::from_ref_time(15_493_976).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_811 nanoseconds.
        Weight::from_ref_time(2_922_000)
            // Standard Error: 7_856
            .saturating_add(Weight::from_ref_time(3_836_120).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_858 nanoseconds.
        Weight::from_ref_time(772_109)
            // Standard Error: 5_965
            .saturating_add(Weight::from_ref_time(3_146_909).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_858 nanoseconds.
        Weight::from_ref_time(3_850_350)
            // Standard Error: 1_018
            .saturating_add(Weight::from_ref_time(1_577_690).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_863 nanoseconds.
        Weight::from_ref_time(2_974_000)
            // Standard Error: 5_789
            .saturating_add(Weight::from_ref_time(3_045_008).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_826 nanoseconds.
        Weight::from_ref_time(1_313_376)
            // Standard Error: 9_270
            .saturating_add(Weight::from_ref_time(5_271_122).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_231 nanoseconds.
        Weight::from_ref_time(6_138_413)
            // Standard Error: 1_157
            .saturating_add(Weight::from_ref_time(165_705).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_947 nanoseconds.
        Weight::from_ref_time(5_501_408)
            // Standard Error: 7_512
            .saturating_add(Weight::from_ref_time(2_568_045).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_568_045 -
            2_487_444).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_972 nanoseconds.
        Weight::from_ref_time(4_163_314)
            // Standard Error: 12_778
            .saturating_add(Weight::from_ref_time(2_487_444).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_286 nanoseconds.
        Weight::from_ref_time(2_660_633)
            // Standard Error: 79_127
            .saturating_add(Weight::from_ref_time(10_960_777).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_328 nanoseconds.
        Weight::from_ref_time(10_804_793)
            // Standard Error: 4_313
            .saturating_add(Weight::from_ref_time(1_129_061).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_558 nanoseconds.
        Weight::from_ref_time(5_766_313)
            // Standard Error: 8
            .saturating_add(Weight::from_ref_time(67).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_869 nanoseconds.
        Weight::from_ref_time(2_857_918)
            // Standard Error: 2_522
            .saturating_add(Weight::from_ref_time(247_739).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_865 nanoseconds.
        Weight::from_ref_time(3_023_000)
            // Standard Error: 5_689
            .saturating_add(Weight::from_ref_time(804_763).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_919 nanoseconds.
        Weight::from_ref_time(3_006_000)
            // Standard Error: 5_455
            .saturating_add(Weight::from_ref_time(766_325).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_560 nanoseconds.
        Weight::from_ref_time(8_920_364)
            // Standard Error: 7_125
            .saturating_add(Weight::from_ref_time(813_721).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_485 nanoseconds.
        Weight::from_ref_time(5_871_909)
            // Standard Error: 10_290
            .saturating_add(Weight::from_ref_time(1_576_254).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_074 nanoseconds.
        Weight::from_ref_time(3_438_811)
            // Standard Error: 8_812
            .saturating_add(Weight::from_ref_time(6_922_302).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_870 nanoseconds.
        Weight::from_ref_time(2_981_000)
            // Standard Error: 5_289
            .saturating_add(Weight::from_ref_time(3_318_879).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_769 nanoseconds.
        Weight::from_ref_time(2_842_000)
            // Standard Error: 5_971
            .saturating_add(Weight::from_ref_time(3_442_324).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_906 nanoseconds.
        Weight::from_ref_time(2_971_000)
            // Standard Error: 5_413
            .saturating_add(Weight::from_ref_time(3_089_128).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_759 nanoseconds.
        Weight::from_ref_time(2_843_000)
            // Standard Error: 5_478
            .saturating_add(Weight::from_ref_time(3_195_156).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_885 nanoseconds.
        Weight::from_ref_time(771_808)
            // Standard Error: 6_022
            .saturating_add(Weight::from_ref_time(631_021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_739 nanoseconds.
        Weight::from_ref_time(2_839_000)
            // Standard Error: 4_807
            .saturating_add(Weight::from_ref_time(652_863).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_950 nanoseconds.
        Weight::from_ref_time(3_021_000)
            // Standard Error: 10_959
            .saturating_add(Weight::from_ref_time(1_856_357).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_703 nanoseconds.
        Weight::from_ref_time(2_769_000)
            // Standard Error: 9_652
            .saturating_add(Weight::from_ref_time(1_965_129).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_869 nanoseconds.
        Weight::from_ref_time(2_417_005)
            // Standard Error: 2_720
            .saturating_add(Weight::from_ref_time(343_306).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_917 nanoseconds.
        Weight::from_ref_time(3_506_454)
            // Standard Error: 1_654
            .saturating_add(Weight::from_ref_time(169_569).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_810 nanoseconds.
        Weight::from_ref_time(3_518_443)
            // Standard Error: 2_169
            .saturating_add(Weight::from_ref_time(166_960).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_921 nanoseconds.
        Weight::from_ref_time(2_972_000)
            // Standard Error: 10_606
            .saturating_add(Weight::from_ref_time(1_854_887).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_683 nanoseconds.
        Weight::from_ref_time(2_808_000)
            // Standard Error: 9_153
            .saturating_add(Weight::from_ref_time(1_946_898).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_852 nanoseconds.
        Weight::from_ref_time(2_951_000)
            // Standard Error: 9_911
            .saturating_add(Weight::from_ref_time(1_859_113).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_741 nanoseconds.
        Weight::from_ref_time(2_876_000)
            // Standard Error: 8_724
            .saturating_add(Weight::from_ref_time(1_945_645).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_890 nanoseconds.
        Weight::from_ref_time(2_989_000)
            // Standard Error: 10_592
            .saturating_add(Weight::from_ref_time(1_853_098).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_725 nanoseconds.
        Weight::from_ref_time(2_792_000)
            // Standard Error: 8_482
            .saturating_add(Weight::from_ref_time(1_927_419).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_871 nanoseconds.
        Weight::from_ref_time(2_982_000)
            // Standard Error: 10_542
            .saturating_add(Weight::from_ref_time(1_854_471).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_713 nanoseconds.
        Weight::from_ref_time(2_895_000)
            // Standard Error: 8_576
            .saturating_add(Weight::from_ref_time(1_953_805).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_906 nanoseconds.
        Weight::from_ref_time(2_979_000)
            // Standard Error: 10_447
            .saturating_add(Weight::from_ref_time(1_858_657).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_752 nanoseconds.
        Weight::from_ref_time(2_871_000)
            // Standard Error: 8_855
            .saturating_add(Weight::from_ref_time(1_979_931).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_926 nanoseconds.
        Weight::from_ref_time(2_992_000)
            // Standard Error: 9_967
            .saturating_add(Weight::from_ref_time(1_845_015).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_785 nanoseconds.
        Weight::from_ref_time(2_812_000)
            // Standard Error: 8_274
            .saturating_add(Weight::from_ref_time(1_966_288).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_882 nanoseconds.
        Weight::from_ref_time(2_952_000)
            // Standard Error: 10_274
            .saturating_add(Weight::from_ref_time(1_842_260).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_725 nanoseconds.
        Weight::from_ref_time(2_855_000)
            // Standard Error: 8_385
            .saturating_add(Weight::from_ref_time(1_949_048).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_935 nanoseconds.
        Weight::from_ref_time(3_012_000)
            // Standard Error: 10_425
            .saturating_add(Weight::from_ref_time(1_843_299).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_748 nanoseconds.
        Weight::from_ref_time(2_817_000)
            // Standard Error: 8_761
            .saturating_add(Weight::from_ref_time(1_947_920).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_853 nanoseconds.
        Weight::from_ref_time(2_958_000)
            // Standard Error: 10_167
            .saturating_add(Weight::from_ref_time(1_872_659).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_783 nanoseconds.
        Weight::from_ref_time(2_829_000)
            // Standard Error: 9_008
            .saturating_add(Weight::from_ref_time(1_925_936).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_802 nanoseconds.
        Weight::from_ref_time(2_938_000)
            // Standard Error: 10_232
            .saturating_add(Weight::from_ref_time(1_812_652).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_753 nanoseconds.
        Weight::from_ref_time(2_829_000)
            // Standard Error: 8_864
            .saturating_add(Weight::from_ref_time(1_959_280).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_828 nanoseconds.
        Weight::from_ref_time(2_948_000)
            // Standard Error: 8_871
            .saturating_add(Weight::from_ref_time(1_294_958).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_716 nanoseconds.
        Weight::from_ref_time(2_860_000)
            // Standard Error: 8_179
            .saturating_add(Weight::from_ref_time(1_466_803).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_956 nanoseconds.
        Weight::from_ref_time(3_024_000)
            // Standard Error: 8_638
            .saturating_add(Weight::from_ref_time(1_283_109).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_724 nanoseconds.
        Weight::from_ref_time(2_821_000)
            // Standard Error: 8_353
            .saturating_add(Weight::from_ref_time(1_447_920).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_920 nanoseconds.
        Weight::from_ref_time(2_987_000)
            // Standard Error: 9_494
            .saturating_add(Weight::from_ref_time(1_748_444).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_796 nanoseconds.
        Weight::from_ref_time(2_885_000)
            // Standard Error: 8_774
            .saturating_add(Weight::from_ref_time(1_892_976).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_866 nanoseconds.
        Weight::from_ref_time(3_560_714)
            // Standard Error: 9_747
            .saturating_add(Weight::from_ref_time(2_570_579).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_783 nanoseconds.
        Weight::from_ref_time(11_708_769)
            // Standard Error: 23_415
            .saturating_add(Weight::from_ref_time(2_024_337).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_844 nanoseconds.
        Weight::from_ref_time(2_082_032)
            // Standard Error: 9_268
            .saturating_add(Weight::from_ref_time(2_813_395).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_682 nanoseconds.
        Weight::from_ref_time(12_362_851)
            // Standard Error: 24_663
            .saturating_add(Weight::from_ref_time(2_091_065).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_835 nanoseconds.
        Weight::from_ref_time(2_908_000)
            // Standard Error: 12_101
            .saturating_add(Weight::from_ref_time(9_450_402).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_754 nanoseconds.
        Weight::from_ref_time(13_089_120)
            // Standard Error: 42_630
            .saturating_add(Weight::from_ref_time(8_445_285).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_899 nanoseconds.
        Weight::from_ref_time(4_933_440)
            // Standard Error: 8_409
            .saturating_add(Weight::from_ref_time(2_820_060).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_680 nanoseconds.
        Weight::from_ref_time(15_145_906)
            // Standard Error: 25_343
            .saturating_add(Weight::from_ref_time(2_115_292).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_922 nanoseconds.
        Weight::from_ref_time(3_009_000)
            // Standard Error: 8_982
            .saturating_add(Weight::from_ref_time(1_288_656).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_717 nanoseconds.
        Weight::from_ref_time(2_798_000)
            // Standard Error: 8_607
            .saturating_add(Weight::from_ref_time(1_425_420).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_832 nanoseconds.
        Weight::from_ref_time(2_996_000)
            // Standard Error: 9_005
            .saturating_add(Weight::from_ref_time(1_284_084).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_776 nanoseconds.
        Weight::from_ref_time(2_825_000)
            // Standard Error: 7_859
            .saturating_add(Weight::from_ref_time(1_389_908).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_922 nanoseconds.
        Weight::from_ref_time(2_996_000)
            // Standard Error: 8_919
            .saturating_add(Weight::from_ref_time(1_278_293).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_795 nanoseconds.
        Weight::from_ref_time(2_858_000)
            // Standard Error: 8_249
            .saturating_add(Weight::from_ref_time(1_422_063).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_810 nanoseconds.
        Weight::from_ref_time(3_000_000)
            // Standard Error: 7_603
            .saturating_add(Weight::from_ref_time(1_084_391).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_776 nanoseconds.
        Weight::from_ref_time(2_858_000)
            // Standard Error: 7_815
            .saturating_add(Weight::from_ref_time(1_224_549).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_813 nanoseconds.
        Weight::from_ref_time(2_886_000)
            // Standard Error: 7_306
            .saturating_add(Weight::from_ref_time(1_075_976).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_759 nanoseconds.
        Weight::from_ref_time(2_887_000)
            // Standard Error: 8_561
            .saturating_add(Weight::from_ref_time(1_228_163).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_930 nanoseconds.
        Weight::from_ref_time(2_981_000)
            // Standard Error: 8_185
            .saturating_add(Weight::from_ref_time(1_093_112).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_760 nanoseconds.
        Weight::from_ref_time(2_830_000)
            // Standard Error: 8_423
            .saturating_add(Weight::from_ref_time(1_255_913).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_925 nanoseconds.
        Weight::from_ref_time(2_964_000)
            // Standard Error: 7_803
            .saturating_add(Weight::from_ref_time(1_065_004).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_751 nanoseconds.
        Weight::from_ref_time(2_898_000)
            // Standard Error: 8_463
            .saturating_add(Weight::from_ref_time(1_225_754).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_876 nanoseconds.
        Weight::from_ref_time(2_956_000)
            // Standard Error: 8_576
            .saturating_add(Weight::from_ref_time(1_094_833).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_777 nanoseconds.
        Weight::from_ref_time(2_860_000)
            // Standard Error: 7_551
            .saturating_add(Weight::from_ref_time(1_216_846).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_140 nanoseconds.
        Weight::from_ref_time(1_247_000)
            // Standard Error: 576
            .saturating_add(Weight::from_ref_time(204_884).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `74 + c * (1024 ±0)`
        //  Estimated: `2542 + c * (1024 ±0)`
        // Minimum execution time: 2_950 nanoseconds.
        Weight::from_parts(3_057_000, 2542)
            // Standard Error: 1_230
            .saturating_add(Weight::from_ref_time(730_405).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_proof_size(1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 55_454 nanoseconds.
        Weight::from_ref_time(100_747_095)
            // Standard Error: 7_153
            .saturating_add(Weight::from_ref_time(2_213_723).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `847`
        //  Estimated: `17017`
        // Minimum execution time: 54_886 nanoseconds.
        Weight::from_parts(56_493_000, 17017)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `3010`
        // Minimum execution time: 66_734 nanoseconds.
        Weight::from_parts(26_845_906, 3010)
            // Standard Error: 45_975
            .saturating_add(Weight::from_ref_time(52_498_944).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `604`
        //  Estimated: `17714`
        // Minimum execution time: 51_634 nanoseconds.
        Weight::from_parts(60_150_116, 17714)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(2_363).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `13432`
        // Minimum execution time: 9_617_724 nanoseconds.
        Weight::from_parts(9_751_025_000, 13432)
            // Standard Error: 522_066
            .saturating_add(Weight::from_ref_time(28_853_985).saturating_mul(c.into()))
            // Standard Error: 31
            .saturating_add(Weight::from_ref_time(857).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `374`
        //  Estimated: `14759`
        // Minimum execution time: 54_249 nanoseconds.
        Weight::from_parts(36_564_268, 14759)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_186).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1042`
        //  Estimated: `30879`
        // Minimum execution time: 76_660 nanoseconds.
        Weight::from_parts(62_361_454, 30879)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_198).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `41136`
        // Minimum execution time: 298_482 nanoseconds.
        Weight::from_parts(309_219_321, 41136)
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `676`
        //  Estimated: `40641`
        // Minimum execution time: 313_649 nanoseconds.
        Weight::from_parts(325_573_621, 40641)
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `243 + c * (1075 ±0)`
        //  Estimated: `2997 + c * (2150 ±0)`
        // Minimum execution time: 51_465 nanoseconds.
        Weight::from_parts(52_121_000, 2997)
            // Standard Error: 33_199
            .saturating_add(Weight::from_ref_time(53_251_860).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_802 nanoseconds.
        Weight::from_ref_time(93_930_505)
            // Standard Error: 77_989
            .saturating_add(Weight::from_ref_time(150_675_372).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 243_871 nanoseconds.
        Weight::from_ref_time(246_203_543)
            // Standard Error: 130_791
            .saturating_add(Weight::from_ref_time(140_597_443).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_343 nanoseconds.
        Weight::from_ref_time(92_383_000)
            // Standard Error: 1_221_632
            .saturating_add(Weight::from_ref_time(380_956_761).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 169_756 nanoseconds.
        Weight::from_ref_time(187_817_893)
            // Standard Error: 289_806
            .saturating_add(Weight::from_ref_time(307_779_371).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_296 nanoseconds.
        Weight::from_ref_time(115_235_678)
            // Standard Error: 115_939
            .saturating_add(Weight::from_ref_time(209_260_497).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_719 nanoseconds.
        Weight::from_ref_time(101_569_090)
            // Standard Error: 82_500
            .saturating_add(Weight::from_ref_time(209_310_107).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_356 nanoseconds.
        Weight::from_ref_time(102_895_171)
            // Standard Error: 96_131
            .saturating_add(Weight::from_ref_time(209_273_475).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_295 nanoseconds.
        Weight::from_ref_time(102_966_265)
            // Standard Error: 95_576
            .saturating_add(Weight::from_ref_time(208_813_542).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_130 nanoseconds.
        Weight::from_ref_time(101_281_176)
            // Standard Error: 81_525
            .saturating_add(Weight::from_ref_time(210_187_060).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_824 nanoseconds.
        Weight::from_ref_time(109_582_615)
            // Standard Error: 86_439
            .saturating_add(Weight::from_ref_time(209_811_634).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_125 nanoseconds.
        Weight::from_ref_time(107_956_897)
            // Standard Error: 82_247
            .saturating_add(Weight::from_ref_time(207_604_825).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_022 nanoseconds.
        Weight::from_ref_time(104_051_360)
            // Standard Error: 89_314
            .saturating_add(Weight::from_ref_time(205_733_007).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_403 nanoseconds.
        Weight::from_ref_time(95_945_549)
            // Standard Error: 126_864
            .saturating_add(Weight::from_ref_time(208_842_592).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 623_361 nanoseconds.
        Weight::from_ref_time(689_161_511)
            // Standard Error: 302_553
            .saturating_add(Weight::from_ref_time(284_052_762).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 910_043 nanoseconds.
        Weight::from_ref_time(921_997_000)
            // Standard Error: 60_410
            .saturating_add(Weight::from_ref_time(12_772_806).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_016 nanoseconds.
        Weight::from_ref_time(101_174_981)
            // Standard Error: 97_899
            .saturating_add(Weight::from_ref_time(207_470_601).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_174 nanoseconds.
        Weight::from_ref_time(101_619_623)
            // Standard Error: 86_356
            .saturating_add(Weight::from_ref_time(206_502_088).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_717 nanoseconds.
        Weight::from_ref_time(107_518_118)
            // Standard Error: 109_471
            .saturating_add(Weight::from_ref_time(267_567_748).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_400 nanoseconds.
        Weight::from_ref_time(101_703_326)
            // Standard Error: 99_507
            .saturating_add(Weight::from_ref_time(213_638_301).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_320_463 nanoseconds.
        Weight::from_ref_time(4_386_244_537)
            // Standard Error: 203_237
            .saturating_add(Weight::from_ref_time(300_013_858).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 602_954 nanoseconds.
        Weight::from_ref_time(607_609_000)
            // Standard Error: 59_714
            .saturating_add(Weight::from_ref_time(33_508_556).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_335 nanoseconds.
        Weight::from_ref_time(123_870_028)
            // Standard Error: 224_656
            .saturating_add(Weight::from_ref_time(392_104_288).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 483_905 nanoseconds.
        Weight::from_ref_time(486_671_000)
            // Standard Error: 70_631
            .saturating_add(Weight::from_ref_time(24_100_153).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 257_246 nanoseconds.
        Weight::from_ref_time(289_490_238)
            // Standard Error: 210_959
            .saturating_add(Weight::from_ref_time(409_671_185).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 523_436 nanoseconds.
        Weight::from_ref_time(533_847_000)
            // Standard Error: 69_246
            .saturating_add(Weight::from_ref_time(24_074_994).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_083 nanoseconds.
        Weight::from_ref_time(93_505_815)
            // Standard Error: 234_003
            .saturating_add(Weight::from_ref_time(19_119_484).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_266 nanoseconds.
        Weight::from_ref_time(91_868_001)
            // Standard Error: 838
            .saturating_add(Weight::from_ref_time(468_604).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 89_782 nanoseconds.
        Weight::from_ref_time(124_599_451)
            // Standard Error: 141_148
            .saturating_add(Weight::from_ref_time(285_173_633).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_671 nanoseconds.
        Weight::from_ref_time(69_567_165)
            // Standard Error: 651
            .saturating_add(Weight::from_ref_time(586_922).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_838 nanoseconds.
        Weight::from_ref_time(101_543_660)
            // Standard Error: 247_065
            .saturating_add(Weight::from_ref_time(12_818_089).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 110_176 nanoseconds.
        Weight::from_ref_time(93_008_047)
            // Standard Error: 875
            .saturating_add(Weight::from_ref_time(467_094).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_407 nanoseconds.
        Weight::from_ref_time(105_815_991)
            // Standard Error: 96_364
            .saturating_add(Weight::from_ref_time(208_771_424).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_956 nanoseconds.
        Weight::from_ref_time(101_669_227)
            // Standard Error: 104_325
            .saturating_add(Weight::from_ref_time(209_831_907).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 584_286 nanoseconds.
        Weight::from_ref_time(639_198_065)
            // Standard Error: 279_613
            .saturating_add(Weight::from_ref_time(220_077_217).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 601_667 nanoseconds.
        Weight::from_ref_time(630_246_210)
            // Standard Error: 1_824
            .saturating_add(Weight::from_ref_time(124_688).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_916_250 nanoseconds.
        Weight::from_ref_time(4_982_269_118)
            // Standard Error: 404_611
            .saturating_add(Weight::from_ref_time(235_406_185).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_050_008 nanoseconds.
        Weight::from_ref_time(1_016_618_953)
            // Standard Error: 11_912
            .saturating_add(Weight::from_ref_time(11_875_558).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_655 nanoseconds.
        Weight::from_ref_time(110_613_935)
            // Standard Error: 129_392
            .saturating_add(Weight::from_ref_time(219_040_802).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 299_505 nanoseconds.
        Weight::from_ref_time(305_518_000)
            // Standard Error: 60_865
            .saturating_add(Weight::from_ref_time(30_685_324).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_273 nanoseconds.
        Weight::from_ref_time(118_142_057)
            // Standard Error: 105_142
            .saturating_add(Weight::from_ref_time(273_627_692).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_535 nanoseconds.
        Weight::from_ref_time(102_103_200)
            // Standard Error: 89_468
            .saturating_add(Weight::from_ref_time(205_500_504).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_511 nanoseconds.
        Weight::from_ref_time(92_377_857)
            // Standard Error: 231_472
            .saturating_add(Weight::from_ref_time(30_933_792).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_758 nanoseconds.
        Weight::from_ref_time(91_657_402)
            // Standard Error: 244_115
            .saturating_add(Weight::from_ref_time(21_725_947).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_000 nanoseconds.
        Weight::from_ref_time(91_735_228)
            // Standard Error: 233_899
            .saturating_add(Weight::from_ref_time(22_269_621).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_307 nanoseconds.
        Weight::from_ref_time(92_105_426)
            // Standard Error: 264_531
            .saturating_add(Weight::from_ref_time(23_386_923).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_768 nanoseconds.
        Weight::from_ref_time(92_182_389)
            // Standard Error: 266_037
            .saturating_add(Weight::from_ref_time(23_378_210).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_252 nanoseconds.
        Weight::from_ref_time(188_272_141)
            // Standard Error: 149_647
            .saturating_add(Weight::from_ref_time(301_283_670).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_722 nanoseconds.
        Weight::from_ref_time(127_649_027)
            // Standard Error: 346_072
            .saturating_add(Weight::from_ref_time(473_984_869).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_014_214 nanoseconds.
        Weight::from_ref_time(51_118_751_000)
            // Standard Error: 347_589
            .saturating_add(Weight::from_ref_time(8_706_425).saturating_mul(p.into()))
            // Standard Error: 347_569
            .saturating_add(Weight::from_ref_time(155_459_007).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 86_153 nanoseconds.
        Weight::from_parts(114_201_096, 141)
            // Standard Error: 5_187
            .saturating_add(Weight::from_ref_time(11_182_955).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `141 + p * (9900 ±0)`
        // Minimum execution time: 87_042 nanoseconds.
        Weight::from_parts(89_112_000, 141)
            // Standard Error: 30_776
            .saturating_add(Weight::from_ref_time(37_500_823).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5068941`
        // Minimum execution time: 5_787_833 nanoseconds.
        Weight::from_parts(5_609_275_390, 5068941)
            // Standard Error: 54_501
            .saturating_add(Weight::from_ref_time(39_302_723).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65704 ±0)`
        //  Estimated: `1012 + p * (75606 ±0)`
        // Minimum execution time: 86_999 nanoseconds.
        Weight::from_parts(88_367_000, 1012)
            // Standard Error: 23_420
            .saturating_add(Weight::from_ref_time(42_581_675).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(75606).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 102_514 nanoseconds.
        Weight::from_parts(96_231_638, 584)
            // Standard Error: 43_387
            .saturating_add(Weight::from_ref_time(39_572_786).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `584 + p * (9879 ±2)`
        // Minimum execution time: 626_484 nanoseconds.
        Weight::from_parts(615_373_880, 584)
            // Standard Error: 151_161
            .saturating_add(Weight::from_ref_time(45_274_481).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_proof_size(9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `316941`
        // Minimum execution time: 996_592 nanoseconds.
        Weight::from_parts(1_005_736_467, 316941)
            // Standard Error: 139_541
            .saturating_add(Weight::from_ref_time(45_464_900).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_033_741 nanoseconds.
        Weight::from_ref_time(3_412_500_885)
            // Standard Error: 70_695
            .saturating_add(Weight::from_ref_time(8_004_413).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_040_518 nanoseconds.
        Weight::from_ref_time(3_499_848_810)
            // Standard Error: 63_779
            .saturating_add(Weight::from_ref_time(9_522_432).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_936_946 nanoseconds.
        Weight::from_ref_time(9_719_267_617)
            // Standard Error: 140_243
            .saturating_add(Weight::from_ref_time(13_402_522).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_146_392 nanoseconds.
        Weight::from_ref_time(11_214_000_333)
            // Standard Error: 214_016
            .saturating_add(Weight::from_ref_time(15_493_976).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_811 nanoseconds.
        Weight::from_ref_time(2_922_000)
            // Standard Error: 7_856
            .saturating_add(Weight::from_ref_time(3_836_120).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_858 nanoseconds.
        Weight::from_ref_time(772_109)
            // Standard Error: 5_965
            .saturating_add(Weight::from_ref_time(3_146_909).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_858 nanoseconds.
        Weight::from_ref_time(3_850_350)
            // Standard Error: 1_018
            .saturating_add(Weight::from_ref_time(1_577_690).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_863 nanoseconds.
        Weight::from_ref_time(2_974_000)
            // Standard Error: 5_789
            .saturating_add(Weight::from_ref_time(3_045_008).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_826 nanoseconds.
        Weight::from_ref_time(1_313_376)
            // Standard Error: 9_270
            .saturating_add(Weight::from_ref_time(5_271_122).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_231 nanoseconds.
        Weight::from_ref_time(6_138_413)
            // Standard Error: 1_157
            .saturating_add(Weight::from_ref_time(165_705).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_947 nanoseconds.
        Weight::from_ref_time(5_501_408)
            // Standard Error: 7_512
            .saturating_add(Weight::from_ref_time(2_568_045).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_568_045 -
            2_487_444).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_972 nanoseconds.
        Weight::from_ref_time(4_163_314)
            // Standard Error: 12_778
            .saturating_add(Weight::from_ref_time(2_487_444).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_286 nanoseconds.
        Weight::from_ref_time(2_660_633)
            // Standard Error: 79_127
            .saturating_add(Weight::from_ref_time(10_960_777).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 13_328 nanoseconds.
        Weight::from_ref_time(10_804_793)
            // Standard Error: 4_313
            .saturating_add(Weight::from_ref_time(1_129_061).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_558 nanoseconds.
        Weight::from_ref_time(5_766_313)
            // Standard Error: 8
            .saturating_add(Weight::from_ref_time(67).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_869 nanoseconds.
        Weight::from_ref_time(2_857_918)
            // Standard Error: 2_522
            .saturating_add(Weight::from_ref_time(247_739).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_865 nanoseconds.
        Weight::from_ref_time(3_023_000)
            // Standard Error: 5_689
            .saturating_add(Weight::from_ref_time(804_763).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_919 nanoseconds.
        Weight::from_ref_time(3_006_000)
            // Standard Error: 5_455
            .saturating_add(Weight::from_ref_time(766_325).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_560 nanoseconds.
        Weight::from_ref_time(8_920_364)
            // Standard Error: 7_125
            .saturating_add(Weight::from_ref_time(813_721).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_485 nanoseconds.
        Weight::from_ref_time(5_871_909)
            // Standard Error: 10_290
            .saturating_add(Weight::from_ref_time(1_576_254).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_074 nanoseconds.
        Weight::from_ref_time(3_438_811)
            // Standard Error: 8_812
            .saturating_add(Weight::from_ref_time(6_922_302).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_870 nanoseconds.
        Weight::from_ref_time(2_981_000)
            // Standard Error: 5_289
            .saturating_add(Weight::from_ref_time(3_318_879).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_769 nanoseconds.
        Weight::from_ref_time(2_842_000)
            // Standard Error: 5_971
            .saturating_add(Weight::from_ref_time(3_442_324).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_906 nanoseconds.
        Weight::from_ref_time(2_971_000)
            // Standard Error: 5_413
            .saturating_add(Weight::from_ref_time(3_089_128).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_759 nanoseconds.
        Weight::from_ref_time(2_843_000)
            // Standard Error: 5_478
            .saturating_add(Weight::from_ref_time(3_195_156).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_885 nanoseconds.
        Weight::from_ref_time(771_808)
            // Standard Error: 6_022
            .saturating_add(Weight::from_ref_time(631_021).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_739 nanoseconds.
        Weight::from_ref_time(2_839_000)
            // Standard Error: 4_807
            .saturating_add(Weight::from_ref_time(652_863).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_950 nanoseconds.
        Weight::from_ref_time(3_021_000)
            // Standard Error: 10_959
            .saturating_add(Weight::from_ref_time(1_856_357).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_703 nanoseconds.
        Weight::from_ref_time(2_769_000)
            // Standard Error: 9_652
            .saturating_add(Weight::from_ref_time(1_965_129).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_869 nanoseconds.
        Weight::from_ref_time(2_417_005)
            // Standard Error: 2_720
            .saturating_add(Weight::from_ref_time(343_306).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_917 nanoseconds.
        Weight::from_ref_time(3_506_454)
            // Standard Error: 1_654
            .saturating_add(Weight::from_ref_time(169_569).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_810 nanoseconds.
        Weight::from_ref_time(3_518_443)
            // Standard Error: 2_169
            .saturating_add(Weight::from_ref_time(166_960).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_921 nanoseconds.
        Weight::from_ref_time(2_972_000)
            // Standard Error: 10_606
            .saturating_add(Weight::from_ref_time(1_854_887).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_683 nanoseconds.
        Weight::from_ref_time(2_808_000)
            // Standard Error: 9_153
            .saturating_add(Weight::from_ref_time(1_946_898).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_852 nanoseconds.
        Weight::from_ref_time(2_951_000)
            // Standard Error: 9_911
            .saturating_add(Weight::from_ref_time(1_859_113).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_741 nanoseconds.
        Weight::from_ref_time(2_876_000)
            // Standard Error: 8_724
            .saturating_add(Weight::from_ref_time(1_945_645).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_890 nanoseconds.
        Weight::from_ref_time(2_989_000)
            // Standard Error: 10_592
            .saturating_add(Weight::from_ref_time(1_853_098).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_725 nanoseconds.
        Weight::from_ref_time(2_792_000)
            // Standard Error: 8_482
            .saturating_add(Weight::from_ref_time(1_927_419).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_871 nanoseconds.
        Weight::from_ref_time(2_982_000)
            // Standard Error: 10_542
            .saturating_add(Weight::from_ref_time(1_854_471).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_713 nanoseconds.
        Weight::from_ref_time(2_895_000)
            // Standard Error: 8_576
            .saturating_add(Weight::from_ref_time(1_953_805).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_906 nanoseconds.
        Weight::from_ref_time(2_979_000)
            // Standard Error: 10_447
            .saturating_add(Weight::from_ref_time(1_858_657).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_752 nanoseconds.
        Weight::from_ref_time(2_871_000)
            // Standard Error: 8_855
            .saturating_add(Weight::from_ref_time(1_979_931).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_926 nanoseconds.
        Weight::from_ref_time(2_992_000)
            // Standard Error: 9_967
            .saturating_add(Weight::from_ref_time(1_845_015).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_785 nanoseconds.
        Weight::from_ref_time(2_812_000)
            // Standard Error: 8_274
            .saturating_add(Weight::from_ref_time(1_966_288).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_882 nanoseconds.
        Weight::from_ref_time(2_952_000)
            // Standard Error: 10_274
            .saturating_add(Weight::from_ref_time(1_842_260).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_725 nanoseconds.
        Weight::from_ref_time(2_855_000)
            // Standard Error: 8_385
            .saturating_add(Weight::from_ref_time(1_949_048).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_935 nanoseconds.
        Weight::from_ref_time(3_012_000)
            // Standard Error: 10_425
            .saturating_add(Weight::from_ref_time(1_843_299).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_748 nanoseconds.
        Weight::from_ref_time(2_817_000)
            // Standard Error: 8_761
            .saturating_add(Weight::from_ref_time(1_947_920).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_853 nanoseconds.
        Weight::from_ref_time(2_958_000)
            // Standard Error: 10_167
            .saturating_add(Weight::from_ref_time(1_872_659).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_783 nanoseconds.
        Weight::from_ref_time(2_829_000)
            // Standard Error: 9_008
            .saturating_add(Weight::from_ref_time(1_925_936).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_802 nanoseconds.
        Weight::from_ref_time(2_938_000)
            // Standard Error: 10_232
            .saturating_add(Weight::from_ref_time(1_812_652).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_753 nanoseconds.
        Weight::from_ref_time(2_829_000)
            // Standard Error: 8_864
            .saturating_add(Weight::from_ref_time(1_959_280).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_828 nanoseconds.
        Weight::from_ref_time(2_948_000)
            // Standard Error: 8_871
            .saturating_add(Weight::from_ref_time(1_294_958).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_716 nanoseconds.
        Weight::from_ref_time(2_860_000)
            // Standard Error: 8_179
            .saturating_add(Weight::from_ref_time(1_466_803).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_956 nanoseconds.
        Weight::from_ref_time(3_024_000)
            // Standard Error: 8_638
            .saturating_add(Weight::from_ref_time(1_283_109).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_724 nanoseconds.
        Weight::from_ref_time(2_821_000)
            // Standard Error: 8_353
            .saturating_add(Weight::from_ref_time(1_447_920).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_920 nanoseconds.
        Weight::from_ref_time(2_987_000)
            // Standard Error: 9_494
            .saturating_add(Weight::from_ref_time(1_748_444).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_796 nanoseconds.
        Weight::from_ref_time(2_885_000)
            // Standard Error: 8_774
            .saturating_add(Weight::from_ref_time(1_892_976).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_866 nanoseconds.
        Weight::from_ref_time(3_560_714)
            // Standard Error: 9_747
            .saturating_add(Weight::from_ref_time(2_570_579).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_783 nanoseconds.
        Weight::from_ref_time(11_708_769)
            // Standard Error: 23_415
            .saturating_add(Weight::from_ref_time(2_024_337).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_844 nanoseconds.
        Weight::from_ref_time(2_082_032)
            // Standard Error: 9_268
            .saturating_add(Weight::from_ref_time(2_813_395).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_682 nanoseconds.
        Weight::from_ref_time(12_362_851)
            // Standard Error: 24_663
            .saturating_add(Weight::from_ref_time(2_091_065).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_835 nanoseconds.
        Weight::from_ref_time(2_908_000)
            // Standard Error: 12_101
            .saturating_add(Weight::from_ref_time(9_450_402).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_754 nanoseconds.
        Weight::from_ref_time(13_089_120)
            // Standard Error: 42_630
            .saturating_add(Weight::from_ref_time(8_445_285).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_899 nanoseconds.
        Weight::from_ref_time(4_933_440)
            // Standard Error: 8_409
            .saturating_add(Weight::from_ref_time(2_820_060).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_680 nanoseconds.
        Weight::from_ref_time(15_145_906)
            // Standard Error: 25_343
            .saturating_add(Weight::from_ref_time(2_115_292).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_922 nanoseconds.
        Weight::from_ref_time(3_009_000)
            // Standard Error: 8_982
            .saturating_add(Weight::from_ref_time(1_288_656).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_717 nanoseconds.
        Weight::from_ref_time(2_798_000)
            // Standard Error: 8_607
            .saturating_add(Weight::from_ref_time(1_425_420).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_832 nanoseconds.
        Weight::from_ref_time(2_996_000)
            // Standard Error: 9_005
            .saturating_add(Weight::from_ref_time(1_284_084).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_776 nanoseconds.
        Weight::from_ref_time(2_825_000)
            // Standard Error: 7_859
            .saturating_add(Weight::from_ref_time(1_389_908).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_922 nanoseconds.
        Weight::from_ref_time(2_996_000)
            // Standard Error: 8_919
            .saturating_add(Weight::from_ref_time(1_278_293).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_795 nanoseconds.
        Weight::from_ref_time(2_858_000)
            // Standard Error: 8_249
            .saturating_add(Weight::from_ref_time(1_422_063).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_810 nanoseconds.
        Weight::from_ref_time(3_000_000)
            // Standard Error: 7_603
            .saturating_add(Weight::from_ref_time(1_084_391).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_776 nanoseconds.
        Weight::from_ref_time(2_858_000)
            // Standard Error: 7_815
            .saturating_add(Weight::from_ref_time(1_224_549).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_813 nanoseconds.
        Weight::from_ref_time(2_886_000)
            // Standard Error: 7_306
            .saturating_add(Weight::from_ref_time(1_075_976).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_759 nanoseconds.
        Weight::from_ref_time(2_887_000)
            // Standard Error: 8_561
            .saturating_add(Weight::from_ref_time(1_228_163).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_930 nanoseconds.
        Weight::from_ref_time(2_981_000)
            // Standard Error: 8_185
            .saturating_add(Weight::from_ref_time(1_093_112).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_760 nanoseconds.
        Weight::from_ref_time(2_830_000)
            // Standard Error: 8_423
            .saturating_add(Weight::from_ref_time(1_255_913).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_925 nanoseconds.
        Weight::from_ref_time(2_964_000)
            // Standard Error: 7_803
            .saturating_add(Weight::from_ref_time(1_065_004).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_751 nanoseconds.
        Weight::from_ref_time(2_898_000)
            // Standard Error: 8_463
            .saturating_add(Weight::from_ref_time(1_225_754).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_876 nanoseconds.
        Weight::from_ref_time(2_956_000)
            // Standard Error: 8_576
            .saturating_add(Weight::from_ref_time(1_094_833).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_777 nanoseconds.
        Weight::from_ref_time(2_860_000)
            // Standard Error: 7_551
            .saturating_add(Weight::from_ref_time(1_216_846).saturating_mul(r.into()))
    }
}
