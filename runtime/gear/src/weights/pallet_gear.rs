// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear-node benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn allocation_cost() -> Weight;
	fn grow_cost() -> Weight;
	fn initial_cost() -> Weight;
	fn load_cost() -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn gas(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_msg_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_no_more(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		T::DbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		T::DbWeight::get().reads(1 as Weight)
	}
    fn claim_value() -> Weight {
        (89_940_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(8 as Weight))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
    }
    fn upload_code(c: u32, ) -> Weight {
        (9_635_000 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    fn create_program(s: u32, ) -> Weight {
        (21_704_000 as Weight)
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(8 as Weight))
    }
    fn upload_program(c: u32, s: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((52_000 as Weight).saturating_mul(c as Weight))
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(11 as Weight))
    }
    fn send_message(p: u32, ) -> Weight {
        (71_496_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(8 as Weight))
    }
    fn send_reply(p: u32, ) -> Weight {
        (113_111_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(14 as Weight))
            .saturating_add(T::DbWeight::get().writes(11 as Weight))
    }
    fn initial_allocation(_q: u32, ) -> Weight {
        (179_786_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(25 as Weight))
            .saturating_add(T::DbWeight::get().writes(23 as Weight))
    }
    fn alloc_in_handle(q: u32, ) -> Weight {
        (282_825_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((2_000 as Weight).saturating_mul(q as Weight))
            .saturating_add(T::DbWeight::get().reads(26 as Weight))
            .saturating_add(T::DbWeight::get().writes(24 as Weight))
    }
    fn reinstrument(c: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((52_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn alloc(r: u32, ) -> Weight {
        (91_699_000 as Weight)
            // Standard Error: 130_000
            .saturating_add((168_094_000 as Weight).saturating_mul(r as Weight))
    }
    fn gas(r: u32, ) -> Weight {
        (81_326_000 as Weight)
            // Standard Error: 66_000
            .saturating_add((59_681_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_gas_available(r: u32, ) -> Weight {
        (82_126_000 as Weight)
            // Standard Error: 61_000
            .saturating_add((57_980_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_msg_id(r: u32, ) -> Weight {
        (114_196_000 as Weight)
            // Standard Error: 95_000
            .saturating_add((71_743_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_origin(r: u32, ) -> Weight {
        (112_310_000 as Weight)
            // Standard Error: 111_000
            .saturating_add((72_743_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_program_id(r: u32, ) -> Weight {
        (114_164_000 as Weight)
            // Standard Error: 94_000
            .saturating_add((72_222_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_source(r: u32, ) -> Weight {
        (112_792_000 as Weight)
            // Standard Error: 84_000
            .saturating_add((72_033_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_value(r: u32, ) -> Weight {
        (113_477_000 as Weight)
            // Standard Error: 116_000
            .saturating_add((78_108_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_value_available(r: u32, ) -> Weight {
        (113_533_000 as Weight)
            // Standard Error: 93_000
            .saturating_add((78_049_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_size(r: u32, ) -> Weight {
        (84_059_000 as Weight)
            // Standard Error: 51_000
            .saturating_add((49_930_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read(r: u32, ) -> Weight {
        (96_895_000 as Weight)
            // Standard Error: 64_000
            .saturating_add((74_384_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read_per_kb(n: u32, ) -> Weight {
        (190_563_000 as Weight)
            // Standard Error: 18_000
            .saturating_add((6_825_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn gr_block_height(r: u32, ) -> Weight {
        (83_364_000 as Weight)
            // Standard Error: 51_000
            .saturating_add((50_199_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_block_timestamp(r: u32, ) -> Weight {
        (83_767_000 as Weight)
            // Standard Error: 119_000
            .saturating_add((57_856_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_init(r: u32, ) -> Weight {
        (101_048_000 as Weight)
            // Standard Error: 85_000
            .saturating_add((87_775_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push(r: u32, ) -> Weight {
        (97_676_000 as Weight)
            // Standard Error: 288_000
            .saturating_add((178_312_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        (293_400_000 as Weight)
            // Standard Error: 90_000
            .saturating_add((50_558_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn gr_send_commit(r: u32, ) -> Weight {
        (122_434_000 as Weight)
            // Standard Error: 137_000
            .saturating_add((51_681_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        (121_985_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((1_188_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn gr_reply_commit(r: u32, ) -> Weight {
        (118_143_000 as Weight)
            // Standard Error: 137_000
            .saturating_add((102_277_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        (224_732_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((73_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
    }
    fn gr_reply_push(r: u32, ) -> Weight {
        (98_813_000 as Weight)
            // Standard Error: 78_000
            .saturating_add((78_086_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        (175_724_000 as Weight)
            // Standard Error: 42_000
            .saturating_add((51_433_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_reply_to(r: u32, ) -> Weight {
        (103_611_000 as Weight)
            // Standard Error: 90_000
            .saturating_add((72_645_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
    }
    fn gr_debug(r: u32, ) -> Weight {
        (80_926_000 as Weight)
            // Standard Error: 140_000
            .saturating_add((70_521_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit_code(r: u32, ) -> Weight {
        (82_378_000 as Weight)
            // Standard Error: 104_000
            .saturating_add((50_897_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit(r: u32, ) -> Weight {
        (89_041_000 as Weight)
            // Standard Error: 325_000
            .saturating_add((25_822_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_leave(r: u32, ) -> Weight {
        (77_306_000 as Weight)
            // Standard Error: 462_000
            .saturating_add((12_852_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait(r: u32, ) -> Weight {
        (76_266_000 as Weight)
            // Standard Error: 207_000
            .saturating_add((14_466_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait_for(r: u32, ) -> Weight {
        (77_269_000 as Weight)
            // Standard Error: 158_000
            .saturating_add((32_319_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wait_no_more(r: u32, ) -> Weight {
        (77_034_000 as Weight)
            // Standard Error: 262_000
            .saturating_add((32_207_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wake(r: u32, ) -> Weight {
        (112_022_000 as Weight)
            // Standard Error: 206_000
            .saturating_add((112_688_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        (91_130_000 as Weight)
            // Standard Error: 260_000
            .saturating_add((46_117_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        (142_477_000 as Weight)
            // Standard Error: 8_000
            .saturating_add((1_183_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        (2_875_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64load(r: u32, ) -> Weight {
        (23_192_000 as Weight)
            // Standard Error: 6_000
            .saturating_add((185_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64store(r: u32, ) -> Weight {
        (34_883_000 as Weight)
            // Standard Error: 12_000
            .saturating_add((409_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_select(r: u32, ) -> Weight {
        (2_970_000 as Weight)
            // Standard Error: 0
            .saturating_add((610_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_if(r: u32, ) -> Weight {
        (2_992_000 as Weight)
            // Standard Error: 0
            .saturating_add((616_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br(r: u32, ) -> Weight {
        (3_083_000 as Weight)
            // Standard Error: 0
            .saturating_add((478_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_if(r: u32, ) -> Weight {
        (3_064_000 as Weight)
            // Standard Error: 0
            .saturating_add((522_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table(r: u32, ) -> Weight {
        (3_603_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_567_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        (4_232_000 as Weight)
            // Standard Error: 0
            .saturating_add((7_000 as Weight).saturating_mul(e as Weight))
    }
    fn instr_call(r: u32, ) -> Weight {
        (3_321_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((641_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect(r: u32, ) -> Weight {
        (3_918_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_477_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        (4_699_000 as Weight)
            // Standard Error: 0
            .saturating_add((79_000 as Weight).saturating_mul(p as Weight))
    }
    fn instr_local_get(r: u32, ) -> Weight {
        (3_087_000 as Weight)
            // Standard Error: 0
            .saturating_add((23_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_set(r: u32, ) -> Weight {
        (3_087_000 as Weight)
            // Standard Error: 0
            .saturating_add((53_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_tee(r: u32, ) -> Weight {
        (3_122_000 as Weight)
            // Standard Error: 0
            .saturating_add((53_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_get(r: u32, ) -> Weight {
        (13_180_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((74_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_set(r: u32, ) -> Weight {
        (13_756_000 as Weight)
            // Standard Error: 0
            .saturating_add((84_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_memory_current(r: u32, ) -> Weight {
        (7_898_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((1_341_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64clz(r: u32, ) -> Weight {
        (3_064_000 as Weight)
            // Standard Error: 0
            .saturating_add((762_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ctz(r: u32, ) -> Weight {
        (3_107_000 as Weight)
            // Standard Error: 0
            .saturating_add((730_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64popcnt(r: u32, ) -> Weight {
        (2_954_000 as Weight)
            // Standard Error: 0
            .saturating_add((44_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eqz(r: u32, ) -> Weight {
        (2_868_000 as Weight)
            // Standard Error: 0
            .saturating_add((106_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        (2_968_000 as Weight)
            // Standard Error: 0
            .saturating_add((30_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendui32(r: u32, ) -> Weight {
        (2_947_000 as Weight)
            // Standard Error: 0
            .saturating_add((19_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        (2_984_000 as Weight)
            // Standard Error: 0
            .saturating_add((19_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eq(r: u32, ) -> Weight {
        (2_858_000 as Weight)
            // Standard Error: 0
            .saturating_add((110_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ne(r: u32, ) -> Weight {
        (2_887_000 as Weight)
            // Standard Error: 0
            .saturating_add((108_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64lts(r: u32, ) -> Weight {
        (2_918_000 as Weight)
            // Standard Error: 0
            .saturating_add((107_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ltu(r: u32, ) -> Weight {
        (2_861_000 as Weight)
            // Standard Error: 0
            .saturating_add((108_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gts(r: u32, ) -> Weight {
        (2_825_000 as Weight)
            // Standard Error: 0
            .saturating_add((111_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gtu(r: u32, ) -> Weight {
        (2_830_000 as Weight)
            // Standard Error: 0
            .saturating_add((112_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64les(r: u32, ) -> Weight {
        (2_882_000 as Weight)
            // Standard Error: 0
            .saturating_add((109_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64leu(r: u32, ) -> Weight {
        (2_894_000 as Weight)
            // Standard Error: 0
            .saturating_add((107_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ges(r: u32, ) -> Weight {
        (2_849_000 as Weight)
            // Standard Error: 0
            .saturating_add((107_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64geu(r: u32, ) -> Weight {
        (2_889_000 as Weight)
            // Standard Error: 0
            .saturating_add((107_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64add(r: u32, ) -> Weight {
        (2_908_000 as Weight)
            // Standard Error: 0
            .saturating_add((87_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64sub(r: u32, ) -> Weight {
        (2_949_000 as Weight)
            // Standard Error: 0
            .saturating_add((86_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64mul(r: u32, ) -> Weight {
        (2_910_000 as Weight)
            // Standard Error: 0
            .saturating_add((117_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divs(r: u32, ) -> Weight {
        (3_118_000 as Weight)
            // Standard Error: 0
            .saturating_add((449_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divu(r: u32, ) -> Weight {
        (3_131_000 as Weight)
            // Standard Error: 0
            .saturating_add((445_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rems(r: u32, ) -> Weight {
        (3_489_000 as Weight)
            // Standard Error: 0
            .saturating_add((813_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64remu(r: u32, ) -> Weight {
        (3_165_000 as Weight)
            // Standard Error: 0
            .saturating_add((444_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64and(r: u32, ) -> Weight {
        (2_927_000 as Weight)
            // Standard Error: 0
            .saturating_add((86_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64or(r: u32, ) -> Weight {
        (2_964_000 as Weight)
            // Standard Error: 0
            .saturating_add((84_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64xor(r: u32, ) -> Weight {
        (2_948_000 as Weight)
            // Standard Error: 0
            .saturating_add((87_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shl(r: u32, ) -> Weight {
        (2_953_000 as Weight)
            // Standard Error: 0
            .saturating_add((76_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shrs(r: u32, ) -> Weight {
        (2_941_000 as Weight)
            // Standard Error: 0
            .saturating_add((78_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shru(r: u32, ) -> Weight {
        (2_938_000 as Weight)
            // Standard Error: 0
            .saturating_add((78_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotl(r: u32, ) -> Weight {
        (2_975_000 as Weight)
            // Standard Error: 0
            .saturating_add((78_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotr(r: u32, ) -> Weight {
        (2_909_000 as Weight)
            // Standard Error: 0
            .saturating_add((79_000 as Weight).saturating_mul(r as Weight))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		RocksDbWeight::get().reads(1 as Weight)
	}
    fn claim_value() -> Weight {
        (89_940_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(8 as Weight))
            .saturating_add(RocksDbWeight::get().writes(6 as Weight))
    }
    fn upload_code(c: u32, ) -> Weight {
        (9_635_000 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
    }
    fn create_program(s: u32, ) -> Weight {
        (21_704_000 as Weight)
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(8 as Weight))
    }
    fn upload_program(c: u32, s: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((52_000 as Weight).saturating_mul(c as Weight))
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(11 as Weight))
    }
    fn send_message(p: u32, ) -> Weight {
        (71_496_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(8 as Weight))
    }
    fn send_reply(p: u32, ) -> Weight {
        (113_111_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(RocksDbWeight::get().reads(14 as Weight))
            .saturating_add(RocksDbWeight::get().writes(11 as Weight))
    }
    fn initial_allocation(_q: u32, ) -> Weight {
        (179_786_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(25 as Weight))
            .saturating_add(RocksDbWeight::get().writes(23 as Weight))
    }
    fn alloc_in_handle(q: u32, ) -> Weight {
        (282_825_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((2_000 as Weight).saturating_mul(q as Weight))
            .saturating_add(RocksDbWeight::get().reads(26 as Weight))
            .saturating_add(RocksDbWeight::get().writes(24 as Weight))
    }
    fn reinstrument(c: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((52_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
    }
    fn alloc(r: u32, ) -> Weight {
        (91_699_000 as Weight)
            // Standard Error: 130_000
            .saturating_add((168_094_000 as Weight).saturating_mul(r as Weight))
    }
    fn gas(r: u32, ) -> Weight {
        (81_326_000 as Weight)
            // Standard Error: 66_000
            .saturating_add((59_681_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_gas_available(r: u32, ) -> Weight {
        (82_126_000 as Weight)
            // Standard Error: 61_000
            .saturating_add((57_980_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_msg_id(r: u32, ) -> Weight {
        (114_196_000 as Weight)
            // Standard Error: 95_000
            .saturating_add((71_743_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_origin(r: u32, ) -> Weight {
        (112_310_000 as Weight)
            // Standard Error: 111_000
            .saturating_add((72_743_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_program_id(r: u32, ) -> Weight {
        (114_164_000 as Weight)
            // Standard Error: 94_000
            .saturating_add((72_222_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_source(r: u32, ) -> Weight {
        (112_792_000 as Weight)
            // Standard Error: 84_000
            .saturating_add((72_033_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_value(r: u32, ) -> Weight {
        (113_477_000 as Weight)
            // Standard Error: 116_000
            .saturating_add((78_108_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_value_available(r: u32, ) -> Weight {
        (113_533_000 as Weight)
            // Standard Error: 93_000
            .saturating_add((78_049_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_size(r: u32, ) -> Weight {
        (84_059_000 as Weight)
            // Standard Error: 51_000
            .saturating_add((49_930_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read(r: u32, ) -> Weight {
        (96_895_000 as Weight)
            // Standard Error: 64_000
            .saturating_add((74_384_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read_per_kb(n: u32, ) -> Weight {
        (190_563_000 as Weight)
            // Standard Error: 18_000
            .saturating_add((6_825_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn gr_block_height(r: u32, ) -> Weight {
        (83_364_000 as Weight)
            // Standard Error: 51_000
            .saturating_add((50_199_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_block_timestamp(r: u32, ) -> Weight {
        (83_767_000 as Weight)
            // Standard Error: 119_000
            .saturating_add((57_856_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_init(r: u32, ) -> Weight {
        (101_048_000 as Weight)
            // Standard Error: 85_000
            .saturating_add((87_775_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push(r: u32, ) -> Weight {
        (97_676_000 as Weight)
            // Standard Error: 288_000
            .saturating_add((178_312_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        (293_400_000 as Weight)
            // Standard Error: 90_000
            .saturating_add((50_558_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn gr_send_commit(r: u32, ) -> Weight {
        (122_434_000 as Weight)
            // Standard Error: 137_000
            .saturating_add((51_681_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        (121_985_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((1_188_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn gr_reply_commit(r: u32, ) -> Weight {
        (118_143_000 as Weight)
            // Standard Error: 137_000
            .saturating_add((102_277_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        (224_732_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((73_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(4 as Weight))
    }
    fn gr_reply_push(r: u32, ) -> Weight {
        (98_813_000 as Weight)
            // Standard Error: 78_000
            .saturating_add((78_086_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        (175_724_000 as Weight)
            // Standard Error: 42_000
            .saturating_add((51_433_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_reply_to(r: u32, ) -> Weight {
        (103_611_000 as Weight)
            // Standard Error: 90_000
            .saturating_add((72_645_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads(3 as Weight))
    }
    fn gr_debug(r: u32, ) -> Weight {
        (80_926_000 as Weight)
            // Standard Error: 140_000
            .saturating_add((70_521_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit_code(r: u32, ) -> Weight {
        (82_378_000 as Weight)
            // Standard Error: 104_000
            .saturating_add((50_897_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit(r: u32, ) -> Weight {
        (89_041_000 as Weight)
            // Standard Error: 325_000
            .saturating_add((25_822_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_leave(r: u32, ) -> Weight {
        (77_306_000 as Weight)
            // Standard Error: 462_000
            .saturating_add((12_852_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait(r: u32, ) -> Weight {
        (76_266_000 as Weight)
            // Standard Error: 207_000
            .saturating_add((14_466_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait_for(r: u32, ) -> Weight {
        (77_269_000 as Weight)
            // Standard Error: 158_000
            .saturating_add((32_319_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wait_no_more(r: u32, ) -> Weight {
        (77_034_000 as Weight)
            // Standard Error: 262_000
            .saturating_add((32_207_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_wake(r: u32, ) -> Weight {
        (112_022_000 as Weight)
            // Standard Error: 206_000
            .saturating_add((112_688_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        (91_130_000 as Weight)
            // Standard Error: 260_000
            .saturating_add((46_117_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
    }
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        (142_477_000 as Weight)
            // Standard Error: 8_000
            .saturating_add((1_183_000 as Weight).saturating_mul(n as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        (2_875_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64load(r: u32, ) -> Weight {
        (23_192_000 as Weight)
            // Standard Error: 6_000
            .saturating_add((185_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64store(r: u32, ) -> Weight {
        (34_883_000 as Weight)
            // Standard Error: 12_000
            .saturating_add((409_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_select(r: u32, ) -> Weight {
        (2_970_000 as Weight)
            // Standard Error: 0
            .saturating_add((610_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_if(r: u32, ) -> Weight {
        (2_992_000 as Weight)
            // Standard Error: 0
            .saturating_add((616_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br(r: u32, ) -> Weight {
        (3_083_000 as Weight)
            // Standard Error: 0
            .saturating_add((478_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_if(r: u32, ) -> Weight {
        (3_064_000 as Weight)
            // Standard Error: 0
            .saturating_add((522_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table(r: u32, ) -> Weight {
        (3_603_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_567_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        (4_232_000 as Weight)
            // Standard Error: 0
            .saturating_add((7_000 as Weight).saturating_mul(e as Weight))
    }
    fn instr_call(r: u32, ) -> Weight {
        (3_321_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((641_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect(r: u32, ) -> Weight {
        (3_918_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_477_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        (4_699_000 as Weight)
            // Standard Error: 0
            .saturating_add((79_000 as Weight).saturating_mul(p as Weight))
    }
    fn instr_local_get(r: u32, ) -> Weight {
        (3_087_000 as Weight)
            // Standard Error: 0
            .saturating_add((23_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_set(r: u32, ) -> Weight {
        (3_087_000 as Weight)
            // Standard Error: 0
            .saturating_add((53_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_tee(r: u32, ) -> Weight {
        (3_122_000 as Weight)
            // Standard Error: 0
            .saturating_add((53_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_get(r: u32, ) -> Weight {
        (13_180_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((74_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_set(r: u32, ) -> Weight {
        (13_756_000 as Weight)
            // Standard Error: 0
            .saturating_add((84_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_memory_current(r: u32, ) -> Weight {
        (7_898_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((1_341_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64clz(r: u32, ) -> Weight {
        (3_064_000 as Weight)
            // Standard Error: 0
            .saturating_add((762_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ctz(r: u32, ) -> Weight {
        (3_107_000 as Weight)
            // Standard Error: 0
            .saturating_add((730_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64popcnt(r: u32, ) -> Weight {
        (2_954_000 as Weight)
            // Standard Error: 0
            .saturating_add((44_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eqz(r: u32, ) -> Weight {
        (2_868_000 as Weight)
            // Standard Error: 0
            .saturating_add((106_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        (2_968_000 as Weight)
            // Standard Error: 0
            .saturating_add((30_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendui32(r: u32, ) -> Weight {
        (2_947_000 as Weight)
            // Standard Error: 0
            .saturating_add((19_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        (2_984_000 as Weight)
            // Standard Error: 0
            .saturating_add((19_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eq(r: u32, ) -> Weight {
        (2_858_000 as Weight)
            // Standard Error: 0
            .saturating_add((110_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ne(r: u32, ) -> Weight {
        (2_887_000 as Weight)
            // Standard Error: 0
            .saturating_add((108_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64lts(r: u32, ) -> Weight {
        (2_918_000 as Weight)
            // Standard Error: 0
            .saturating_add((107_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ltu(r: u32, ) -> Weight {
        (2_861_000 as Weight)
            // Standard Error: 0
            .saturating_add((108_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gts(r: u32, ) -> Weight {
        (2_825_000 as Weight)
            // Standard Error: 0
            .saturating_add((111_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gtu(r: u32, ) -> Weight {
        (2_830_000 as Weight)
            // Standard Error: 0
            .saturating_add((112_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64les(r: u32, ) -> Weight {
        (2_882_000 as Weight)
            // Standard Error: 0
            .saturating_add((109_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64leu(r: u32, ) -> Weight {
        (2_894_000 as Weight)
            // Standard Error: 0
            .saturating_add((107_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ges(r: u32, ) -> Weight {
        (2_849_000 as Weight)
            // Standard Error: 0
            .saturating_add((107_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64geu(r: u32, ) -> Weight {
        (2_889_000 as Weight)
            // Standard Error: 0
            .saturating_add((107_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64add(r: u32, ) -> Weight {
        (2_908_000 as Weight)
            // Standard Error: 0
            .saturating_add((87_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64sub(r: u32, ) -> Weight {
        (2_949_000 as Weight)
            // Standard Error: 0
            .saturating_add((86_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64mul(r: u32, ) -> Weight {
        (2_910_000 as Weight)
            // Standard Error: 0
            .saturating_add((117_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divs(r: u32, ) -> Weight {
        (3_118_000 as Weight)
            // Standard Error: 0
            .saturating_add((449_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divu(r: u32, ) -> Weight {
        (3_131_000 as Weight)
            // Standard Error: 0
            .saturating_add((445_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rems(r: u32, ) -> Weight {
        (3_489_000 as Weight)
            // Standard Error: 0
            .saturating_add((813_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64remu(r: u32, ) -> Weight {
        (3_165_000 as Weight)
            // Standard Error: 0
            .saturating_add((444_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64and(r: u32, ) -> Weight {
        (2_927_000 as Weight)
            // Standard Error: 0
            .saturating_add((86_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64or(r: u32, ) -> Weight {
        (2_964_000 as Weight)
            // Standard Error: 0
            .saturating_add((84_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64xor(r: u32, ) -> Weight {
        (2_948_000 as Weight)
            // Standard Error: 0
            .saturating_add((87_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shl(r: u32, ) -> Weight {
        (2_953_000 as Weight)
            // Standard Error: 0
            .saturating_add((76_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shrs(r: u32, ) -> Weight {
        (2_941_000 as Weight)
            // Standard Error: 0
            .saturating_add((78_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shru(r: u32, ) -> Weight {
        (2_938_000 as Weight)
            // Standard Error: 0
            .saturating_add((78_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotl(r: u32, ) -> Weight {
        (2_975_000 as Weight)
            // Standard Error: 0
            .saturating_add((78_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotr(r: u32, ) -> Weight {
        (2_909_000 as Weight)
            // Standard Error: 0
            .saturating_add((79_000 as Weight).saturating_mul(r as Weight))
    }
}