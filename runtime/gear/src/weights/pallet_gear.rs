// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `epyc-runners-node.hetzner`, CPU: `AMD EPYC 7502P 32-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear-node benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn instantiate_module(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn gas(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_msg_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 256902]`.
    fn instantiate_module(c: u32, ) -> Weight {
        Weight::from_ref_time(57_625_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(1_504 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(106_002_000 as u64)
            .saturating_add(T::DbWeight::get().reads(8 as u64))
            .saturating_add(T::DbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(50_671_000 as u64)
            // Standard Error: 19
            .saturating_add(Weight::from_ref_time(49_004 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(71_273_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(2_566 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_655_304_000 as u64)
            // Standard Error: 475
            .saturating_add(Weight::from_ref_time(23_180 as u64).saturating_mul(c as u64))
            // Standard Error: 29
            .saturating_add(Weight::from_ref_time(991 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(78_607_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(923 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(129_139_000 as u64)
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(1_083 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(14 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(187_816_000 as u64)
            // Standard Error: 2_293
            .saturating_add(Weight::from_ref_time(6_030 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(25 as u64))
            .saturating_add(T::DbWeight::get().writes(23 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(297_936_000 as u64)
            // Standard Error: 595
            .saturating_add(Weight::from_ref_time(10_265 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(26 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(32_505_000 as u64)
            // Standard Error: 24
            .saturating_add(Weight::from_ref_time(50_858 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(80_371_000 as u64)
            // Standard Error: 47_126
            .saturating_add(Weight::from_ref_time(183_046_567 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gas(r: u32, ) -> Weight {
        Weight::from_ref_time(80_631_000 as u64)
            // Standard Error: 19_088
            .saturating_add(Weight::from_ref_time(66_345_457 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(79_790_000 as u64)
            // Standard Error: 37_756
            .saturating_add(Weight::from_ref_time(64_683_326 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_msg_id(r: u32, ) -> Weight {
        Weight::from_ref_time(94_880_000 as u64)
            // Standard Error: 63_570
            .saturating_add(Weight::from_ref_time(79_113_302 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(94_529_000 as u64)
            // Standard Error: 61_651
            .saturating_add(Weight::from_ref_time(78_798_965 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(94_700_000 as u64)
            // Standard Error: 61_252
            .saturating_add(Weight::from_ref_time(79_820_233 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(94_669_000 as u64)
            // Standard Error: 64_029
            .saturating_add(Weight::from_ref_time(79_625_334 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(93_918_000 as u64)
            // Standard Error: 59_502
            .saturating_add(Weight::from_ref_time(86_655_530 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(93_718_000 as u64)
            // Standard Error: 62_034
            .saturating_add(Weight::from_ref_time(86_116_521 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(78_617_000 as u64)
            // Standard Error: 22_738
            .saturating_add(Weight::from_ref_time(55_559_343 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(93_948_000 as u64)
            // Standard Error: 21_831
            .saturating_add(Weight::from_ref_time(81_018_952 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(180_181_000 as u64)
            // Standard Error: 15_725
            .saturating_add(Weight::from_ref_time(7_142_268 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(78_317_000 as u64)
            // Standard Error: 23_788
            .saturating_add(Weight::from_ref_time(54_930_492 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(78_898_000 as u64)
            // Standard Error: 30_569
            .saturating_add(Weight::from_ref_time(64_141_402 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(79_409_000 as u64)
            // Standard Error: 70_217
            .saturating_add(Weight::from_ref_time(95_263_582 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(81_573_000 as u64)
            // Standard Error: 95_157
            .saturating_add(Weight::from_ref_time(186_644_577 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(301_193_000 as u64)
            // Standard Error: 23_972
            .saturating_add(Weight::from_ref_time(50_417_249 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(94_840_000 as u64)
            // Standard Error: 41_798
            .saturating_add(Weight::from_ref_time(2_475_800 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(113_337_000 as u64)
            // Standard Error: 2_108
            .saturating_add(Weight::from_ref_time(45_575 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(94_389_000 as u64)
            // Standard Error: 74_573
            .saturating_add(Weight::from_ref_time(123_812_480 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(251_463_000 as u64)
            // Standard Error: 6_460
            .saturating_add(Weight::from_ref_time(140_894 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(94_469_000 as u64)
            // Standard Error: 26_887
            .saturating_add(Weight::from_ref_time(84_877_750 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(184_099_000 as u64)
            // Standard Error: 22_230
            .saturating_add(Weight::from_ref_time(51_001_567 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(79_109_000 as u64)
            // Standard Error: 72_208
            .saturating_add(Weight::from_ref_time(80_768_639 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(78_588_000 as u64)
            // Standard Error: 29_225
            .saturating_add(Weight::from_ref_time(77_157_115 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(79_008_000 as u64)
            // Standard Error: 40_306
            .saturating_add(Weight::from_ref_time(55_621_716 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(93_978_000 as u64)
            // Standard Error: 211_340
            .saturating_add(Weight::from_ref_time(28_006_000 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(78_036_000 as u64)
            // Standard Error: 215_025
            .saturating_add(Weight::from_ref_time(15_032_200 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(78_037_000 as u64)
            // Standard Error: 184_520
            .saturating_add(Weight::from_ref_time(15_461_200 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(78_708_000 as u64)
            // Standard Error: 198_712
            .saturating_add(Weight::from_ref_time(37_908_599 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(78_657_000 as u64)
            // Standard Error: 213_935
            .saturating_add(Weight::from_ref_time(37_265_999 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(78_697_000 as u64)
            // Standard Error: 114_155
            .saturating_add(Weight::from_ref_time(14_810_224 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(95_792_000 as u64)
            // Standard Error: 209_626
            .saturating_add(Weight::from_ref_time(19_052_799 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(121_804_000 as u64)
            // Standard Error: 1_037
            .saturating_add(Weight::from_ref_time(24_159 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_197_000 as u64)
            // Standard Error: 192
            .saturating_add(Weight::from_ref_time(5_521 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(5_000_000 as u64)
            // Standard Error: 15_903
            .saturating_add(Weight::from_ref_time(773_146 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(4_930_000 as u64)
            // Standard Error: 25_873
            .saturating_add(Weight::from_ref_time(1_328_783 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_186_000 as u64)
            // Standard Error: 258
            .saturating_add(Weight::from_ref_time(613_496 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_206_000 as u64)
            // Standard Error: 256
            .saturating_add(Weight::from_ref_time(621_355 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_236_000 as u64)
            // Standard Error: 231
            .saturating_add(Weight::from_ref_time(483_263 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_197_000 as u64)
            // Standard Error: 242
            .saturating_add(Weight::from_ref_time(529_101 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 744
            .saturating_add(Weight::from_ref_time(1_593_991 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(4_468_000 as u64)
            // Standard Error: 34
            .saturating_add(Weight::from_ref_time(8_215 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_307_000 as u64)
            // Standard Error: 574
            .saturating_add(Weight::from_ref_time(652_960 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_848_000 as u64)
            // Standard Error: 579
            .saturating_add(Weight::from_ref_time(1_495_241 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_371_000 as u64)
            // Standard Error: 185
            .saturating_add(Weight::from_ref_time(74_510 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 232
            .saturating_add(Weight::from_ref_time(33_144 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_367_000 as u64)
            // Standard Error: 260
            .saturating_add(Weight::from_ref_time(57_913 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_336_000 as u64)
            // Standard Error: 300
            .saturating_add(Weight::from_ref_time(56_193 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(14_760_000 as u64)
            // Standard Error: 491
            .saturating_add(Weight::from_ref_time(47_437 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(14_359_000 as u64)
            // Standard Error: 503
            .saturating_add(Weight::from_ref_time(78_443 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(4_929_000 as u64)
            // Standard Error: 1_179
            .saturating_add(Weight::from_ref_time(1_238_003 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 511
            .saturating_add(Weight::from_ref_time(768_281 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_146_000 as u64)
            // Standard Error: 537
            .saturating_add(Weight::from_ref_time(739_620 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 318
            .saturating_add(Weight::from_ref_time(49_834 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 387
            .saturating_add(Weight::from_ref_time(105_176 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_197_000 as u64)
            // Standard Error: 267
            .saturating_add(Weight::from_ref_time(35_530 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 203
            .saturating_add(Weight::from_ref_time(24_762 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 232
            .saturating_add(Weight::from_ref_time(26_933 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_176_000 as u64)
            // Standard Error: 348
            .saturating_add(Weight::from_ref_time(106_057 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_206_000 as u64)
            // Standard Error: 407
            .saturating_add(Weight::from_ref_time(106_694 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 403
            .saturating_add(Weight::from_ref_time(106_258 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 344
            .saturating_add(Weight::from_ref_time(104_941 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_196_000 as u64)
            // Standard Error: 388
            .saturating_add(Weight::from_ref_time(105_640 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_167_000 as u64)
            // Standard Error: 399
            .saturating_add(Weight::from_ref_time(104_825 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(3_167_000 as u64)
            // Standard Error: 384
            .saturating_add(Weight::from_ref_time(106_949 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_157_000 as u64)
            // Standard Error: 403
            .saturating_add(Weight::from_ref_time(106_504 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_157_000 as u64)
            // Standard Error: 401
            .saturating_add(Weight::from_ref_time(106_489 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 452
            .saturating_add(Weight::from_ref_time(105_865 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 371
            .saturating_add(Weight::from_ref_time(89_123 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_196_000 as u64)
            // Standard Error: 326
            .saturating_add(Weight::from_ref_time(87_925 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 409
            .saturating_add(Weight::from_ref_time(116_916 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_146_000 as u64)
            // Standard Error: 433
            .saturating_add(Weight::from_ref_time(458_757 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_106_000 as u64)
            // Standard Error: 447
            .saturating_add(Weight::from_ref_time(458_067 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_106_000 as u64)
            // Standard Error: 641
            .saturating_add(Weight::from_ref_time(831_224 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_106_000 as u64)
            // Standard Error: 481
            .saturating_add(Weight::from_ref_time(457_180 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_186_000 as u64)
            // Standard Error: 376
            .saturating_add(Weight::from_ref_time(90_562 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_286_000 as u64)
            // Standard Error: 327
            .saturating_add(Weight::from_ref_time(86_266 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 309
            .saturating_add(Weight::from_ref_time(87_927 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_176_000 as u64)
            // Standard Error: 401
            .saturating_add(Weight::from_ref_time(85_131 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 346
            .saturating_add(Weight::from_ref_time(82_642 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_236_000 as u64)
            // Standard Error: 311
            .saturating_add(Weight::from_ref_time(80_145 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 320
            .saturating_add(Weight::from_ref_time(80_006 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 321
            .saturating_add(Weight::from_ref_time(82_131 as u64).saturating_mul(r as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// The range of component `c` is `[0, 256902]`.
    fn instantiate_module(c: u32, ) -> Weight {
        Weight::from_ref_time(57_625_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(1_504 as u64).saturating_mul(c as u64))
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(106_002_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(8 as u64))
            .saturating_add(RocksDbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(50_671_000 as u64)
            // Standard Error: 19
            .saturating_add(Weight::from_ref_time(49_004 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(71_273_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(2_566 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(10_655_304_000 as u64)
            // Standard Error: 475
            .saturating_add(Weight::from_ref_time(23_180 as u64).saturating_mul(c as u64))
            // Standard Error: 29
            .saturating_add(Weight::from_ref_time(991 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(78_607_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(923 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(129_139_000 as u64)
            // Standard Error: 9
            .saturating_add(Weight::from_ref_time(1_083 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(14 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(187_816_000 as u64)
            // Standard Error: 2_293
            .saturating_add(Weight::from_ref_time(6_030 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(25 as u64))
            .saturating_add(RocksDbWeight::get().writes(23 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(297_936_000 as u64)
            // Standard Error: 595
            .saturating_add(Weight::from_ref_time(10_265 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(26 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(32_505_000 as u64)
            // Standard Error: 24
            .saturating_add(Weight::from_ref_time(50_858 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(80_371_000 as u64)
            // Standard Error: 47_126
            .saturating_add(Weight::from_ref_time(183_046_567 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gas(r: u32, ) -> Weight {
        Weight::from_ref_time(80_631_000 as u64)
            // Standard Error: 19_088
            .saturating_add(Weight::from_ref_time(66_345_457 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(79_790_000 as u64)
            // Standard Error: 37_756
            .saturating_add(Weight::from_ref_time(64_683_326 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_msg_id(r: u32, ) -> Weight {
        Weight::from_ref_time(94_880_000 as u64)
            // Standard Error: 63_570
            .saturating_add(Weight::from_ref_time(79_113_302 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(94_529_000 as u64)
            // Standard Error: 61_651
            .saturating_add(Weight::from_ref_time(78_798_965 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(94_700_000 as u64)
            // Standard Error: 61_252
            .saturating_add(Weight::from_ref_time(79_820_233 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(94_669_000 as u64)
            // Standard Error: 64_029
            .saturating_add(Weight::from_ref_time(79_625_334 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(93_918_000 as u64)
            // Standard Error: 59_502
            .saturating_add(Weight::from_ref_time(86_655_530 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(93_718_000 as u64)
            // Standard Error: 62_034
            .saturating_add(Weight::from_ref_time(86_116_521 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(78_617_000 as u64)
            // Standard Error: 22_738
            .saturating_add(Weight::from_ref_time(55_559_343 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(93_948_000 as u64)
            // Standard Error: 21_831
            .saturating_add(Weight::from_ref_time(81_018_952 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(180_181_000 as u64)
            // Standard Error: 15_725
            .saturating_add(Weight::from_ref_time(7_142_268 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(78_317_000 as u64)
            // Standard Error: 23_788
            .saturating_add(Weight::from_ref_time(54_930_492 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(78_898_000 as u64)
            // Standard Error: 30_569
            .saturating_add(Weight::from_ref_time(64_141_402 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(79_409_000 as u64)
            // Standard Error: 70_217
            .saturating_add(Weight::from_ref_time(95_263_582 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(81_573_000 as u64)
            // Standard Error: 95_157
            .saturating_add(Weight::from_ref_time(186_644_577 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(301_193_000 as u64)
            // Standard Error: 23_972
            .saturating_add(Weight::from_ref_time(50_417_249 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(94_840_000 as u64)
            // Standard Error: 41_798
            .saturating_add(Weight::from_ref_time(2_475_800 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(113_337_000 as u64)
            // Standard Error: 2_108
            .saturating_add(Weight::from_ref_time(45_575 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(94_389_000 as u64)
            // Standard Error: 74_573
            .saturating_add(Weight::from_ref_time(123_812_480 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(251_463_000 as u64)
            // Standard Error: 6_460
            .saturating_add(Weight::from_ref_time(140_894 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(94_469_000 as u64)
            // Standard Error: 26_887
            .saturating_add(Weight::from_ref_time(84_877_750 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(184_099_000 as u64)
            // Standard Error: 22_230
            .saturating_add(Weight::from_ref_time(51_001_567 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(79_109_000 as u64)
            // Standard Error: 72_208
            .saturating_add(Weight::from_ref_time(80_768_639 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(78_588_000 as u64)
            // Standard Error: 29_225
            .saturating_add(Weight::from_ref_time(77_157_115 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(79_008_000 as u64)
            // Standard Error: 40_306
            .saturating_add(Weight::from_ref_time(55_621_716 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(93_978_000 as u64)
            // Standard Error: 211_340
            .saturating_add(Weight::from_ref_time(28_006_000 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(78_036_000 as u64)
            // Standard Error: 215_025
            .saturating_add(Weight::from_ref_time(15_032_200 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(78_037_000 as u64)
            // Standard Error: 184_520
            .saturating_add(Weight::from_ref_time(15_461_200 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(78_708_000 as u64)
            // Standard Error: 198_712
            .saturating_add(Weight::from_ref_time(37_908_599 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(78_657_000 as u64)
            // Standard Error: 213_935
            .saturating_add(Weight::from_ref_time(37_265_999 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(78_697_000 as u64)
            // Standard Error: 114_155
            .saturating_add(Weight::from_ref_time(14_810_224 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(95_792_000 as u64)
            // Standard Error: 209_626
            .saturating_add(Weight::from_ref_time(19_052_799 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(121_804_000 as u64)
            // Standard Error: 1_037
            .saturating_add(Weight::from_ref_time(24_159 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_197_000 as u64)
            // Standard Error: 192
            .saturating_add(Weight::from_ref_time(5_521 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(5_000_000 as u64)
            // Standard Error: 15_903
            .saturating_add(Weight::from_ref_time(773_146 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(4_930_000 as u64)
            // Standard Error: 25_873
            .saturating_add(Weight::from_ref_time(1_328_783 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_186_000 as u64)
            // Standard Error: 258
            .saturating_add(Weight::from_ref_time(613_496 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_206_000 as u64)
            // Standard Error: 256
            .saturating_add(Weight::from_ref_time(621_355 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_236_000 as u64)
            // Standard Error: 231
            .saturating_add(Weight::from_ref_time(483_263 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_197_000 as u64)
            // Standard Error: 242
            .saturating_add(Weight::from_ref_time(529_101 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 744
            .saturating_add(Weight::from_ref_time(1_593_991 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(4_468_000 as u64)
            // Standard Error: 34
            .saturating_add(Weight::from_ref_time(8_215 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_307_000 as u64)
            // Standard Error: 574
            .saturating_add(Weight::from_ref_time(652_960 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(3_848_000 as u64)
            // Standard Error: 579
            .saturating_add(Weight::from_ref_time(1_495_241 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_371_000 as u64)
            // Standard Error: 185
            .saturating_add(Weight::from_ref_time(74_510 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_226_000 as u64)
            // Standard Error: 232
            .saturating_add(Weight::from_ref_time(33_144 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_367_000 as u64)
            // Standard Error: 260
            .saturating_add(Weight::from_ref_time(57_913 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_336_000 as u64)
            // Standard Error: 300
            .saturating_add(Weight::from_ref_time(56_193 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(14_760_000 as u64)
            // Standard Error: 491
            .saturating_add(Weight::from_ref_time(47_437 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(14_359_000 as u64)
            // Standard Error: 503
            .saturating_add(Weight::from_ref_time(78_443 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(4_929_000 as u64)
            // Standard Error: 1_179
            .saturating_add(Weight::from_ref_time(1_238_003 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_227_000 as u64)
            // Standard Error: 511
            .saturating_add(Weight::from_ref_time(768_281 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_146_000 as u64)
            // Standard Error: 537
            .saturating_add(Weight::from_ref_time(739_620 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 318
            .saturating_add(Weight::from_ref_time(49_834 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 387
            .saturating_add(Weight::from_ref_time(105_176 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_197_000 as u64)
            // Standard Error: 267
            .saturating_add(Weight::from_ref_time(35_530 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 203
            .saturating_add(Weight::from_ref_time(24_762 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_156_000 as u64)
            // Standard Error: 232
            .saturating_add(Weight::from_ref_time(26_933 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_176_000 as u64)
            // Standard Error: 348
            .saturating_add(Weight::from_ref_time(106_057 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_206_000 as u64)
            // Standard Error: 407
            .saturating_add(Weight::from_ref_time(106_694 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_216_000 as u64)
            // Standard Error: 403
            .saturating_add(Weight::from_ref_time(106_258 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 344
            .saturating_add(Weight::from_ref_time(104_941 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_196_000 as u64)
            // Standard Error: 388
            .saturating_add(Weight::from_ref_time(105_640 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_167_000 as u64)
            // Standard Error: 399
            .saturating_add(Weight::from_ref_time(104_825 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(3_167_000 as u64)
            // Standard Error: 384
            .saturating_add(Weight::from_ref_time(106_949 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_157_000 as u64)
            // Standard Error: 403
            .saturating_add(Weight::from_ref_time(106_504 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_157_000 as u64)
            // Standard Error: 401
            .saturating_add(Weight::from_ref_time(106_489 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 452
            .saturating_add(Weight::from_ref_time(105_865 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 371
            .saturating_add(Weight::from_ref_time(89_123 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_196_000 as u64)
            // Standard Error: 326
            .saturating_add(Weight::from_ref_time(87_925 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 409
            .saturating_add(Weight::from_ref_time(116_916 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_146_000 as u64)
            // Standard Error: 433
            .saturating_add(Weight::from_ref_time(458_757 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_106_000 as u64)
            // Standard Error: 447
            .saturating_add(Weight::from_ref_time(458_067 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_106_000 as u64)
            // Standard Error: 641
            .saturating_add(Weight::from_ref_time(831_224 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_106_000 as u64)
            // Standard Error: 481
            .saturating_add(Weight::from_ref_time(457_180 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_186_000 as u64)
            // Standard Error: 376
            .saturating_add(Weight::from_ref_time(90_562 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_286_000 as u64)
            // Standard Error: 327
            .saturating_add(Weight::from_ref_time(86_266 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 309
            .saturating_add(Weight::from_ref_time(87_927 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_176_000 as u64)
            // Standard Error: 401
            .saturating_add(Weight::from_ref_time(85_131 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_177_000 as u64)
            // Standard Error: 346
            .saturating_add(Weight::from_ref_time(82_642 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_236_000 as u64)
            // Standard Error: 311
            .saturating_add(Weight::from_ref_time(80_145 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_207_000 as u64)
            // Standard Error: 320
            .saturating_add(Weight::from_ref_time(80_006 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_166_000 as u64)
            // Standard Error: 321
            .saturating_add(Weight::from_ref_time(82_131 as u64).saturating_mul(r as u64))
    }
}
