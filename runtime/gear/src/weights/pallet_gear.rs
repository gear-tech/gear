// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-21, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `epyc-runners-node.hetzner`, CPU: `AMD EPYC 7502P 32-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear-node benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn gas(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_msg_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_no_more(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(123_617_000 as u64)
            .saturating_add(T::DbWeight::get().reads(8 as u64))
            .saturating_add(T::DbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(58_728_000 as u64)
            // Standard Error: 23
            .saturating_add(Weight::from_ref_time(62_097 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(82_425_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(3_152 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(13_331_507_000 as u64)
            // Standard Error: 599
            .saturating_add(Weight::from_ref_time(29_014 as u64).saturating_mul(c as u64))
            // Standard Error: 36
            .saturating_add(Weight::from_ref_time(1_225 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(91_052_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(907 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(148_307_000 as u64)
            // Standard Error: 10
            .saturating_add(Weight::from_ref_time(1_101 as u64).saturating_mul(p as u64))
            .saturating_add(T::DbWeight::get().reads(14 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(211_283_000 as u64)
            // Standard Error: 2_568
            .saturating_add(Weight::from_ref_time(5_936 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(25 as u64))
            .saturating_add(T::DbWeight::get().writes(23 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(337_746_000 as u64)
            // Standard Error: 346
            .saturating_add(Weight::from_ref_time(13_338 as u64).saturating_mul(q as u64))
            .saturating_add(T::DbWeight::get().reads(26 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(38_096_000 as u64)
            // Standard Error: 30
            .saturating_add(Weight::from_ref_time(63_890 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(92_215_000 as u64)
            // Standard Error: 30_889
            .saturating_add(Weight::from_ref_time(213_742_982 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gas(r: u32, ) -> Weight {
        Weight::from_ref_time(90_682_000 as u64)
            // Standard Error: 23_764
            .saturating_add(Weight::from_ref_time(74_574_056 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(90_712_000 as u64)
            // Standard Error: 21_196
            .saturating_add(Weight::from_ref_time(71_878_996 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_msg_id(r: u32, ) -> Weight {
        Weight::from_ref_time(108_076_000 as u64)
            // Standard Error: 72_243
            .saturating_add(Weight::from_ref_time(93_187_751 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(107_856_000 as u64)
            // Standard Error: 73_375
            .saturating_add(Weight::from_ref_time(93_204_724 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(107_725_000 as u64)
            // Standard Error: 74_374
            .saturating_add(Weight::from_ref_time(93_404_220 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(107_876_000 as u64)
            // Standard Error: 72_939
            .saturating_add(Weight::from_ref_time(93_791_599 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(107_675_000 as u64)
            // Standard Error: 76_499
            .saturating_add(Weight::from_ref_time(100_117_148 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(107_405_000 as u64)
            // Standard Error: 69_909
            .saturating_add(Weight::from_ref_time(99_666_283 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(94_079_000 as u64)
            // Standard Error: 21_305
            .saturating_add(Weight::from_ref_time(61_517_413 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(108_407_000 as u64)
            // Standard Error: 30_911
            .saturating_add(Weight::from_ref_time(96_145_666 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(210_331_000 as u64)
            // Standard Error: 28_608
            .saturating_add(Weight::from_ref_time(7_970_116 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(95_431_000 as u64)
            // Standard Error: 21_733
            .saturating_add(Weight::from_ref_time(61_569_842 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(94_449_000 as u64)
            // Standard Error: 28_404
            .saturating_add(Weight::from_ref_time(72_249_109 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(95_391_000 as u64)
            // Standard Error: 72_411
            .saturating_add(Weight::from_ref_time(111_096_963 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(98_157_000 as u64)
            // Standard Error: 78_666
            .saturating_add(Weight::from_ref_time(219_470_423 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(354_269_000 as u64)
            // Standard Error: 47_939
            .saturating_add(Weight::from_ref_time(55_426_504 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(108_988_000 as u64)
            // Standard Error: 79_280
            .saturating_add(Weight::from_ref_time(62_574_222 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(149_309_000 as u64)
            // Standard Error: 2_220
            .saturating_add(Weight::from_ref_time(1_239_631 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(109_248_000 as u64)
            // Standard Error: 91_030
            .saturating_add(Weight::from_ref_time(118_148_256 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(265_501_000 as u64)
            // Standard Error: 3_700
            .saturating_add(Weight::from_ref_time(182_182 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(109_098_000 as u64)
            // Standard Error: 36_055
            .saturating_add(Weight::from_ref_time(99_175_433 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(213_828_000 as u64)
            // Standard Error: 62_973
            .saturating_add(Weight::from_ref_time(58_991_150 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(95_351_000 as u64)
            // Standard Error: 74_341
            .saturating_add(Weight::from_ref_time(96_186_209 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(94_689_000 as u64)
            // Standard Error: 30_744
            .saturating_add(Weight::from_ref_time(90_694_525 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(94_830_000 as u64)
            // Standard Error: 20_637
            .saturating_add(Weight::from_ref_time(61_851_507 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(107_896_000 as u64)
            // Standard Error: 207_012
            .saturating_add(Weight::from_ref_time(31_459_900 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(93_928_000 as u64)
            // Standard Error: 225_573
            .saturating_add(Weight::from_ref_time(17_073_299 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(93_668_000 as u64)
            // Standard Error: 256_033
            .saturating_add(Weight::from_ref_time(16_497_500 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(94_569_000 as u64)
            // Standard Error: 272_718
            .saturating_add(Weight::from_ref_time(39_263_600 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_no_more(r: u32, ) -> Weight {
        Weight::from_ref_time(94_499_000 as u64)
            // Standard Error: 236_656
            .saturating_add(Weight::from_ref_time(38_734_700 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(94_429_000 as u64)
            // Standard Error: 103_049
            .saturating_add(Weight::from_ref_time(158_030_934 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(110_821_000 as u64)
            // Standard Error: 309_228
            .saturating_add(Weight::from_ref_time(56_381_499 as u64).saturating_mul(r as u64))
            .saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(176_393_000 as u64)
            // Standard Error: 2_622
            .saturating_add(Weight::from_ref_time(1_221_698 as u64).saturating_mul(n as u64))
            .saturating_add(T::DbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(109_139_000 as u64)
            // Standard Error: 45_206
            .saturating_add(Weight::from_ref_time(209_812_779 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(108_908_000 as u64)
            // Standard Error: 71_761
            .saturating_add(Weight::from_ref_time(6_205_212 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_757_000 as u64)
            // Standard Error: 369
            .saturating_add(Weight::from_ref_time(8_033 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(10_361_000 as u64)
            // Standard Error: 14_177
            .saturating_add(Weight::from_ref_time(727_784 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(10_341_000 as u64)
            // Standard Error: 28_867
            .saturating_add(Weight::from_ref_time(1_819_358 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_597_000 as u64)
            // Standard Error: 375
            .saturating_add(Weight::from_ref_time(676_401 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_627_000 as u64)
            // Standard Error: 407
            .saturating_add(Weight::from_ref_time(680_134 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_638_000 as u64)
            // Standard Error: 378
            .saturating_add(Weight::from_ref_time(557_418 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_598_000 as u64)
            // Standard Error: 538
            .saturating_add(Weight::from_ref_time(611_975 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_578_000 as u64)
            // Standard Error: 828
            .saturating_add(Weight::from_ref_time(1_764_122 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(5_151_000 as u64)
            // Standard Error: 126
            .saturating_add(Weight::from_ref_time(11_843 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_767_000 as u64)
            // Standard Error: 1_009
            .saturating_add(Weight::from_ref_time(708_552 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(4_328_000 as u64)
            // Standard Error: 1_416
            .saturating_add(Weight::from_ref_time(1_565_198 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_942_000 as u64)
            // Standard Error: 251
            .saturating_add(Weight::from_ref_time(95_081 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_808_000 as u64)
            // Standard Error: 417
            .saturating_add(Weight::from_ref_time(40_948 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_747_000 as u64)
            // Standard Error: 511
            .saturating_add(Weight::from_ref_time(82_385 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_827_000 as u64)
            // Standard Error: 402
            .saturating_add(Weight::from_ref_time(78_610 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(17_966_000 as u64)
            // Standard Error: 398
            .saturating_add(Weight::from_ref_time(79_354 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(14_589_000 as u64)
            // Standard Error: 3_160
            .saturating_add(Weight::from_ref_time(233_352 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(10_321_000 as u64)
            // Standard Error: 696
            .saturating_add(Weight::from_ref_time(1_288_623 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_607_000 as u64)
            // Standard Error: 389
            .saturating_add(Weight::from_ref_time(826_179 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_687_000 as u64)
            // Standard Error: 293
            .saturating_add(Weight::from_ref_time(803_206 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_638_000 as u64)
            // Standard Error: 569
            .saturating_add(Weight::from_ref_time(72_224 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_707_000 as u64)
            // Standard Error: 479
            .saturating_add(Weight::from_ref_time(136_810 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_687_000 as u64)
            // Standard Error: 295
            .saturating_add(Weight::from_ref_time(47_440 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_567_000 as u64)
            // Standard Error: 656
            .saturating_add(Weight::from_ref_time(41_976 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_667_000 as u64)
            // Standard Error: 487
            .saturating_add(Weight::from_ref_time(37_777 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_627_000 as u64)
            // Standard Error: 725
            .saturating_add(Weight::from_ref_time(142_895 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_727_000 as u64)
            // Standard Error: 514
            .saturating_add(Weight::from_ref_time(137_465 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_598_000 as u64)
            // Standard Error: 514
            .saturating_add(Weight::from_ref_time(139_032 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_597_000 as u64)
            // Standard Error: 629
            .saturating_add(Weight::from_ref_time(142_341 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_648_000 as u64)
            // Standard Error: 682
            .saturating_add(Weight::from_ref_time(140_412 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_638_000 as u64)
            // Standard Error: 1_010
            .saturating_add(Weight::from_ref_time(135_577 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(3_347_000 as u64)
            // Standard Error: 530
            .saturating_add(Weight::from_ref_time(112_207 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_307_000 as u64)
            // Standard Error: 498
            .saturating_add(Weight::from_ref_time(115_690 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_287_000 as u64)
            // Standard Error: 641
            .saturating_add(Weight::from_ref_time(115_436 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_407_000 as u64)
            // Standard Error: 417
            .saturating_add(Weight::from_ref_time(110_241 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_347_000 as u64)
            // Standard Error: 782
            .saturating_add(Weight::from_ref_time(120_424 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_717_000 as u64)
            // Standard Error: 650
            .saturating_add(Weight::from_ref_time(113_405 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_587_000 as u64)
            // Standard Error: 691
            .saturating_add(Weight::from_ref_time(139_928 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_587_000 as u64)
            // Standard Error: 629
            .saturating_add(Weight::from_ref_time(474_180 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_657_000 as u64)
            // Standard Error: 709
            .saturating_add(Weight::from_ref_time(469_388 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_677_000 as u64)
            // Standard Error: 793
            .saturating_add(Weight::from_ref_time(882_040 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_657_000 as u64)
            // Standard Error: 577
            .saturating_add(Weight::from_ref_time(466_524 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_657_000 as u64)
            // Standard Error: 652
            .saturating_add(Weight::from_ref_time(112_011 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_678_000 as u64)
            // Standard Error: 638
            .saturating_add(Weight::from_ref_time(111_691 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_718_000 as u64)
            // Standard Error: 570
            .saturating_add(Weight::from_ref_time(109_625 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_567_000 as u64)
            // Standard Error: 527
            .saturating_add(Weight::from_ref_time(102_860 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_638_000 as u64)
            // Standard Error: 568
            .saturating_add(Weight::from_ref_time(100_398 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_617_000 as u64)
            // Standard Error: 628
            .saturating_add(Weight::from_ref_time(105_156 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_668_000 as u64)
            // Standard Error: 877
            .saturating_add(Weight::from_ref_time(110_589 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_678_000 as u64)
            // Standard Error: 1_217
            .saturating_add(Weight::from_ref_time(114_802 as u64).saturating_mul(r as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(123_617_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(8 as u64))
            .saturating_add(RocksDbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(58_728_000 as u64)
            // Standard Error: 23
            .saturating_add(Weight::from_ref_time(62_097 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(82_425_000 as u64)
            // Standard Error: 2
            .saturating_add(Weight::from_ref_time(3_152 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(13_331_507_000 as u64)
            // Standard Error: 599
            .saturating_add(Weight::from_ref_time(29_014 as u64).saturating_mul(c as u64))
            // Standard Error: 36
            .saturating_add(Weight::from_ref_time(1_225 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(p: u32, ) -> Weight {
        Weight::from_ref_time(91_052_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(907 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(p: u32, ) -> Weight {
        Weight::from_ref_time(148_307_000 as u64)
            // Standard Error: 10
            .saturating_add(Weight::from_ref_time(1_101 as u64).saturating_mul(p as u64))
            .saturating_add(RocksDbWeight::get().reads(14 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        Weight::from_ref_time(211_283_000 as u64)
            // Standard Error: 2_568
            .saturating_add(Weight::from_ref_time(5_936 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(25 as u64))
            .saturating_add(RocksDbWeight::get().writes(23 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        Weight::from_ref_time(337_746_000 as u64)
            // Standard Error: 346
            .saturating_add(Weight::from_ref_time(13_338 as u64).saturating_mul(q as u64))
            .saturating_add(RocksDbWeight::get().reads(26 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(38_096_000 as u64)
            // Standard Error: 30
            .saturating_add(Weight::from_ref_time(63_890 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(92_215_000 as u64)
            // Standard Error: 30_889
            .saturating_add(Weight::from_ref_time(213_742_982 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gas(r: u32, ) -> Weight {
        Weight::from_ref_time(90_682_000 as u64)
            // Standard Error: 23_764
            .saturating_add(Weight::from_ref_time(74_574_056 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(90_712_000 as u64)
            // Standard Error: 21_196
            .saturating_add(Weight::from_ref_time(71_878_996 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_msg_id(r: u32, ) -> Weight {
        Weight::from_ref_time(108_076_000 as u64)
            // Standard Error: 72_243
            .saturating_add(Weight::from_ref_time(93_187_751 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(107_856_000 as u64)
            // Standard Error: 73_375
            .saturating_add(Weight::from_ref_time(93_204_724 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(107_725_000 as u64)
            // Standard Error: 74_374
            .saturating_add(Weight::from_ref_time(93_404_220 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        Weight::from_ref_time(107_876_000 as u64)
            // Standard Error: 72_939
            .saturating_add(Weight::from_ref_time(93_791_599 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(107_675_000 as u64)
            // Standard Error: 76_499
            .saturating_add(Weight::from_ref_time(100_117_148 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(107_405_000 as u64)
            // Standard Error: 69_909
            .saturating_add(Weight::from_ref_time(99_666_283 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(94_079_000 as u64)
            // Standard Error: 21_305
            .saturating_add(Weight::from_ref_time(61_517_413 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(108_407_000 as u64)
            // Standard Error: 30_911
            .saturating_add(Weight::from_ref_time(96_145_666 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(210_331_000 as u64)
            // Standard Error: 28_608
            .saturating_add(Weight::from_ref_time(7_970_116 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(95_431_000 as u64)
            // Standard Error: 21_733
            .saturating_add(Weight::from_ref_time(61_569_842 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(94_449_000 as u64)
            // Standard Error: 28_404
            .saturating_add(Weight::from_ref_time(72_249_109 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(95_391_000 as u64)
            // Standard Error: 72_411
            .saturating_add(Weight::from_ref_time(111_096_963 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(98_157_000 as u64)
            // Standard Error: 78_666
            .saturating_add(Weight::from_ref_time(219_470_423 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(354_269_000 as u64)
            // Standard Error: 47_939
            .saturating_add(Weight::from_ref_time(55_426_504 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(108_988_000 as u64)
            // Standard Error: 79_280
            .saturating_add(Weight::from_ref_time(62_574_222 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(149_309_000 as u64)
            // Standard Error: 2_220
            .saturating_add(Weight::from_ref_time(1_239_631 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(109_248_000 as u64)
            // Standard Error: 91_030
            .saturating_add(Weight::from_ref_time(118_148_256 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(265_501_000 as u64)
            // Standard Error: 3_700
            .saturating_add(Weight::from_ref_time(182_182 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        Weight::from_ref_time(109_098_000 as u64)
            // Standard Error: 36_055
            .saturating_add(Weight::from_ref_time(99_175_433 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(213_828_000 as u64)
            // Standard Error: 62_973
            .saturating_add(Weight::from_ref_time(58_991_150 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(95_351_000 as u64)
            // Standard Error: 74_341
            .saturating_add(Weight::from_ref_time(96_186_209 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(94_689_000 as u64)
            // Standard Error: 30_744
            .saturating_add(Weight::from_ref_time(90_694_525 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(94_830_000 as u64)
            // Standard Error: 20_637
            .saturating_add(Weight::from_ref_time(61_851_507 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        Weight::from_ref_time(107_896_000 as u64)
            // Standard Error: 207_012
            .saturating_add(Weight::from_ref_time(31_459_900 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(93_928_000 as u64)
            // Standard Error: 225_573
            .saturating_add(Weight::from_ref_time(17_073_299 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        Weight::from_ref_time(93_668_000 as u64)
            // Standard Error: 256_033
            .saturating_add(Weight::from_ref_time(16_497_500 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(94_569_000 as u64)
            // Standard Error: 272_718
            .saturating_add(Weight::from_ref_time(39_263_600 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_no_more(r: u32, ) -> Weight {
        Weight::from_ref_time(94_499_000 as u64)
            // Standard Error: 236_656
            .saturating_add(Weight::from_ref_time(38_734_700 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(94_429_000 as u64)
            // Standard Error: 103_049
            .saturating_add(Weight::from_ref_time(158_030_934 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(110_821_000 as u64)
            // Standard Error: 309_228
            .saturating_add(Weight::from_ref_time(56_381_499 as u64).saturating_mul(r as u64))
            .saturating_add(RocksDbWeight::get().reads((4 as u64).saturating_mul(r as u64)))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(176_393_000 as u64)
            // Standard Error: 2_622
            .saturating_add(Weight::from_ref_time(1_221_698 as u64).saturating_mul(n as u64))
            .saturating_add(RocksDbWeight::get().reads(4 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(109_139_000 as u64)
            // Standard Error: 45_206
            .saturating_add(Weight::from_ref_time(209_812_779 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        Weight::from_ref_time(108_908_000 as u64)
            // Standard Error: 71_761
            .saturating_add(Weight::from_ref_time(6_205_212 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(3_757_000 as u64)
            // Standard Error: 369
            .saturating_add(Weight::from_ref_time(8_033 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(10_361_000 as u64)
            // Standard Error: 14_177
            .saturating_add(Weight::from_ref_time(727_784 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(10_341_000 as u64)
            // Standard Error: 28_867
            .saturating_add(Weight::from_ref_time(1_819_358 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(3_597_000 as u64)
            // Standard Error: 375
            .saturating_add(Weight::from_ref_time(676_401 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_627_000 as u64)
            // Standard Error: 407
            .saturating_add(Weight::from_ref_time(680_134 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(3_638_000 as u64)
            // Standard Error: 378
            .saturating_add(Weight::from_ref_time(557_418 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(3_598_000 as u64)
            // Standard Error: 538
            .saturating_add(Weight::from_ref_time(611_975 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(3_578_000 as u64)
            // Standard Error: 828
            .saturating_add(Weight::from_ref_time(1_764_122 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(5_151_000 as u64)
            // Standard Error: 126
            .saturating_add(Weight::from_ref_time(11_843 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(3_767_000 as u64)
            // Standard Error: 1_009
            .saturating_add(Weight::from_ref_time(708_552 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(4_328_000 as u64)
            // Standard Error: 1_416
            .saturating_add(Weight::from_ref_time(1_565_198 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(5_942_000 as u64)
            // Standard Error: 251
            .saturating_add(Weight::from_ref_time(95_081 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(3_808_000 as u64)
            // Standard Error: 417
            .saturating_add(Weight::from_ref_time(40_948 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(3_747_000 as u64)
            // Standard Error: 511
            .saturating_add(Weight::from_ref_time(82_385 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(3_827_000 as u64)
            // Standard Error: 402
            .saturating_add(Weight::from_ref_time(78_610 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(17_966_000 as u64)
            // Standard Error: 398
            .saturating_add(Weight::from_ref_time(79_354 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(14_589_000 as u64)
            // Standard Error: 3_160
            .saturating_add(Weight::from_ref_time(233_352 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(10_321_000 as u64)
            // Standard Error: 696
            .saturating_add(Weight::from_ref_time(1_288_623 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_607_000 as u64)
            // Standard Error: 389
            .saturating_add(Weight::from_ref_time(826_179 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_687_000 as u64)
            // Standard Error: 293
            .saturating_add(Weight::from_ref_time(803_206 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(3_638_000 as u64)
            // Standard Error: 569
            .saturating_add(Weight::from_ref_time(72_224 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(3_707_000 as u64)
            // Standard Error: 479
            .saturating_add(Weight::from_ref_time(136_810 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_687_000 as u64)
            // Standard Error: 295
            .saturating_add(Weight::from_ref_time(47_440 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(3_567_000 as u64)
            // Standard Error: 656
            .saturating_add(Weight::from_ref_time(41_976 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(3_667_000 as u64)
            // Standard Error: 487
            .saturating_add(Weight::from_ref_time(37_777 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(3_627_000 as u64)
            // Standard Error: 725
            .saturating_add(Weight::from_ref_time(142_895 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(3_727_000 as u64)
            // Standard Error: 514
            .saturating_add(Weight::from_ref_time(137_465 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_598_000 as u64)
            // Standard Error: 514
            .saturating_add(Weight::from_ref_time(139_032 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_597_000 as u64)
            // Standard Error: 629
            .saturating_add(Weight::from_ref_time(142_341 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(3_648_000 as u64)
            // Standard Error: 682
            .saturating_add(Weight::from_ref_time(140_412 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_638_000 as u64)
            // Standard Error: 1_010
            .saturating_add(Weight::from_ref_time(135_577 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(3_347_000 as u64)
            // Standard Error: 530
            .saturating_add(Weight::from_ref_time(112_207 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_307_000 as u64)
            // Standard Error: 498
            .saturating_add(Weight::from_ref_time(115_690 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(3_287_000 as u64)
            // Standard Error: 641
            .saturating_add(Weight::from_ref_time(115_436 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_407_000 as u64)
            // Standard Error: 417
            .saturating_add(Weight::from_ref_time(110_241 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(3_347_000 as u64)
            // Standard Error: 782
            .saturating_add(Weight::from_ref_time(120_424 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(3_717_000 as u64)
            // Standard Error: 650
            .saturating_add(Weight::from_ref_time(113_405 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(3_587_000 as u64)
            // Standard Error: 691
            .saturating_add(Weight::from_ref_time(139_928 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_587_000 as u64)
            // Standard Error: 629
            .saturating_add(Weight::from_ref_time(474_180 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_657_000 as u64)
            // Standard Error: 709
            .saturating_add(Weight::from_ref_time(469_388 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(3_677_000 as u64)
            // Standard Error: 793
            .saturating_add(Weight::from_ref_time(882_040 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(3_657_000 as u64)
            // Standard Error: 577
            .saturating_add(Weight::from_ref_time(466_524 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(3_657_000 as u64)
            // Standard Error: 652
            .saturating_add(Weight::from_ref_time(112_011 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(3_678_000 as u64)
            // Standard Error: 638
            .saturating_add(Weight::from_ref_time(111_691 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(3_718_000 as u64)
            // Standard Error: 570
            .saturating_add(Weight::from_ref_time(109_625 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_567_000 as u64)
            // Standard Error: 527
            .saturating_add(Weight::from_ref_time(102_860 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(3_638_000 as u64)
            // Standard Error: 568
            .saturating_add(Weight::from_ref_time(100_398 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(3_617_000 as u64)
            // Standard Error: 628
            .saturating_add(Weight::from_ref_time(105_156 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(3_668_000 as u64)
            // Standard Error: 877
            .saturating_add(Weight::from_ref_time(110_589 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(3_678_000 as u64)
            // Standard Error: 1_217
            .saturating_add(Weight::from_ref_time(114_802 as u64).saturating_mul(r as u64))
    }
}
