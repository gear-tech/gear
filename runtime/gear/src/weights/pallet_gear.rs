// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_message_with_voucher(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn send_reply_with_voucher(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 965_000 picoseconds.
        Weight::from_parts(1_020_000, 0)
            // Standard Error: 753
            .saturating_add(Weight::from_parts(247_354, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_780_000 picoseconds.
        Weight::from_parts(2_874_000, 3506)
            // Standard Error: 924
            .saturating_add(Weight::from_parts(674_078, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_392_000 picoseconds.
        Weight::from_parts(63_325_658, 0)
            // Standard Error: 13_432
            .saturating_add(Weight::from_parts(2_671_521, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 85_039_000 picoseconds.
        Weight::from_parts(86_523_000, 42236)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 54_302_000 picoseconds.
        Weight::from_parts(56_159_000, 21261)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 29_099_000 picoseconds.
        Weight::from_parts(30_610_000, 17070)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_259_000 picoseconds.
        Weight::from_parts(6_228_584, 7640)
            // Standard Error: 37_556
            .saturating_add(Weight::from_parts(16_519_610, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1297 + c * (16389 ±0)`
        //  Estimated: `40898 + c * (131112 ±0)`
        // Minimum execution time: 70_699_000 picoseconds.
        Weight::from_parts(71_447_000, 40898)
            // Standard Error: 139_719
            .saturating_add(Weight::from_parts(54_319_486, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 60_906_000 picoseconds.
        Weight::from_parts(18_999_485, 4990)
            // Standard Error: 57_215
            .saturating_add(Weight::from_parts(53_057_311, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `671`
        //  Estimated: `38638`
        // Minimum execution time: 65_623_000 picoseconds.
        Weight::from_parts(88_392_610, 38638)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_635, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 11_247_503_000 picoseconds.
        Weight::from_parts(302_469_923, 34312)
            // Standard Error: 147_459
            .saturating_add(Weight::from_parts(54_400_528, 0).saturating_mul(c.into()))
            // Standard Error: 8
            .saturating_add(Weight::from_parts(2_571, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 56_802_000 picoseconds.
        Weight::from_parts(33_250_791, 23853)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_182, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 59_487_000 picoseconds.
        Weight::from_parts(37_481_444, 27177)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_182, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 86_239_000 picoseconds.
        Weight::from_parts(32_106_516, 42227)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(1_249, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 98_413_000 picoseconds.
        Weight::from_parts(52_381_439, 45757)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(1_252, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 302_634_000 picoseconds.
        Weight::from_parts(320_223_637, 74319)
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 315_859_000 picoseconds.
        Weight::from_parts(328_138_594, 74319)
            // Standard Error: 1_557
            .saturating_add(Weight::from_parts(8_014, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 45_804_000 picoseconds.
        Weight::from_parts(46_226_000, 3899)
            // Standard Error: 51_090
            .saturating_add(Weight::from_parts(51_940_069, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_872_000 picoseconds.
        Weight::from_parts(82_358_000, 0)
            // Standard Error: 3_946_533
            .saturating_add(Weight::from_parts(617_270_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 365_182_000 picoseconds.
        Weight::from_parts(292_523_651, 0)
            // Standard Error: 7_087
            .saturating_add(Weight::from_parts(31_059_002, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 196_771_000 picoseconds.
        Weight::from_parts(219_836_156, 0)
            // Standard Error: 406_704
            .saturating_add(Weight::from_parts(120_742_843, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_043_000 picoseconds.
        Weight::from_parts(92_117_781, 0)
            // Standard Error: 7_334
            .saturating_add(Weight::from_parts(3_640_301, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 146_803_000 picoseconds.
        Weight::from_parts(168_908_676, 0)
            // Standard Error: 28_070
            .saturating_add(Weight::from_parts(3_989_643, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_421_000 picoseconds.
        Weight::from_parts(109_902_108, 0)
            // Standard Error: 458_197
            .saturating_add(Weight::from_parts(186_560_355, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_173_000 picoseconds.
        Weight::from_parts(81_703_608, 0)
            // Standard Error: 318_823
            .saturating_add(Weight::from_parts(183_602_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_999_000 picoseconds.
        Weight::from_parts(81_002_605, 0)
            // Standard Error: 269_075
            .saturating_add(Weight::from_parts(183_154_106, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_306_000 picoseconds.
        Weight::from_parts(79_166_166, 0)
            // Standard Error: 332_502
            .saturating_add(Weight::from_parts(182_666_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_459_000 picoseconds.
        Weight::from_parts(80_301_392, 0)
            // Standard Error: 340_598
            .saturating_add(Weight::from_parts(184_099_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_140_000 picoseconds.
        Weight::from_parts(72_987_262, 0)
            // Standard Error: 388_909
            .saturating_add(Weight::from_parts(186_920_851, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_336_000 picoseconds.
        Weight::from_parts(79_078_269, 0)
            // Standard Error: 276_322
            .saturating_add(Weight::from_parts(182_690_178, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_201_000 picoseconds.
        Weight::from_parts(79_459_558, 0)
            // Standard Error: 357_406
            .saturating_add(Weight::from_parts(182_989_857, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 709_298_000 picoseconds.
        Weight::from_parts(792_701_124, 0)
            // Standard Error: 581_476
            .saturating_add(Weight::from_parts(264_833_637, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 958_553_000 picoseconds.
        Weight::from_parts(1_002_082_000, 0)
            // Standard Error: 51_056
            .saturating_add(Weight::from_parts(13_349_580, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_092_000 picoseconds.
        Weight::from_parts(70_460_333, 0)
            // Standard Error: 322_779
            .saturating_add(Weight::from_parts(182_652_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_315_000 picoseconds.
        Weight::from_parts(77_285_940, 0)
            // Standard Error: 310_862
            .saturating_add(Weight::from_parts(183_154_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_813_000 picoseconds.
        Weight::from_parts(83_631_977, 0)
            // Standard Error: 426_894
            .saturating_add(Weight::from_parts(250_044_040, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_342_000 picoseconds.
        Weight::from_parts(88_861_000, 0)
            // Standard Error: 4_034_065
            .saturating_add(Weight::from_parts(1_070_363_129, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_887_000 picoseconds.
        Weight::from_parts(154_402_402, 0)
            // Standard Error: 504_137
            .saturating_add(Weight::from_parts(389_538_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 467_573_000 picoseconds.
        Weight::from_parts(471_685_000, 0)
            // Standard Error: 64_140
            .saturating_add(Weight::from_parts(22_109_126, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_853_000 picoseconds.
        Weight::from_parts(152_053_498, 0)
            // Standard Error: 538_330
            .saturating_add(Weight::from_parts(397_711_575, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 471_875_000 picoseconds.
        Weight::from_parts(475_692_000, 0)
            // Standard Error: 57_997
            .saturating_add(Weight::from_parts(21_385_701, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_684_000 picoseconds.
        Weight::from_parts(781_328_373, 0)
            // Standard Error: 479_933
            .saturating_add(Weight::from_parts(411_727_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 746_421_000 picoseconds.
        Weight::from_parts(889_163_923, 0)
            // Standard Error: 621_967
            .saturating_add(Weight::from_parts(412_763_026, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_961_000 picoseconds.
        Weight::from_parts(86_031_226, 0)
            // Standard Error: 355_690
            .saturating_add(Weight::from_parts(191_347_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_797_807_000 picoseconds.
        Weight::from_parts(3_948_397_472, 0)
            // Standard Error: 396_090
            .saturating_add(Weight::from_parts(284_341_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 485_799_000 picoseconds.
        Weight::from_parts(486_862_000, 0)
            // Standard Error: 47_704
            .saturating_add(Weight::from_parts(31_360_292, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_842_120_000 picoseconds.
        Weight::from_parts(3_943_431_716, 0)
            // Standard Error: 766_406
            .saturating_add(Weight::from_parts(339_379_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_828_327_000 picoseconds.
        Weight::from_parts(3_976_283_101, 0)
            // Standard Error: 768_169
            .saturating_add(Weight::from_parts(353_252_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 256_679_000 picoseconds.
        Weight::from_parts(330_245_572, 0)
            // Standard Error: 519_345
            .saturating_add(Weight::from_parts(404_879_225, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 640_004_000 picoseconds.
        Weight::from_parts(646_769_000, 0)
            // Standard Error: 55_122
            .saturating_add(Weight::from_parts(21_616_125, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_981_155_000 picoseconds.
        Weight::from_parts(4_086_072_221, 0)
            // Standard Error: 1_076_069
            .saturating_add(Weight::from_parts(362_989_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_145_000 picoseconds.
        Weight::from_parts(88_260_563, 0)
            // Standard Error: 277_576
            .saturating_add(Weight::from_parts(20_209_036, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_930_000 picoseconds.
        Weight::from_parts(90_280_376, 0)
            // Standard Error: 1_072
            .saturating_add(Weight::from_parts(427_777, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_156_000 picoseconds.
        Weight::from_parts(89_778_763, 0)
            // Standard Error: 365_767
            .saturating_add(Weight::from_parts(24_157_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_315_000 picoseconds.
        Weight::from_parts(94_894_394, 0)
            // Standard Error: 993
            .saturating_add(Weight::from_parts(426_364, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_595_000 picoseconds.
        Weight::from_parts(86_259_504, 0)
            // Standard Error: 284_882
            .saturating_add(Weight::from_parts(25_873_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_771_000 picoseconds.
        Weight::from_parts(85_313_802, 0)
            // Standard Error: 265_474
            .saturating_add(Weight::from_parts(25_863_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_396_000 picoseconds.
        Weight::from_parts(126_819_617, 0)
            // Standard Error: 518_749
            .saturating_add(Weight::from_parts(272_821_836, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_266_000 picoseconds.
        Weight::from_parts(100_843_000, 0)
            // Standard Error: 2_828
            .saturating_add(Weight::from_parts(662_117, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 707_150_000 picoseconds.
        Weight::from_parts(754_398_128, 0)
            // Standard Error: 5_119_788
            .saturating_add(Weight::from_parts(7_037_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 712_091_000 picoseconds.
        Weight::from_parts(751_999_544, 0)
            // Standard Error: 4_003_265
            .saturating_add(Weight::from_parts(43_818_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_234_000 picoseconds.
        Weight::from_parts(96_192_773, 0)
            // Standard Error: 271_871
            .saturating_add(Weight::from_parts(13_338_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_190_000 picoseconds.
        Weight::from_parts(92_525_926, 0)
            // Standard Error: 1_134
            .saturating_add(Weight::from_parts(433_806, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_297_000 picoseconds.
        Weight::from_parts(98_054_616, 0)
            // Standard Error: 394_791
            .saturating_add(Weight::from_parts(7_680_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_932_000 picoseconds.
        Weight::from_parts(91_150_785, 0)
            // Standard Error: 1_067
            .saturating_add(Weight::from_parts(424_570, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_591_000 picoseconds.
        Weight::from_parts(79_590_461, 0)
            // Standard Error: 360_038
            .saturating_add(Weight::from_parts(185_313_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_379_000 picoseconds.
        Weight::from_parts(82_304_672, 0)
            // Standard Error: 371_508
            .saturating_add(Weight::from_parts(184_895_719, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 714_906_000 picoseconds.
        Weight::from_parts(784_837_322, 0)
            // Standard Error: 485_874
            .saturating_add(Weight::from_parts(198_529_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 735_164_000 picoseconds.
        Weight::from_parts(760_829_418, 0)
            // Standard Error: 2_049
            .saturating_add(Weight::from_parts(164_862, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_467_125_000 picoseconds.
        Weight::from_parts(4_668_343_697, 0)
            // Standard Error: 529_569
            .saturating_add(Weight::from_parts(214_709_155, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_716_693_000 picoseconds.
        Weight::from_parts(4_810_590_943, 0)
            // Standard Error: 12_440
            .saturating_add(Weight::from_parts(13_814_475, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_721_000 picoseconds.
        Weight::from_parts(95_360_878, 0)
            // Standard Error: 488_163
            .saturating_add(Weight::from_parts(198_923_476, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 189_069_000 picoseconds.
        Weight::from_parts(191_834_000, 0)
            // Standard Error: 53_942
            .saturating_add(Weight::from_parts(26_059_121, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_023_000 picoseconds.
        Weight::from_parts(70_919_161, 0)
            // Standard Error: 442_134
            .saturating_add(Weight::from_parts(186_467_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_187_000 picoseconds.
        Weight::from_parts(86_256_124, 0)
            // Standard Error: 333_120
            .saturating_add(Weight::from_parts(27_182_075, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_373_000 picoseconds.
        Weight::from_parts(83_957_387, 0)
            // Standard Error: 258_914
            .saturating_add(Weight::from_parts(14_637_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_886_000 picoseconds.
        Weight::from_parts(86_536_767, 0)
            // Standard Error: 237_087
            .saturating_add(Weight::from_parts(15_456_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_962_000 picoseconds.
        Weight::from_parts(87_038_165, 0)
            // Standard Error: 267_652
            .saturating_add(Weight::from_parts(14_141_234, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_976_000 picoseconds.
        Weight::from_parts(87_105_967, 0)
            // Standard Error: 237_581
            .saturating_add(Weight::from_parts(13_365_932, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_585_000 picoseconds.
        Weight::from_parts(203_512_831, 0)
            // Standard Error: 393_346
            .saturating_add(Weight::from_parts(283_538_921, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_330_000 picoseconds.
        Weight::from_parts(158_669_516, 0)
            // Standard Error: 440_421
            .saturating_add(Weight::from_parts(473_163_025, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_492_772_000 picoseconds.
        Weight::from_parts(43_692_998_000, 0)
            // Standard Error: 263_249
            .saturating_add(Weight::from_parts(8_169_821, 0).saturating_mul(p.into()))
            // Standard Error: 263_236
            .saturating_add(Weight::from_parts(180_732_778, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_189_000 picoseconds.
        Weight::from_parts(158_677_248, 0)
            // Standard Error: 452_648
            .saturating_add(Weight::from_parts(478_043_506, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_613_488_000 picoseconds.
        Weight::from_parts(43_758_304_000, 0)
            // Standard Error: 268_412
            .saturating_add(Weight::from_parts(7_987_894, 0).saturating_mul(p.into()))
            // Standard Error: 268_399
            .saturating_add(Weight::from_parts(180_769_004, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_210_000 picoseconds.
        Weight::from_parts(99_996_695, 0)
            // Standard Error: 31_808
            .saturating_add(Weight::from_parts(3_523_987, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 82_940_000 picoseconds.
        Weight::from_parts(123_540_441, 1131)
            // Standard Error: 7_143
            .saturating_add(Weight::from_parts(11_789_871, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 83_752_000 picoseconds.
        Weight::from_parts(84_858_000, 1131)
            // Standard Error: 48_161
            .saturating_add(Weight::from_parts(36_181_117, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_125_138_000 picoseconds.
        Weight::from_parts(5_869_525_563, 5069931)
            // Standard Error: 46_521
            .saturating_add(Weight::from_parts(36_899_111, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 82_516_000 picoseconds.
        Weight::from_parts(83_470_000, 1939)
            // Standard Error: 29_769
            .saturating_add(Weight::from_parts(46_665_657, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 87_344_000 picoseconds.
        Weight::from_parts(94_873_151, 1131)
            // Standard Error: 55_429
            .saturating_add(Weight::from_parts(35_724_871, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 735_393_000 picoseconds.
        Weight::from_parts(754_062_397, 1496)
            // Standard Error: 166_437
            .saturating_add(Weight::from_parts(43_966_900, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_124_371_000 picoseconds.
        Weight::from_parts(1_147_901_415, 317931)
            // Standard Error: 145_342
            .saturating_add(Weight::from_parts(43_795_511, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_510_000 picoseconds.
        Weight::from_parts(1_448_006, 0)
            // Standard Error: 9_868
            .saturating_add(Weight::from_parts(24_061_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_337_991_000 picoseconds.
        Weight::from_parts(4_151_991_287, 0)
            // Standard Error: 60_683
            .saturating_add(Weight::from_parts(4_818_799, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_341_162_000 picoseconds.
        Weight::from_parts(4_200_807_294, 0)
            // Standard Error: 51_442
            .saturating_add(Weight::from_parts(4_527_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_322_767_000 picoseconds.
        Weight::from_parts(11_038_976_057, 0)
            // Standard Error: 150_113
            .saturating_add(Weight::from_parts(10_655_640, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_367_826_000 picoseconds.
        Weight::from_parts(11_310_983_745, 0)
            // Standard Error: 145_202
            .saturating_add(Weight::from_parts(7_541_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_251_000 picoseconds.
        Weight::from_parts(2_304_000, 0)
            // Standard Error: 8_520
            .saturating_add(Weight::from_parts(3_798_413, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_168_000 picoseconds.
        Weight::from_parts(573_722, 0)
            // Standard Error: 11_642
            .saturating_add(Weight::from_parts(3_174_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(3_155_512, 0)
            // Standard Error: 1_212
            .saturating_add(Weight::from_parts(1_586_585, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_160_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 8_627
            .saturating_add(Weight::from_parts(2_929_529, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(1_609_241, 0)
            // Standard Error: 19_812
            .saturating_add(Weight::from_parts(5_162_833, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_892_000 picoseconds.
        Weight::from_parts(5_316_811, 0)
            // Standard Error: 1_578
            .saturating_add(Weight::from_parts(163_377, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_304_000 picoseconds.
        Weight::from_parts(4_554_683, 0)
            // Standard Error: 7_319
            .saturating_add(Weight::from_parts(2_595_958, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_595_958 -
            2_422_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(5_046_075, 0)
            // Standard Error: 13_702
            .saturating_add(Weight::from_parts(2_422_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_684_000 picoseconds.
        Weight::from_parts(17_324_871, 0)
            // Standard Error: 38_532
            .saturating_add(Weight::from_parts(10_260_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_206_000 picoseconds.
        Weight::from_parts(2_634_425, 0)
            // Standard Error: 5_954
            .saturating_add(Weight::from_parts(1_275_538, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_288_000 picoseconds.
        Weight::from_parts(5_570_870, 0)
            // Standard Error: 12
            .saturating_add(Weight::from_parts(61, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_203_000 picoseconds.
        Weight::from_parts(1_788_159, 0)
            // Standard Error: 3_152
            .saturating_add(Weight::from_parts(267_842, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_164_000 picoseconds.
        Weight::from_parts(2_223_000, 0)
            // Standard Error: 4_611
            .saturating_add(Weight::from_parts(721_127, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_252_000 picoseconds.
        Weight::from_parts(2_347_000, 0)
            // Standard Error: 5_971
            .saturating_add(Weight::from_parts(742_209, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_406_000 picoseconds.
        Weight::from_parts(2_894_577, 0)
            // Standard Error: 8_027
            .saturating_add(Weight::from_parts(801_493, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_345_000 picoseconds.
        Weight::from_parts(31_295, 0)
            // Standard Error: 10_231
            .saturating_add(Weight::from_parts(1_543_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_937_000 picoseconds.
        Weight::from_parts(62_049, 0)
            // Standard Error: 12_087
            .saturating_add(Weight::from_parts(7_172_920, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_262_000 picoseconds.
        Weight::from_parts(2_306_000, 0)
            // Standard Error: 6_042
            .saturating_add(Weight::from_parts(3_394_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_151_000 picoseconds.
        Weight::from_parts(2_260_000, 0)
            // Standard Error: 5_891
            .saturating_add(Weight::from_parts(3_138_523, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_218_000 picoseconds.
        Weight::from_parts(2_277_000, 0)
            // Standard Error: 8_196
            .saturating_add(Weight::from_parts(3_167_033, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_246_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 5_536
            .saturating_add(Weight::from_parts(2_668_164, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_259_000 picoseconds.
        Weight::from_parts(45_432, 0)
            // Standard Error: 6_223
            .saturating_add(Weight::from_parts(645_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_168_000 picoseconds.
        Weight::from_parts(1_301_007, 0)
            // Standard Error: 4_929
            .saturating_add(Weight::from_parts(446_280, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_130_000 picoseconds.
        Weight::from_parts(2_205_000, 0)
            // Standard Error: 10_412
            .saturating_add(Weight::from_parts(1_894_722, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_170_000 picoseconds.
        Weight::from_parts(2_257_000, 0)
            // Standard Error: 7_708
            .saturating_add(Weight::from_parts(1_162_246, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_153_000 picoseconds.
        Weight::from_parts(1_682_106, 0)
            // Standard Error: 3_839
            .saturating_add(Weight::from_parts(384_381, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(1_669_708, 0)
            // Standard Error: 3_126
            .saturating_add(Weight::from_parts(384_474, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_249_000 picoseconds.
        Weight::from_parts(2_291_000, 0)
            // Standard Error: 4_476
            .saturating_add(Weight::from_parts(497_277, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_217_000 picoseconds.
        Weight::from_parts(2_287_000, 0)
            // Standard Error: 4_107
            .saturating_add(Weight::from_parts(524_095, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_163_000 picoseconds.
        Weight::from_parts(2_233_000, 0)
            // Standard Error: 3_690
            .saturating_add(Weight::from_parts(501_277, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_132_000 picoseconds.
        Weight::from_parts(1_082_506, 0)
            // Standard Error: 5_421
            .saturating_add(Weight::from_parts(400_448, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_211_000 picoseconds.
        Weight::from_parts(3_085_764, 0)
            // Standard Error: 1_912
            .saturating_add(Weight::from_parts(162_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_161_000 picoseconds.
        Weight::from_parts(2_849_158, 0)
            // Standard Error: 1_635
            .saturating_add(Weight::from_parts(153_763, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_315_000, 0)
            // Standard Error: 11_776
            .saturating_add(Weight::from_parts(1_779_477, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_272_000 picoseconds.
        Weight::from_parts(2_342_000, 0)
            // Standard Error: 8_815
            .saturating_add(Weight::from_parts(1_197_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(2_258_000, 0)
            // Standard Error: 9_983
            .saturating_add(Weight::from_parts(1_838_257, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_276_000, 0)
            // Standard Error: 7_749
            .saturating_add(Weight::from_parts(1_165_862, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_000 picoseconds.
        Weight::from_parts(2_246_000, 0)
            // Standard Error: 11_426
            .saturating_add(Weight::from_parts(1_828_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_187_000 picoseconds.
        Weight::from_parts(2_245_000, 0)
            // Standard Error: 7_973
            .saturating_add(Weight::from_parts(1_145_613, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(2_273_000, 0)
            // Standard Error: 10_995
            .saturating_add(Weight::from_parts(1_789_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(2_252_000, 0)
            // Standard Error: 7_454
            .saturating_add(Weight::from_parts(1_207_539, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_219_000 picoseconds.
        Weight::from_parts(2_279_000, 0)
            // Standard Error: 10_576
            .saturating_add(Weight::from_parts(1_855_075, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_199_000 picoseconds.
        Weight::from_parts(2_265_000, 0)
            // Standard Error: 7_405
            .saturating_add(Weight::from_parts(1_180_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_245_000 picoseconds.
        Weight::from_parts(2_285_000, 0)
            // Standard Error: 10_994
            .saturating_add(Weight::from_parts(1_835_344, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_277_000, 0)
            // Standard Error: 7_826
            .saturating_add(Weight::from_parts(1_163_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_102_000 picoseconds.
        Weight::from_parts(2_217_000, 0)
            // Standard Error: 11_374
            .saturating_add(Weight::from_parts(1_910_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_245_000 picoseconds.
        Weight::from_parts(2_303_000, 0)
            // Standard Error: 8_971
            .saturating_add(Weight::from_parts(1_182_859, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_230_000 picoseconds.
        Weight::from_parts(2_284_000, 0)
            // Standard Error: 12_177
            .saturating_add(Weight::from_parts(1_866_465, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_468_000 picoseconds.
        Weight::from_parts(2_638_000, 0)
            // Standard Error: 7_738
            .saturating_add(Weight::from_parts(1_119_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_191_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 10_340
            .saturating_add(Weight::from_parts(1_831_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_260_000, 0)
            // Standard Error: 6_924
            .saturating_add(Weight::from_parts(1_210_933, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_325_000, 0)
            // Standard Error: 9_907
            .saturating_add(Weight::from_parts(1_822_715, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_230_000 picoseconds.
        Weight::from_parts(2_294_000, 0)
            // Standard Error: 7_927
            .saturating_add(Weight::from_parts(1_168_287, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 8_768
            .saturating_add(Weight::from_parts(1_295_617, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(2_292_000, 0)
            // Standard Error: 6_314
            .saturating_add(Weight::from_parts(658_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_312_000, 0)
            // Standard Error: 9_261
            .saturating_add(Weight::from_parts(1_348_699, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(2_290_000, 0)
            // Standard Error: 5_457
            .saturating_add(Weight::from_parts(671_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_180_000 picoseconds.
        Weight::from_parts(2_241_000, 0)
            // Standard Error: 11_567
            .saturating_add(Weight::from_parts(1_835_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_196_000 picoseconds.
        Weight::from_parts(2_290_000, 0)
            // Standard Error: 7_436
            .saturating_add(Weight::from_parts(1_171_019, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_195_000 picoseconds.
        Weight::from_parts(6_299_544, 0)
            // Standard Error: 28_028
            .saturating_add(Weight::from_parts(2_500_140, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_249_000 picoseconds.
        Weight::from_parts(2_576_178, 0)
            // Standard Error: 12_042
            .saturating_add(Weight::from_parts(2_335_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_223_000 picoseconds.
        Weight::from_parts(8_638_891, 0)
            // Standard Error: 32_649
            .saturating_add(Weight::from_parts(2_462_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_231_000 picoseconds.
        Weight::from_parts(2_731_170, 0)
            // Standard Error: 19_116
            .saturating_add(Weight::from_parts(2_437_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_261_000 picoseconds.
        Weight::from_parts(1_535_146, 0)
            // Standard Error: 30_575
            .saturating_add(Weight::from_parts(9_634_377, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_209_000 picoseconds.
        Weight::from_parts(5_244_298, 0)
            // Standard Error: 48_615
            .saturating_add(Weight::from_parts(7_381_672, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(8_453_159, 0)
            // Standard Error: 30_530
            .saturating_add(Weight::from_parts(2_541_459, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_242_000 picoseconds.
        Weight::from_parts(5_507_917, 0)
            // Standard Error: 21_457
            .saturating_add(Weight::from_parts(2_217_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_163_000 picoseconds.
        Weight::from_parts(2_341_000, 0)
            // Standard Error: 9_253
            .saturating_add(Weight::from_parts(1_354_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_170_000 picoseconds.
        Weight::from_parts(2_224_000, 0)
            // Standard Error: 3_908
            .saturating_add(Weight::from_parts(589_876, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_184_000 picoseconds.
        Weight::from_parts(2_265_000, 0)
            // Standard Error: 9_943
            .saturating_add(Weight::from_parts(1_308_630, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_212_000 picoseconds.
        Weight::from_parts(2_273_000, 0)
            // Standard Error: 5_843
            .saturating_add(Weight::from_parts(653_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_228_000 picoseconds.
        Weight::from_parts(2_293_000, 0)
            // Standard Error: 9_157
            .saturating_add(Weight::from_parts(1_290_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_232_000 picoseconds.
        Weight::from_parts(2_276_000, 0)
            // Standard Error: 4_020
            .saturating_add(Weight::from_parts(618_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_292_000, 0)
            // Standard Error: 7_192
            .saturating_add(Weight::from_parts(1_061_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_245_000, 0)
            // Standard Error: 3_756
            .saturating_add(Weight::from_parts(568_744, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_248_000 picoseconds.
        Weight::from_parts(2_324_000, 0)
            // Standard Error: 7_917
            .saturating_add(Weight::from_parts(1_106_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_205_000 picoseconds.
        Weight::from_parts(2_292_000, 0)
            // Standard Error: 4_617
            .saturating_add(Weight::from_parts(599_461, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_215_000 picoseconds.
        Weight::from_parts(2_346_000, 0)
            // Standard Error: 7_501
            .saturating_add(Weight::from_parts(1_125_645, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_255_000 picoseconds.
        Weight::from_parts(2_306_000, 0)
            // Standard Error: 5_262
            .saturating_add(Weight::from_parts(624_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_231_000 picoseconds.
        Weight::from_parts(2_341_000, 0)
            // Standard Error: 7_879
            .saturating_add(Weight::from_parts(1_068_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_192_000 picoseconds.
        Weight::from_parts(2_288_000, 0)
            // Standard Error: 4_124
            .saturating_add(Weight::from_parts(567_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 8_516
            .saturating_add(Weight::from_parts(1_174_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_171_000 picoseconds.
        Weight::from_parts(2_258_000, 0)
            // Standard Error: 4_901
            .saturating_add(Weight::from_parts(628_068, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 965_000 picoseconds.
        Weight::from_parts(1_020_000, 0)
            // Standard Error: 753
            .saturating_add(Weight::from_parts(247_354, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_780_000 picoseconds.
        Weight::from_parts(2_874_000, 3506)
            // Standard Error: 924
            .saturating_add(Weight::from_parts(674_078, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_392_000 picoseconds.
        Weight::from_parts(63_325_658, 0)
            // Standard Error: 13_432
            .saturating_add(Weight::from_parts(2_671_521, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `979`
        //  Estimated: `42236`
        // Minimum execution time: 85_039_000 picoseconds.
        Weight::from_parts(86_523_000, 42236)
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `886`
        //  Estimated: `21261`
        // Minimum execution time: 54_302_000 picoseconds.
        Weight::from_parts(56_159_000, 21261)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(6_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `534`
        //  Estimated: `17070`
        // Minimum execution time: 29_099_000 picoseconds.
        Weight::from_parts(30_610_000, 17070)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355`
        //  Estimated: `7640`
        // Minimum execution time: 8_259_000 picoseconds.
        Weight::from_parts(6_228_584, 7640)
            // Standard Error: 37_556
            .saturating_add(Weight::from_parts(16_519_610, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1297 + c * (16389 ±0)`
        //  Estimated: `40898 + c * (131112 ±0)`
        // Minimum execution time: 70_699_000 picoseconds.
        Weight::from_parts(71_447_000, 40898)
            // Standard Error: 139_719
            .saturating_add(Weight::from_parts(54_319_486, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 60_906_000 picoseconds.
        Weight::from_parts(18_999_485, 4990)
            // Standard Error: 57_215
            .saturating_add(Weight::from_parts(53_057_311, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `671`
        //  Estimated: `38638`
        // Minimum execution time: 65_623_000 picoseconds.
        Weight::from_parts(88_392_610, 38638)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_635, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `235`
        //  Estimated: `34312`
        // Minimum execution time: 11_247_503_000 picoseconds.
        Weight::from_parts(302_469_923, 34312)
            // Standard Error: 147_459
            .saturating_add(Weight::from_parts(54_400_528, 0).saturating_mul(c.into()))
            // Standard Error: 8
            .saturating_add(Weight::from_parts(2_571, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `348`
        //  Estimated: `23853`
        // Minimum execution time: 56_802_000 picoseconds.
        Weight::from_parts(33_250_791, 23853)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_182, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 59_487_000 picoseconds.
        Weight::from_parts(37_481_444, 27177)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_182, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `978`
        //  Estimated: `42227`
        // Minimum execution time: 86_239_000 picoseconds.
        Weight::from_parts(32_106_516, 42227)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(1_249, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1081`
        //  Estimated: `45757`
        // Minimum execution time: 98_413_000 picoseconds.
        Weight::from_parts(52_381_439, 45757)
            // Standard Error: 3
            .saturating_add(Weight::from_parts(1_252, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 302_634_000 picoseconds.
        Weight::from_parts(320_223_637, 74319)
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760`
        //  Estimated: `74319`
        // Minimum execution time: 315_859_000 picoseconds.
        Weight::from_parts(328_138_594, 74319)
            // Standard Error: 1_557
            .saturating_add(Weight::from_parts(8_014, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 45_804_000 picoseconds.
        Weight::from_parts(46_226_000, 3899)
            // Standard Error: 51_090
            .saturating_add(Weight::from_parts(51_940_069, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_872_000 picoseconds.
        Weight::from_parts(82_358_000, 0)
            // Standard Error: 3_946_533
            .saturating_add(Weight::from_parts(617_270_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 365_182_000 picoseconds.
        Weight::from_parts(292_523_651, 0)
            // Standard Error: 7_087
            .saturating_add(Weight::from_parts(31_059_002, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 196_771_000 picoseconds.
        Weight::from_parts(219_836_156, 0)
            // Standard Error: 406_704
            .saturating_add(Weight::from_parts(120_742_843, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_043_000 picoseconds.
        Weight::from_parts(92_117_781, 0)
            // Standard Error: 7_334
            .saturating_add(Weight::from_parts(3_640_301, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 146_803_000 picoseconds.
        Weight::from_parts(168_908_676, 0)
            // Standard Error: 28_070
            .saturating_add(Weight::from_parts(3_989_643, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_421_000 picoseconds.
        Weight::from_parts(109_902_108, 0)
            // Standard Error: 458_197
            .saturating_add(Weight::from_parts(186_560_355, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_173_000 picoseconds.
        Weight::from_parts(81_703_608, 0)
            // Standard Error: 318_823
            .saturating_add(Weight::from_parts(183_602_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_999_000 picoseconds.
        Weight::from_parts(81_002_605, 0)
            // Standard Error: 269_075
            .saturating_add(Weight::from_parts(183_154_106, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_306_000 picoseconds.
        Weight::from_parts(79_166_166, 0)
            // Standard Error: 332_502
            .saturating_add(Weight::from_parts(182_666_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_459_000 picoseconds.
        Weight::from_parts(80_301_392, 0)
            // Standard Error: 340_598
            .saturating_add(Weight::from_parts(184_099_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_140_000 picoseconds.
        Weight::from_parts(72_987_262, 0)
            // Standard Error: 388_909
            .saturating_add(Weight::from_parts(186_920_851, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_336_000 picoseconds.
        Weight::from_parts(79_078_269, 0)
            // Standard Error: 276_322
            .saturating_add(Weight::from_parts(182_690_178, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_201_000 picoseconds.
        Weight::from_parts(79_459_558, 0)
            // Standard Error: 357_406
            .saturating_add(Weight::from_parts(182_989_857, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 709_298_000 picoseconds.
        Weight::from_parts(792_701_124, 0)
            // Standard Error: 581_476
            .saturating_add(Weight::from_parts(264_833_637, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 958_553_000 picoseconds.
        Weight::from_parts(1_002_082_000, 0)
            // Standard Error: 51_056
            .saturating_add(Weight::from_parts(13_349_580, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_092_000 picoseconds.
        Weight::from_parts(70_460_333, 0)
            // Standard Error: 322_779
            .saturating_add(Weight::from_parts(182_652_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_315_000 picoseconds.
        Weight::from_parts(77_285_940, 0)
            // Standard Error: 310_862
            .saturating_add(Weight::from_parts(183_154_588, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_813_000 picoseconds.
        Weight::from_parts(83_631_977, 0)
            // Standard Error: 426_894
            .saturating_add(Weight::from_parts(250_044_040, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_342_000 picoseconds.
        Weight::from_parts(88_861_000, 0)
            // Standard Error: 4_034_065
            .saturating_add(Weight::from_parts(1_070_363_129, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_887_000 picoseconds.
        Weight::from_parts(154_402_402, 0)
            // Standard Error: 504_137
            .saturating_add(Weight::from_parts(389_538_545, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 467_573_000 picoseconds.
        Weight::from_parts(471_685_000, 0)
            // Standard Error: 64_140
            .saturating_add(Weight::from_parts(22_109_126, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_853_000 picoseconds.
        Weight::from_parts(152_053_498, 0)
            // Standard Error: 538_330
            .saturating_add(Weight::from_parts(397_711_575, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 471_875_000 picoseconds.
        Weight::from_parts(475_692_000, 0)
            // Standard Error: 57_997
            .saturating_add(Weight::from_parts(21_385_701, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 716_684_000 picoseconds.
        Weight::from_parts(781_328_373, 0)
            // Standard Error: 479_933
            .saturating_add(Weight::from_parts(411_727_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 746_421_000 picoseconds.
        Weight::from_parts(889_163_923, 0)
            // Standard Error: 621_967
            .saturating_add(Weight::from_parts(412_763_026, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_961_000 picoseconds.
        Weight::from_parts(86_031_226, 0)
            // Standard Error: 355_690
            .saturating_add(Weight::from_parts(191_347_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_797_807_000 picoseconds.
        Weight::from_parts(3_948_397_472, 0)
            // Standard Error: 396_090
            .saturating_add(Weight::from_parts(284_341_649, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 485_799_000 picoseconds.
        Weight::from_parts(486_862_000, 0)
            // Standard Error: 47_704
            .saturating_add(Weight::from_parts(31_360_292, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_842_120_000 picoseconds.
        Weight::from_parts(3_943_431_716, 0)
            // Standard Error: 766_406
            .saturating_add(Weight::from_parts(339_379_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_828_327_000 picoseconds.
        Weight::from_parts(3_976_283_101, 0)
            // Standard Error: 768_169
            .saturating_add(Weight::from_parts(353_252_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 256_679_000 picoseconds.
        Weight::from_parts(330_245_572, 0)
            // Standard Error: 519_345
            .saturating_add(Weight::from_parts(404_879_225, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 640_004_000 picoseconds.
        Weight::from_parts(646_769_000, 0)
            // Standard Error: 55_122
            .saturating_add(Weight::from_parts(21_616_125, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_981_155_000 picoseconds.
        Weight::from_parts(4_086_072_221, 0)
            // Standard Error: 1_076_069
            .saturating_add(Weight::from_parts(362_989_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_145_000 picoseconds.
        Weight::from_parts(88_260_563, 0)
            // Standard Error: 277_576
            .saturating_add(Weight::from_parts(20_209_036, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_930_000 picoseconds.
        Weight::from_parts(90_280_376, 0)
            // Standard Error: 1_072
            .saturating_add(Weight::from_parts(427_777, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_156_000 picoseconds.
        Weight::from_parts(89_778_763, 0)
            // Standard Error: 365_767
            .saturating_add(Weight::from_parts(24_157_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_315_000 picoseconds.
        Weight::from_parts(94_894_394, 0)
            // Standard Error: 993
            .saturating_add(Weight::from_parts(426_364, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_595_000 picoseconds.
        Weight::from_parts(86_259_504, 0)
            // Standard Error: 284_882
            .saturating_add(Weight::from_parts(25_873_595, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_771_000 picoseconds.
        Weight::from_parts(85_313_802, 0)
            // Standard Error: 265_474
            .saturating_add(Weight::from_parts(25_863_597, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_396_000 picoseconds.
        Weight::from_parts(126_819_617, 0)
            // Standard Error: 518_749
            .saturating_add(Weight::from_parts(272_821_836, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_266_000 picoseconds.
        Weight::from_parts(100_843_000, 0)
            // Standard Error: 2_828
            .saturating_add(Weight::from_parts(662_117, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 707_150_000 picoseconds.
        Weight::from_parts(754_398_128, 0)
            // Standard Error: 5_119_788
            .saturating_add(Weight::from_parts(7_037_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 712_091_000 picoseconds.
        Weight::from_parts(751_999_544, 0)
            // Standard Error: 4_003_265
            .saturating_add(Weight::from_parts(43_818_555, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_234_000 picoseconds.
        Weight::from_parts(96_192_773, 0)
            // Standard Error: 271_871
            .saturating_add(Weight::from_parts(13_338_726, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_190_000 picoseconds.
        Weight::from_parts(92_525_926, 0)
            // Standard Error: 1_134
            .saturating_add(Weight::from_parts(433_806, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_297_000 picoseconds.
        Weight::from_parts(98_054_616, 0)
            // Standard Error: 394_791
            .saturating_add(Weight::from_parts(7_680_683, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_932_000 picoseconds.
        Weight::from_parts(91_150_785, 0)
            // Standard Error: 1_067
            .saturating_add(Weight::from_parts(424_570, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_591_000 picoseconds.
        Weight::from_parts(79_590_461, 0)
            // Standard Error: 360_038
            .saturating_add(Weight::from_parts(185_313_242, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_379_000 picoseconds.
        Weight::from_parts(82_304_672, 0)
            // Standard Error: 371_508
            .saturating_add(Weight::from_parts(184_895_719, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 714_906_000 picoseconds.
        Weight::from_parts(784_837_322, 0)
            // Standard Error: 485_874
            .saturating_add(Weight::from_parts(198_529_306, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 735_164_000 picoseconds.
        Weight::from_parts(760_829_418, 0)
            // Standard Error: 2_049
            .saturating_add(Weight::from_parts(164_862, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_467_125_000 picoseconds.
        Weight::from_parts(4_668_343_697, 0)
            // Standard Error: 529_569
            .saturating_add(Weight::from_parts(214_709_155, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_716_693_000 picoseconds.
        Weight::from_parts(4_810_590_943, 0)
            // Standard Error: 12_440
            .saturating_add(Weight::from_parts(13_814_475, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_721_000 picoseconds.
        Weight::from_parts(95_360_878, 0)
            // Standard Error: 488_163
            .saturating_add(Weight::from_parts(198_923_476, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 189_069_000 picoseconds.
        Weight::from_parts(191_834_000, 0)
            // Standard Error: 53_942
            .saturating_add(Weight::from_parts(26_059_121, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_023_000 picoseconds.
        Weight::from_parts(70_919_161, 0)
            // Standard Error: 442_134
            .saturating_add(Weight::from_parts(186_467_769, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_187_000 picoseconds.
        Weight::from_parts(86_256_124, 0)
            // Standard Error: 333_120
            .saturating_add(Weight::from_parts(27_182_075, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 80_373_000 picoseconds.
        Weight::from_parts(83_957_387, 0)
            // Standard Error: 258_914
            .saturating_add(Weight::from_parts(14_637_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_886_000 picoseconds.
        Weight::from_parts(86_536_767, 0)
            // Standard Error: 237_087
            .saturating_add(Weight::from_parts(15_456_732, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_962_000 picoseconds.
        Weight::from_parts(87_038_165, 0)
            // Standard Error: 267_652
            .saturating_add(Weight::from_parts(14_141_234, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_976_000 picoseconds.
        Weight::from_parts(87_105_967, 0)
            // Standard Error: 237_581
            .saturating_add(Weight::from_parts(13_365_932, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_585_000 picoseconds.
        Weight::from_parts(203_512_831, 0)
            // Standard Error: 393_346
            .saturating_add(Weight::from_parts(283_538_921, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 98_330_000 picoseconds.
        Weight::from_parts(158_669_516, 0)
            // Standard Error: 440_421
            .saturating_add(Weight::from_parts(473_163_025, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_492_772_000 picoseconds.
        Weight::from_parts(43_692_998_000, 0)
            // Standard Error: 263_249
            .saturating_add(Weight::from_parts(8_169_821, 0).saturating_mul(p.into()))
            // Standard Error: 263_236
            .saturating_add(Weight::from_parts(180_732_778, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 97_189_000 picoseconds.
        Weight::from_parts(158_677_248, 0)
            // Standard Error: 452_648
            .saturating_add(Weight::from_parts(478_043_506, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 43_613_488_000 picoseconds.
        Weight::from_parts(43_758_304_000, 0)
            // Standard Error: 268_412
            .saturating_add(Weight::from_parts(7_987_894, 0).saturating_mul(p.into()))
            // Standard Error: 268_399
            .saturating_add(Weight::from_parts(180_769_004, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_210_000 picoseconds.
        Weight::from_parts(99_996_695, 0)
            // Standard Error: 31_808
            .saturating_add(Weight::from_parts(3_523_987, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 82_940_000 picoseconds.
        Weight::from_parts(123_540_441, 1131)
            // Standard Error: 7_143
            .saturating_add(Weight::from_parts(11_789_871, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 83_752_000 picoseconds.
        Weight::from_parts(84_858_000, 1131)
            // Standard Error: 48_161
            .saturating_add(Weight::from_parts(36_181_117, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_125_138_000 picoseconds.
        Weight::from_parts(5_869_525_563, 5069931)
            // Standard Error: 46_521
            .saturating_add(Weight::from_parts(36_899_111, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 82_516_000 picoseconds.
        Weight::from_parts(83_470_000, 1939)
            // Standard Error: 29_769
            .saturating_add(Weight::from_parts(46_665_657, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 87_344_000 picoseconds.
        Weight::from_parts(94_873_151, 1131)
            // Standard Error: 55_429
            .saturating_add(Weight::from_parts(35_724_871, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 735_393_000 picoseconds.
        Weight::from_parts(754_062_397, 1496)
            // Standard Error: 166_437
            .saturating_add(Weight::from_parts(43_966_900, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_124_371_000 picoseconds.
        Weight::from_parts(1_147_901_415, 317931)
            // Standard Error: 145_342
            .saturating_add(Weight::from_parts(43_795_511, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_510_000 picoseconds.
        Weight::from_parts(1_448_006, 0)
            // Standard Error: 9_868
            .saturating_add(Weight::from_parts(24_061_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_337_991_000 picoseconds.
        Weight::from_parts(4_151_991_287, 0)
            // Standard Error: 60_683
            .saturating_add(Weight::from_parts(4_818_799, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_341_162_000 picoseconds.
        Weight::from_parts(4_200_807_294, 0)
            // Standard Error: 51_442
            .saturating_add(Weight::from_parts(4_527_839, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_322_767_000 picoseconds.
        Weight::from_parts(11_038_976_057, 0)
            // Standard Error: 150_113
            .saturating_add(Weight::from_parts(10_655_640, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_367_826_000 picoseconds.
        Weight::from_parts(11_310_983_745, 0)
            // Standard Error: 145_202
            .saturating_add(Weight::from_parts(7_541_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_251_000 picoseconds.
        Weight::from_parts(2_304_000, 0)
            // Standard Error: 8_520
            .saturating_add(Weight::from_parts(3_798_413, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_168_000 picoseconds.
        Weight::from_parts(573_722, 0)
            // Standard Error: 11_642
            .saturating_add(Weight::from_parts(3_174_691, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(3_155_512, 0)
            // Standard Error: 1_212
            .saturating_add(Weight::from_parts(1_586_585, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_160_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 8_627
            .saturating_add(Weight::from_parts(2_929_529, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(1_609_241, 0)
            // Standard Error: 19_812
            .saturating_add(Weight::from_parts(5_162_833, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_892_000 picoseconds.
        Weight::from_parts(5_316_811, 0)
            // Standard Error: 1_578
            .saturating_add(Weight::from_parts(163_377, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_304_000 picoseconds.
        Weight::from_parts(4_554_683, 0)
            // Standard Error: 7_319
            .saturating_add(Weight::from_parts(2_595_958, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_595_958 -
            2_422_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_273_000 picoseconds.
        Weight::from_parts(5_046_075, 0)
            // Standard Error: 13_702
            .saturating_add(Weight::from_parts(2_422_191, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_684_000 picoseconds.
        Weight::from_parts(17_324_871, 0)
            // Standard Error: 38_532
            .saturating_add(Weight::from_parts(10_260_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_206_000 picoseconds.
        Weight::from_parts(2_634_425, 0)
            // Standard Error: 5_954
            .saturating_add(Weight::from_parts(1_275_538, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_288_000 picoseconds.
        Weight::from_parts(5_570_870, 0)
            // Standard Error: 12
            .saturating_add(Weight::from_parts(61, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_203_000 picoseconds.
        Weight::from_parts(1_788_159, 0)
            // Standard Error: 3_152
            .saturating_add(Weight::from_parts(267_842, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_164_000 picoseconds.
        Weight::from_parts(2_223_000, 0)
            // Standard Error: 4_611
            .saturating_add(Weight::from_parts(721_127, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_252_000 picoseconds.
        Weight::from_parts(2_347_000, 0)
            // Standard Error: 5_971
            .saturating_add(Weight::from_parts(742_209, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_406_000 picoseconds.
        Weight::from_parts(2_894_577, 0)
            // Standard Error: 8_027
            .saturating_add(Weight::from_parts(801_493, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_345_000 picoseconds.
        Weight::from_parts(31_295, 0)
            // Standard Error: 10_231
            .saturating_add(Weight::from_parts(1_543_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_937_000 picoseconds.
        Weight::from_parts(62_049, 0)
            // Standard Error: 12_087
            .saturating_add(Weight::from_parts(7_172_920, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_262_000 picoseconds.
        Weight::from_parts(2_306_000, 0)
            // Standard Error: 6_042
            .saturating_add(Weight::from_parts(3_394_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_151_000 picoseconds.
        Weight::from_parts(2_260_000, 0)
            // Standard Error: 5_891
            .saturating_add(Weight::from_parts(3_138_523, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_218_000 picoseconds.
        Weight::from_parts(2_277_000, 0)
            // Standard Error: 8_196
            .saturating_add(Weight::from_parts(3_167_033, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_246_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 5_536
            .saturating_add(Weight::from_parts(2_668_164, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_259_000 picoseconds.
        Weight::from_parts(45_432, 0)
            // Standard Error: 6_223
            .saturating_add(Weight::from_parts(645_076, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_168_000 picoseconds.
        Weight::from_parts(1_301_007, 0)
            // Standard Error: 4_929
            .saturating_add(Weight::from_parts(446_280, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_130_000 picoseconds.
        Weight::from_parts(2_205_000, 0)
            // Standard Error: 10_412
            .saturating_add(Weight::from_parts(1_894_722, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_170_000 picoseconds.
        Weight::from_parts(2_257_000, 0)
            // Standard Error: 7_708
            .saturating_add(Weight::from_parts(1_162_246, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_153_000 picoseconds.
        Weight::from_parts(1_682_106, 0)
            // Standard Error: 3_839
            .saturating_add(Weight::from_parts(384_381, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(1_669_708, 0)
            // Standard Error: 3_126
            .saturating_add(Weight::from_parts(384_474, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_249_000 picoseconds.
        Weight::from_parts(2_291_000, 0)
            // Standard Error: 4_476
            .saturating_add(Weight::from_parts(497_277, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_217_000 picoseconds.
        Weight::from_parts(2_287_000, 0)
            // Standard Error: 4_107
            .saturating_add(Weight::from_parts(524_095, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_163_000 picoseconds.
        Weight::from_parts(2_233_000, 0)
            // Standard Error: 3_690
            .saturating_add(Weight::from_parts(501_277, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_132_000 picoseconds.
        Weight::from_parts(1_082_506, 0)
            // Standard Error: 5_421
            .saturating_add(Weight::from_parts(400_448, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_211_000 picoseconds.
        Weight::from_parts(3_085_764, 0)
            // Standard Error: 1_912
            .saturating_add(Weight::from_parts(162_384, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_161_000 picoseconds.
        Weight::from_parts(2_849_158, 0)
            // Standard Error: 1_635
            .saturating_add(Weight::from_parts(153_763, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_279_000 picoseconds.
        Weight::from_parts(2_315_000, 0)
            // Standard Error: 11_776
            .saturating_add(Weight::from_parts(1_779_477, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_272_000 picoseconds.
        Weight::from_parts(2_342_000, 0)
            // Standard Error: 8_815
            .saturating_add(Weight::from_parts(1_197_093, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(2_258_000, 0)
            // Standard Error: 9_983
            .saturating_add(Weight::from_parts(1_838_257, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_227_000 picoseconds.
        Weight::from_parts(2_276_000, 0)
            // Standard Error: 7_749
            .saturating_add(Weight::from_parts(1_165_862, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_000 picoseconds.
        Weight::from_parts(2_246_000, 0)
            // Standard Error: 11_426
            .saturating_add(Weight::from_parts(1_828_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_187_000 picoseconds.
        Weight::from_parts(2_245_000, 0)
            // Standard Error: 7_973
            .saturating_add(Weight::from_parts(1_145_613, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_247_000 picoseconds.
        Weight::from_parts(2_273_000, 0)
            // Standard Error: 10_995
            .saturating_add(Weight::from_parts(1_789_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(2_252_000, 0)
            // Standard Error: 7_454
            .saturating_add(Weight::from_parts(1_207_539, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_219_000 picoseconds.
        Weight::from_parts(2_279_000, 0)
            // Standard Error: 10_576
            .saturating_add(Weight::from_parts(1_855_075, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_199_000 picoseconds.
        Weight::from_parts(2_265_000, 0)
            // Standard Error: 7_405
            .saturating_add(Weight::from_parts(1_180_265, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_245_000 picoseconds.
        Weight::from_parts(2_285_000, 0)
            // Standard Error: 10_994
            .saturating_add(Weight::from_parts(1_835_344, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_222_000 picoseconds.
        Weight::from_parts(2_277_000, 0)
            // Standard Error: 7_826
            .saturating_add(Weight::from_parts(1_163_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_102_000 picoseconds.
        Weight::from_parts(2_217_000, 0)
            // Standard Error: 11_374
            .saturating_add(Weight::from_parts(1_910_004, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_245_000 picoseconds.
        Weight::from_parts(2_303_000, 0)
            // Standard Error: 8_971
            .saturating_add(Weight::from_parts(1_182_859, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_230_000 picoseconds.
        Weight::from_parts(2_284_000, 0)
            // Standard Error: 12_177
            .saturating_add(Weight::from_parts(1_866_465, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_468_000 picoseconds.
        Weight::from_parts(2_638_000, 0)
            // Standard Error: 7_738
            .saturating_add(Weight::from_parts(1_119_369, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_191_000 picoseconds.
        Weight::from_parts(2_286_000, 0)
            // Standard Error: 10_340
            .saturating_add(Weight::from_parts(1_831_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_216_000 picoseconds.
        Weight::from_parts(2_260_000, 0)
            // Standard Error: 6_924
            .saturating_add(Weight::from_parts(1_210_933, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_202_000 picoseconds.
        Weight::from_parts(2_325_000, 0)
            // Standard Error: 9_907
            .saturating_add(Weight::from_parts(1_822_715, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_230_000 picoseconds.
        Weight::from_parts(2_294_000, 0)
            // Standard Error: 7_927
            .saturating_add(Weight::from_parts(1_168_287, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_189_000 picoseconds.
        Weight::from_parts(2_289_000, 0)
            // Standard Error: 8_768
            .saturating_add(Weight::from_parts(1_295_617, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_193_000 picoseconds.
        Weight::from_parts(2_292_000, 0)
            // Standard Error: 6_314
            .saturating_add(Weight::from_parts(658_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_312_000, 0)
            // Standard Error: 9_261
            .saturating_add(Weight::from_parts(1_348_699, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_257_000 picoseconds.
        Weight::from_parts(2_290_000, 0)
            // Standard Error: 5_457
            .saturating_add(Weight::from_parts(671_846, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_180_000 picoseconds.
        Weight::from_parts(2_241_000, 0)
            // Standard Error: 11_567
            .saturating_add(Weight::from_parts(1_835_171, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_196_000 picoseconds.
        Weight::from_parts(2_290_000, 0)
            // Standard Error: 7_436
            .saturating_add(Weight::from_parts(1_171_019, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_195_000 picoseconds.
        Weight::from_parts(6_299_544, 0)
            // Standard Error: 28_028
            .saturating_add(Weight::from_parts(2_500_140, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_249_000 picoseconds.
        Weight::from_parts(2_576_178, 0)
            // Standard Error: 12_042
            .saturating_add(Weight::from_parts(2_335_953, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_223_000 picoseconds.
        Weight::from_parts(8_638_891, 0)
            // Standard Error: 32_649
            .saturating_add(Weight::from_parts(2_462_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_231_000 picoseconds.
        Weight::from_parts(2_731_170, 0)
            // Standard Error: 19_116
            .saturating_add(Weight::from_parts(2_437_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_261_000 picoseconds.
        Weight::from_parts(1_535_146, 0)
            // Standard Error: 30_575
            .saturating_add(Weight::from_parts(9_634_377, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_209_000 picoseconds.
        Weight::from_parts(5_244_298, 0)
            // Standard Error: 48_615
            .saturating_add(Weight::from_parts(7_381_672, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260_000 picoseconds.
        Weight::from_parts(8_453_159, 0)
            // Standard Error: 30_530
            .saturating_add(Weight::from_parts(2_541_459, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_242_000 picoseconds.
        Weight::from_parts(5_507_917, 0)
            // Standard Error: 21_457
            .saturating_add(Weight::from_parts(2_217_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_163_000 picoseconds.
        Weight::from_parts(2_341_000, 0)
            // Standard Error: 9_253
            .saturating_add(Weight::from_parts(1_354_282, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_170_000 picoseconds.
        Weight::from_parts(2_224_000, 0)
            // Standard Error: 3_908
            .saturating_add(Weight::from_parts(589_876, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_184_000 picoseconds.
        Weight::from_parts(2_265_000, 0)
            // Standard Error: 9_943
            .saturating_add(Weight::from_parts(1_308_630, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_212_000 picoseconds.
        Weight::from_parts(2_273_000, 0)
            // Standard Error: 5_843
            .saturating_add(Weight::from_parts(653_388, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_228_000 picoseconds.
        Weight::from_parts(2_293_000, 0)
            // Standard Error: 9_157
            .saturating_add(Weight::from_parts(1_290_731, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_232_000 picoseconds.
        Weight::from_parts(2_276_000, 0)
            // Standard Error: 4_020
            .saturating_add(Weight::from_parts(618_071, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_239_000 picoseconds.
        Weight::from_parts(2_292_000, 0)
            // Standard Error: 7_192
            .saturating_add(Weight::from_parts(1_061_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_157_000 picoseconds.
        Weight::from_parts(2_245_000, 0)
            // Standard Error: 3_756
            .saturating_add(Weight::from_parts(568_744, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_248_000 picoseconds.
        Weight::from_parts(2_324_000, 0)
            // Standard Error: 7_917
            .saturating_add(Weight::from_parts(1_106_132, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_205_000 picoseconds.
        Weight::from_parts(2_292_000, 0)
            // Standard Error: 4_617
            .saturating_add(Weight::from_parts(599_461, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_215_000 picoseconds.
        Weight::from_parts(2_346_000, 0)
            // Standard Error: 7_501
            .saturating_add(Weight::from_parts(1_125_645, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_255_000 picoseconds.
        Weight::from_parts(2_306_000, 0)
            // Standard Error: 5_262
            .saturating_add(Weight::from_parts(624_680, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_231_000 picoseconds.
        Weight::from_parts(2_341_000, 0)
            // Standard Error: 7_879
            .saturating_add(Weight::from_parts(1_068_877, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_192_000 picoseconds.
        Weight::from_parts(2_288_000, 0)
            // Standard Error: 4_124
            .saturating_add(Weight::from_parts(567_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(2_322_000, 0)
            // Standard Error: 8_516
            .saturating_add(Weight::from_parts(1_174_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_171_000 picoseconds.
        Weight::from_parts(2_258_000, 0)
            // Standard Error: 4_901
            .saturating_add(Weight::from_parts(628_068, 0).saturating_mul(r.into()))
    }
}
