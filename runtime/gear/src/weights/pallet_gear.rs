// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-10, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn pay_program_rent() -> Weight;
    fn resume_session_init() -> Weight;
    fn resume_session_push(c: u32, ) -> Weight;
    fn resume_session_commit(c: u32, ) -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_message_with_voucher(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn send_reply_with_voucher(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn alloc_per_page(p: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_reply_deposit(r: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_reply_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_pay_program_rent(r: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn mem_grow(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i32extend8s(r: u32, ) -> Weight;
    fn instr_i32extend16s(r: u32, ) -> Weight;
    fn instr_i64extend8s(r: u32, ) -> Weight;
    fn instr_i64extend16s(r: u32, ) -> Weight;
    fn instr_i64extend32s(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 894_000 picoseconds.
        Weight::from_parts(958_000, 0)
            // Standard Error: 918
            .saturating_add(Weight::from_parts(255_256, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_827_000 picoseconds.
        Weight::from_parts(2_914_000, 3506)
            // Standard Error: 1_066
            .saturating_add(Weight::from_parts(686_589, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_991_000 picoseconds.
        Weight::from_parts(80_966_521, 0)
            // Standard Error: 4_595
            .saturating_add(Weight::from_parts(2_245_868, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `720`
        //  Estimated: `22449`
        // Minimum execution time: 55_887_000 picoseconds.
        Weight::from_parts(57_183_000, 22449)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `679`
        //  Estimated: `15019`
        // Minimum execution time: 60_915 nanoseconds.
        Weight::from_parts(71_195_000, 15019)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `602`
        //  Estimated: `20935`
        // Minimum execution time: 60_003_000 picoseconds.
        Weight::from_parts(60_785_000, 20935)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `366`
        //  Estimated: `7660`
        // Minimum execution time: 11_822_000 picoseconds.
        Weight::from_parts(11_822_000, 7660)
            // Standard Error: 374_537
            .saturating_add(Weight::from_parts(13_833_636, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1337 + c * (16389 ±0)`
        //  Estimated: `41107 + c * (131112 ±0)`
        // Minimum execution time: 88_858_000 picoseconds.
        Weight::from_parts(88_858_000, 41107)
            // Standard Error: 3_376_184
            .saturating_add(Weight::from_parts(66_904_226, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 63_443_000 picoseconds.
        Weight::from_parts(52_213_790, 4990)
            // Standard Error: 37_902
            .saturating_add(Weight::from_parts(53_940_478, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `681`
        //  Estimated: `37402`
        // Minimum execution time: 62_741_000 picoseconds.
        Weight::from_parts(90_810_420, 37402)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_328, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `164`
        //  Estimated: `33077`
        // Minimum execution time: 9_887_035_000 picoseconds.
        Weight::from_parts(353_656_005, 33077)
            // Standard Error: 148_602
            .saturating_add(Weight::from_parts(53_937_770, 0).saturating_mul(c.into()))
            // Standard Error: 8
            .saturating_add(Weight::from_parts(2_251, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `310`
        //  Estimated: `23285`
        // Minimum execution time: 54_474_000 picoseconds.
        Weight::from_parts(41_887_068, 23285)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_166, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 87_839_000 picoseconds.
        Weight::from_parts(54_019_154, 27177)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_240, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `883`
        //  Estimated: `40497`
        // Minimum execution time: 77_964_000 picoseconds.
        Weight::from_parts(63_960_879, 40497)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_173, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1082`
        //  Estimated: `45766`
        // Minimum execution time: 136_428_000 picoseconds.
        Weight::from_parts(133_931_980, 45766)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_162, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `689`
        //  Estimated: `71875`
        // Minimum execution time: 295_825_000 picoseconds.
        Weight::from_parts(308_259_542, 71875)
            // Standard Error: 1_367
            .saturating_add(Weight::from_parts(5_226, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `689`
        //  Estimated: `71763`
        // Minimum execution time: 309_322_000 picoseconds.
        Weight::from_parts(326_061_562, 71763)
            .saturating_add(T::DbWeight::get().reads(27_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 45_320_000 picoseconds.
        Weight::from_parts(45_973_000, 3899)
            // Standard Error: 24_987
            .saturating_add(Weight::from_parts(52_333_467, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_275_000 picoseconds.
        Weight::from_parts(89_733_000, 0)
            // Standard Error: 3_987_023
            .saturating_add(Weight::from_parts(669_872_725, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 413_044_000 picoseconds.
        Weight::from_parts(343_710_210, 0)
            // Standard Error: 8_256
            .saturating_add(Weight::from_parts(31_367_607, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 242_596_000 picoseconds.
        Weight::from_parts(282_469_923, 0)
            // Standard Error: 397_100
            .saturating_add(Weight::from_parts(163_114_248, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_265_000 picoseconds.
        Weight::from_parts(3_465_198, 0)
            // Standard Error: 8_582
            .saturating_add(Weight::from_parts(22_066_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_455_000 picoseconds.
        Weight::from_parts(86_670_947, 0)
            // Standard Error: 8_243
            .saturating_add(Weight::from_parts(4_314_946, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_662_000 picoseconds.
        Weight::from_parts(135_651_447, 0)
            // Standard Error: 24_496
            .saturating_add(Weight::from_parts(4_660_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_825_000 picoseconds.
        Weight::from_parts(113_376_632, 0)
            // Standard Error: 451_002
            .saturating_add(Weight::from_parts(229_396_409, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_874_000 picoseconds.
        Weight::from_parts(87_482_719, 0)
            // Standard Error: 241_209
            .saturating_add(Weight::from_parts(225_074_263, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 120_198 nanoseconds.
        Weight::from_parts(130_172_800, 0)
            // Standard Error: 2_420_191
            .saturating_add(Weight::from_parts(9_196_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_576_000 picoseconds.
        Weight::from_parts(81_987_812, 0)
            // Standard Error: 326_487
            .saturating_add(Weight::from_parts(224_021_774, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_062_000 picoseconds.
        Weight::from_parts(84_738_989, 0)
            // Standard Error: 326_108
            .saturating_add(Weight::from_parts(224_150_105, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_506_000 picoseconds.
        Weight::from_parts(85_780_457, 0)
            // Standard Error: 315_785
            .saturating_add(Weight::from_parts(223_203_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_398_000 picoseconds.
        Weight::from_parts(87_720_451, 0)
            // Standard Error: 355_509
            .saturating_add(Weight::from_parts(222_916_085, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_856_000 picoseconds.
        Weight::from_parts(81_978_713, 0)
            // Standard Error: 333_005
            .saturating_add(Weight::from_parts(223_589_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_035_000 picoseconds.
        Weight::from_parts(81_175_641, 0)
            // Standard Error: 371_488
            .saturating_add(Weight::from_parts(223_601_003, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 707_622_000 picoseconds.
        Weight::from_parts(775_668_067, 0)
            // Standard Error: 518_931
            .saturating_add(Weight::from_parts(303_585_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_019_360_000 picoseconds.
        Weight::from_parts(1_023_540_000, 0)
            // Standard Error: 59_193
            .saturating_add(Weight::from_parts(13_545_440, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_489_000 picoseconds.
        Weight::from_parts(86_828_514, 0)
            // Standard Error: 337_331
            .saturating_add(Weight::from_parts(223_427_707, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_974_000 picoseconds.
        Weight::from_parts(79_543_469, 0)
            // Standard Error: 373_848
            .saturating_add(Weight::from_parts(227_384_017, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_758_000 picoseconds.
        Weight::from_parts(109_128_309, 0)
            // Standard Error: 451_261
            .saturating_add(Weight::from_parts(292_953_148, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_000_000 picoseconds.
        Weight::from_parts(154_918_188, 0)
            // Standard Error: 618_649
            .saturating_add(Weight::from_parts(739_860_064, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_771_000 picoseconds.
        Weight::from_parts(142_596_859, 0)
            // Standard Error: 522_119
            .saturating_add(Weight::from_parts(428_351_391, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 510_030_000 picoseconds.
        Weight::from_parts(515_910_000, 0)
            // Standard Error: 68_221
            .saturating_add(Weight::from_parts(21_327_544, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_980_000 picoseconds.
        Weight::from_parts(163_222_588, 0)
            // Standard Error: 491_863
            .saturating_add(Weight::from_parts(431_633_784, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 518_081_000 picoseconds.
        Weight::from_parts(522_651_000, 0)
            // Standard Error: 63_824
            .saturating_add(Weight::from_parts(21_155_134, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_858_000 picoseconds.
        Weight::from_parts(766_977_954, 0)
            // Standard Error: 545_689
            .saturating_add(Weight::from_parts(443_981_323, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 713_357_000 picoseconds.
        Weight::from_parts(791_178_659, 0)
            // Standard Error: 557_532
            .saturating_add(Weight::from_parts(448_990_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_972_000 picoseconds.
        Weight::from_parts(83_499_128, 0)
            // Standard Error: 355_406
            .saturating_add(Weight::from_parts(232_914_562, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_599_817_000 picoseconds.
        Weight::from_parts(4_740_344_196, 0)
            // Standard Error: 500_908
            .saturating_add(Weight::from_parts(329_587_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 635_018_000 picoseconds.
        Weight::from_parts(639_337_000, 0)
            // Standard Error: 63_613
            .saturating_add(Weight::from_parts(31_631_709, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_609_581_000 picoseconds.
        Weight::from_parts(4_730_267_676, 0)
            // Standard Error: 514_700
            .saturating_add(Weight::from_parts(388_013_624, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_590_956_000 picoseconds.
        Weight::from_parts(4_727_513_303, 0)
            // Standard Error: 522_841
            .saturating_add(Weight::from_parts(400_388_425, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 225_094_000 picoseconds.
        Weight::from_parts(304_521_274, 0)
            // Standard Error: 450_640
            .saturating_add(Weight::from_parts(442_541_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 685_897_000 picoseconds.
        Weight::from_parts(698_707_000, 0)
            // Standard Error: 68_258
            .saturating_add(Weight::from_parts(21_614_399, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_783_190_000 picoseconds.
        Weight::from_parts(4_923_849_495, 0)
            // Standard Error: 513_342
            .saturating_add(Weight::from_parts(397_043_290, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_149_000 picoseconds.
        Weight::from_parts(84_610_585, 0)
            // Standard Error: 247_995
            .saturating_add(Weight::from_parts(27_817_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_353_000 picoseconds.
        Weight::from_parts(95_410_315, 0)
            // Standard Error: 2_835
            .saturating_add(Weight::from_parts(429_971, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_557_000 picoseconds.
        Weight::from_parts(84_989_942, 0)
            // Standard Error: 238_308
            .saturating_add(Weight::from_parts(25_836_457, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_256_000 picoseconds.
        Weight::from_parts(93_810_527, 0)
            // Standard Error: 996
            .saturating_add(Weight::from_parts(427_253, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_478_000 picoseconds.
        Weight::from_parts(88_243_836, 0)
            // Standard Error: 253_045
            .saturating_add(Weight::from_parts(24_147_463, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_877_000 picoseconds.
        Weight::from_parts(87_502_304, 0)
            // Standard Error: 244_833
            .saturating_add(Weight::from_parts(21_823_195, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_825_000 picoseconds.
        Weight::from_parts(107_252_190, 0)
            // Standard Error: 427_416
            .saturating_add(Weight::from_parts(317_287_791, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_638_000 picoseconds.
        Weight::from_parts(106_334_000, 0)
            // Standard Error: 2_112
            .saturating_add(Weight::from_parts(640_884, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 700_449_000 picoseconds.
        Weight::from_parts(711_805_908, 0)
            // Standard Error: 1_330_204
            .saturating_add(Weight::from_parts(29_397_491, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 700_472_000 picoseconds.
        Weight::from_parts(712_966_353, 0)
            // Standard Error: 1_215_438
            .saturating_add(Weight::from_parts(30_417_346, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_509_000 picoseconds.
        Weight::from_parts(97_528_446, 0)
            // Standard Error: 251_822
            .saturating_add(Weight::from_parts(15_067_353, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_958_000 picoseconds.
        Weight::from_parts(94_675_639, 0)
            // Standard Error: 2_538
            .saturating_add(Weight::from_parts(431_780, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_770_000 picoseconds.
        Weight::from_parts(94_195_877, 0)
            // Standard Error: 263_692
            .saturating_add(Weight::from_parts(18_178_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_419_000 picoseconds.
        Weight::from_parts(93_346_913, 0)
            // Standard Error: 1_659
            .saturating_add(Weight::from_parts(428_792, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_063_000 picoseconds.
        Weight::from_parts(85_396_929, 0)
            // Standard Error: 346_825
            .saturating_add(Weight::from_parts(227_362_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_211_000 picoseconds.
        Weight::from_parts(84_025_602, 0)
            // Standard Error: 327_404
            .saturating_add(Weight::from_parts(227_134_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_124_000 picoseconds.
        Weight::from_parts(739_297_695, 0)
            // Standard Error: 476_059
            .saturating_add(Weight::from_parts(240_167_488, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 719_926_000 picoseconds.
        Weight::from_parts(736_118_689, 0)
            // Standard Error: 646
            .saturating_add(Weight::from_parts(154_290, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_256_437_000 picoseconds.
        Weight::from_parts(5_350_749_400, 0)
            // Standard Error: 488_269
            .saturating_add(Weight::from_parts(257_810_697, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_512_254_000 picoseconds.
        Weight::from_parts(5_502_496_522, 0)
            // Standard Error: 8_680
            .saturating_add(Weight::from_parts(13_719_548, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_538_000 picoseconds.
        Weight::from_parts(104_117_021, 0)
            // Standard Error: 402_932
            .saturating_add(Weight::from_parts(238_231_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 308_000_000 picoseconds.
        Weight::from_parts(310_532_000, 0)
            // Standard Error: 60_371
            .saturating_add(Weight::from_parts(25_856_497, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_959_000 picoseconds.
        Weight::from_parts(81_945_366, 0)
            // Standard Error: 324_586
            .saturating_add(Weight::from_parts(223_211_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_360_000 picoseconds.
        Weight::from_parts(86_594_408, 0)
            // Standard Error: 241_324
            .saturating_add(Weight::from_parts(26_084_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_040_000 picoseconds.
        Weight::from_parts(86_085_228, 0)
            // Standard Error: 233_631
            .saturating_add(Weight::from_parts(13_892_571, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_026_000 picoseconds.
        Weight::from_parts(87_403_708, 0)
            // Standard Error: 235_568
            .saturating_add(Weight::from_parts(15_067_391, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_859_000 picoseconds.
        Weight::from_parts(88_275_261, 0)
            // Standard Error: 253_025
            .saturating_add(Weight::from_parts(14_650_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_023_000 picoseconds.
        Weight::from_parts(87_604_377, 0)
            // Standard Error: 238_932
            .saturating_add(Weight::from_parts(14_000_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_310_000 picoseconds.
        Weight::from_parts(206_958_431, 0)
            // Standard Error: 400_501
            .saturating_add(Weight::from_parts(333_696_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_082_000 picoseconds.
        Weight::from_parts(156_632_427, 0)
            // Standard Error: 412_316
            .saturating_add(Weight::from_parts(513_723_126, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_030_954_000 picoseconds.
        Weight::from_parts(45_096_110_000, 0)
            // Standard Error: 263_167
            .saturating_add(Weight::from_parts(7_378_526, 0).saturating_mul(p.into()))
            // Standard Error: 263_154
            .saturating_add(Weight::from_parts(157_075_733, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_942_000 picoseconds.
        Weight::from_parts(142_236_888, 0)
            // Standard Error: 451_964
            .saturating_add(Weight::from_parts(518_401_980, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_241_459_000 picoseconds.
        Weight::from_parts(46_282_185_000, 0)
            // Standard Error: 278_840
            .saturating_add(Weight::from_parts(6_935_428, 0).saturating_mul(p.into()))
            // Standard Error: 278_826
            .saturating_add(Weight::from_parts(156_849_709, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 82_623_000 picoseconds.
        Weight::from_parts(118_249_499, 1131)
            // Standard Error: 6_620
            .saturating_add(Weight::from_parts(12_056_340, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 84_816_000 picoseconds.
        Weight::from_parts(86_081_000, 1131)
            // Standard Error: 27_277
            .saturating_add(Weight::from_parts(34_504_816, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_218_028_000 picoseconds.
        Weight::from_parts(6_057_302_789, 5069931)
            // Standard Error: 49_313
            .saturating_add(Weight::from_parts(34_499_636, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 83_941_000 picoseconds.
        Weight::from_parts(85_575_000, 1939)
            // Standard Error: 60_804
            .saturating_add(Weight::from_parts(46_854_198, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 95_202_000 picoseconds.
        Weight::from_parts(93_587_585, 1496)
            // Standard Error: 71_098
            .saturating_add(Weight::from_parts(36_280_234, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 734_637_000 picoseconds.
        Weight::from_parts(737_719_349, 1496)
            // Standard Error: 101_478
            .saturating_add(Weight::from_parts(41_820_868, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_129_399_000 picoseconds.
        Weight::from_parts(1_130_250_863, 317931)
            // Standard Error: 117_710
            .saturating_add(Weight::from_parts(40_940_896, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_309_945_000 picoseconds.
        Weight::from_parts(4_312_186_541, 0)
            // Standard Error: 9_933
            .saturating_add(Weight::from_parts(3_360_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_319_177_000 picoseconds.
        Weight::from_parts(4_310_433_352, 0)
            // Standard Error: 9_817
            .saturating_add(Weight::from_parts(3_386_115, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_682_149_000 picoseconds.
        Weight::from_parts(9_534_903_961, 0)
            // Standard Error: 165_238
            .saturating_add(Weight::from_parts(15_711_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_439_284_000 picoseconds.
        Weight::from_parts(9_155_072_747, 0)
            // Standard Error: 229_147
            .saturating_add(Weight::from_parts(12_859_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_128_000 picoseconds.
        Weight::from_parts(2_194_000, 0)
            // Standard Error: 14_848
            .saturating_add(Weight::from_parts(3_845_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_000 picoseconds.
        Weight::from_parts(2_251_000, 0)
            // Standard Error: 8_592
            .saturating_add(Weight::from_parts(3_036_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_150_000 picoseconds.
        Weight::from_parts(3_370_596, 0)
            // Standard Error: 946
            .saturating_add(Weight::from_parts(1_560_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_115_000 picoseconds.
        Weight::from_parts(2_179_000, 0)
            // Standard Error: 8_397
            .saturating_add(Weight::from_parts(2_875_619, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_150_000 picoseconds.
        Weight::from_parts(2_232_000, 0)
            // Standard Error: 11_395
            .saturating_add(Weight::from_parts(5_262_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_899_000 picoseconds.
        Weight::from_parts(7_856_079, 0)
            // Standard Error: 1_858
            .saturating_add(Weight::from_parts(84_176, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_234_000 picoseconds.
        Weight::from_parts(3_679_699, 0)
            // Standard Error: 5_771
            .saturating_add(Weight::from_parts(2_574_381, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_574_381 -
            2_401_366, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_205_000 picoseconds.
        Weight::from_parts(3_872_252, 0)
            // Standard Error: 12_209
            .saturating_add(Weight::from_parts(2_401_366, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_566_000 picoseconds.
        Weight::from_parts(31_538, 0)
            // Standard Error: 31_816
            .saturating_add(Weight::from_parts(10_617_516, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_321_000 picoseconds.
        Weight::from_parts(12_464_000, 0)
            // Standard Error: 11_364
            .saturating_add(Weight::from_parts(990_467, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_209_000 picoseconds.
        Weight::from_parts(5_522_986, 0)
            // Standard Error: 14
            .saturating_add(Weight::from_parts(27, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_063_000 picoseconds.
        Weight::from_parts(1_941_048, 0)
            // Standard Error: 3_339
            .saturating_add(Weight::from_parts(225_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_085_000 picoseconds.
        Weight::from_parts(2_189_000, 0)
            // Standard Error: 8_114
            .saturating_add(Weight::from_parts(632_754, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_090_000 picoseconds.
        Weight::from_parts(2_154_000, 0)
            // Standard Error: 8_248
            .saturating_add(Weight::from_parts(691_250, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_935_000 picoseconds.
        Weight::from_parts(3_095_178, 0)
            // Standard Error: 12_920
            .saturating_add(Weight::from_parts(596_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_067_000 picoseconds.
        Weight::from_parts(6_123_000, 0)
            // Standard Error: 15_262
            .saturating_add(Weight::from_parts(1_053_243, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_780_000 picoseconds.
        Weight::from_parts(3_942_000, 0)
            // Standard Error: 10_662
            .saturating_add(Weight::from_parts(6_978_881, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_181_000, 0)
            // Standard Error: 11_650
            .saturating_add(Weight::from_parts(3_412_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_116_000 picoseconds.
        Weight::from_parts(2_135_000, 0)
            // Standard Error: 10_112
            .saturating_add(Weight::from_parts(3_164_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_139_000 picoseconds.
        Weight::from_parts(2_211_000, 0)
            // Standard Error: 9_532
            .saturating_add(Weight::from_parts(2_986_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(2_199_000, 0)
            // Standard Error: 9_525
            .saturating_add(Weight::from_parts(2_510_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_212_000 picoseconds.
        Weight::from_parts(2_288_000, 0)
            // Standard Error: 5_552
            .saturating_add(Weight::from_parts(533_719, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_104_000 picoseconds.
        Weight::from_parts(1_251_683, 0)
            // Standard Error: 5_219
            .saturating_add(Weight::from_parts(370_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_101_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 21_377
            .saturating_add(Weight::from_parts(1_566_668, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_120_000 picoseconds.
        Weight::from_parts(2_229_000, 0)
            // Standard Error: 10_885
            .saturating_add(Weight::from_parts(892_344, 0).saturating_mul(r.into()))
    }
        /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_275_000 picoseconds.
        Weight::from_parts(1_108_310, 0)
            // Standard Error: 4_694
            .saturating_add(Weight::from_parts(426_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(1_738_492, 0)
            // Standard Error: 3_326
            .saturating_add(Weight::from_parts(383_698, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_334_000, 0)
            // Standard Error: 3_868
            .saturating_add(Weight::from_parts(529_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_326_000 picoseconds.
        Weight::from_parts(2_396_000, 0)
            // Standard Error: 4_728
            .saturating_add(Weight::from_parts(525_181, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(416_491, 0)
            // Standard Error: 7_377
            .saturating_add(Weight::from_parts(530_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_101_000 picoseconds.
        Weight::from_parts(2_285_581, 0)
            // Standard Error: 4_234
            .saturating_add(Weight::from_parts(267_210, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_092_000 picoseconds.
        Weight::from_parts(2_421_728, 0)
            // Standard Error: 2_258
            .saturating_add(Weight::from_parts(159_975, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_061_000 picoseconds.
        Weight::from_parts(2_769_492, 0)
            // Standard Error: 2_123
            .saturating_add(Weight::from_parts(160_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_242_000, 0)
            // Standard Error: 15_694
            .saturating_add(Weight::from_parts(1_779_551, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_049_000 picoseconds.
        Weight::from_parts(2_164_000, 0)
            // Standard Error: 11_580
            .saturating_add(Weight::from_parts(1_032_413, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_073_000 picoseconds.
        Weight::from_parts(2_161_000, 0)
            // Standard Error: 18_179
            .saturating_add(Weight::from_parts(1_722_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_105_000 picoseconds.
        Weight::from_parts(2_185_000, 0)
            // Standard Error: 12_114
            .saturating_add(Weight::from_parts(1_063_540, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_112_000 picoseconds.
        Weight::from_parts(2_231_000, 0)
            // Standard Error: 18_390
            .saturating_add(Weight::from_parts(1_790_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_187_000 picoseconds.
        Weight::from_parts(2_222_000, 0)
            // Standard Error: 11_507
            .saturating_add(Weight::from_parts(1_063_742, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_160_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 15_644
            .saturating_add(Weight::from_parts(1_737_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(2_230_000, 0)
            // Standard Error: 7_985
            .saturating_add(Weight::from_parts(1_141_500, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_180_000 picoseconds.
        Weight::from_parts(2_260_000, 0)
            // Standard Error: 10_070
            .saturating_add(Weight::from_parts(1_822_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_043_000 picoseconds.
        Weight::from_parts(2_187_000, 0)
            // Standard Error: 7_406
            .saturating_add(Weight::from_parts(1_200_921, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_133_000 picoseconds.
        Weight::from_parts(2_201_000, 0)
            // Standard Error: 12_270
            .saturating_add(Weight::from_parts(1_861_706, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_140_000 picoseconds.
        Weight::from_parts(2_207_000, 0)
            // Standard Error: 11_687
            .saturating_add(Weight::from_parts(1_018_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_213_000, 0)
            // Standard Error: 16_985
            .saturating_add(Weight::from_parts(1_730_980, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_052_000 picoseconds.
        Weight::from_parts(2_152_000, 0)
            // Standard Error: 12_660
            .saturating_add(Weight::from_parts(1_038_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(2_257_000, 0)
            // Standard Error: 17_238
            .saturating_add(Weight::from_parts(1_625_018, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(2_202_000, 0)
            // Standard Error: 13_051
            .saturating_add(Weight::from_parts(1_014_911, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_096_000 picoseconds.
        Weight::from_parts(2_115_000, 0)
            // Standard Error: 17_557
            .saturating_add(Weight::from_parts(1_685_454, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_156_000 picoseconds.
        Weight::from_parts(2_193_000, 0)
            // Standard Error: 11_250
            .saturating_add(Weight::from_parts(971_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_021_000 picoseconds.
        Weight::from_parts(2_189_000, 0)
            // Standard Error: 16_960
            .saturating_add(Weight::from_parts(1_592_479, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_126_000 picoseconds.
        Weight::from_parts(2_214_000, 0)
            // Standard Error: 11_271
            .saturating_add(Weight::from_parts(959_747, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_145_000 picoseconds.
        Weight::from_parts(2_203_000, 0)
            // Standard Error: 12_661
            .saturating_add(Weight::from_parts(1_152_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_134_000 picoseconds.
        Weight::from_parts(2_255_000, 0)
            // Standard Error: 5_950
            .saturating_add(Weight::from_parts(569_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_185_000 picoseconds.
        Weight::from_parts(2_234_000, 0)
            // Standard Error: 12_196
            .saturating_add(Weight::from_parts(1_137_663, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_219_000 picoseconds.
        Weight::from_parts(2_265_000, 0)
            // Standard Error: 5_552
            .saturating_add(Weight::from_parts(546_651, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_098_000 picoseconds.
        Weight::from_parts(2_197_000, 0)
            // Standard Error: 16_892
            .saturating_add(Weight::from_parts(1_570_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_170_000 picoseconds.
        Weight::from_parts(2_248_000, 0)
            // Standard Error: 10_829
            .saturating_add(Weight::from_parts(1_032_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_086_000 picoseconds.
        Weight::from_parts(2_123_000, 0)
            // Standard Error: 10_493
            .saturating_add(Weight::from_parts(2_592_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(2_204_000, 0)
            // Standard Error: 14_342
            .saturating_add(Weight::from_parts(2_135_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_236_000, 0)
            // Standard Error: 15_839
            .saturating_add(Weight::from_parts(2_721_349, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_215_000, 0)
            // Standard Error: 17_136
            .saturating_add(Weight::from_parts(2_116_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_114_000 picoseconds.
        Weight::from_parts(2_173_000, 0)
            // Standard Error: 26_776
            .saturating_add(Weight::from_parts(9_557_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_150_000 picoseconds.
        Weight::from_parts(2_195_000, 0)
            // Standard Error: 26_356
            .saturating_add(Weight::from_parts(7_538_824, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_168_000, 0)
            // Standard Error: 12_144
            .saturating_add(Weight::from_parts(2_801_403, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_044_000 picoseconds.
        Weight::from_parts(2_158_000, 0)
            // Standard Error: 14_548
            .saturating_add(Weight::from_parts(2_250_205, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 13_025
            .saturating_add(Weight::from_parts(1_166_671, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_193_000, 0)
            // Standard Error: 5_870
            .saturating_add(Weight::from_parts(548_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_103_000 picoseconds.
        Weight::from_parts(2_184_000, 0)
            // Standard Error: 12_641
            .saturating_add(Weight::from_parts(1_235_057, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_221_000, 0)
            // Standard Error: 5_479
            .saturating_add(Weight::from_parts(535_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_114_000 picoseconds.
        Weight::from_parts(2_164_000, 0)
            // Standard Error: 12_576
            .saturating_add(Weight::from_parts(1_162_617, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_081_000 picoseconds.
        Weight::from_parts(2_186_000, 0)
            // Standard Error: 5_779
            .saturating_add(Weight::from_parts(587_029, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_104_000 picoseconds.
        Weight::from_parts(2_213_000, 0)
            // Standard Error: 10_772
            .saturating_add(Weight::from_parts(999_407, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_097_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 6_109
            .saturating_add(Weight::from_parts(511_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_121_000 picoseconds.
        Weight::from_parts(2_229_000, 0)
            // Standard Error: 10_402
            .saturating_add(Weight::from_parts(932_389, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_085_000 picoseconds.
        Weight::from_parts(2_197_000, 0)
            // Standard Error: 5_401
            .saturating_add(Weight::from_parts(528_443, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 11_722
            .saturating_add(Weight::from_parts(1_086_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_079_000 picoseconds.
        Weight::from_parts(2_165_000, 0)
            // Standard Error: 6_731
            .saturating_add(Weight::from_parts(539_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_203_000 picoseconds.
        Weight::from_parts(2_243_000, 0)
            // Standard Error: 12_208
            .saturating_add(Weight::from_parts(1_027_440, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(16_315, 0)
            // Standard Error: 8_129
            .saturating_add(Weight::from_parts(573_271, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_235_000, 0)
            // Standard Error: 11_151
            .saturating_add(Weight::from_parts(992_940, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_187_000 picoseconds.
        Weight::from_parts(2_256_000, 0)
            // Standard Error: 6_162
            .saturating_add(Weight::from_parts(509_221, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 894_000 picoseconds.
        Weight::from_parts(958_000, 0)
            // Standard Error: 918
            .saturating_add(Weight::from_parts(255_256, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_827_000 picoseconds.
        Weight::from_parts(2_914_000, 3506)
            // Standard Error: 1_066
            .saturating_add(Weight::from_parts(686_589, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_991_000 picoseconds.
        Weight::from_parts(80_966_521, 0)
            // Standard Error: 4_595
            .saturating_add(Weight::from_parts(2_245_868, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `720`
        //  Estimated: `22449`
        // Minimum execution time: 55_887_000 picoseconds.
        Weight::from_parts(57_183_000, 22449)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn pay_program_rent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `679`
        //  Estimated: `15019`
        // Minimum execution time: 60_915 nanoseconds.
        Weight::from_parts(71_195_000, 15019)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    fn resume_session_init() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `602`
        //  Estimated: `20935`
        // Minimum execution time: 60_003_000 picoseconds.
        Weight::from_parts(60_785_000, 20935)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 64]`.
    fn resume_session_push(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `366`
        //  Estimated: `7660`
        // Minimum execution time: 11_822_000 picoseconds.
        Weight::from_parts(11_822_000, 7660)
            // Standard Error: 374_537
            .saturating_add(Weight::from_parts(13_833_636, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 2044]`.
    fn resume_session_commit(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1337 + c * (16389 ±0)`
        //  Estimated: `41107 + c * (131112 ±0)`
        // Minimum execution time: 88_858_000 picoseconds.
        Weight::from_parts(88_858_000, 41107)
            // Standard Error: 3_376_184
            .saturating_add(Weight::from_parts(66_904_226, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
            .saturating_add(Weight::from_parts(0, 131112).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 63_443_000 picoseconds.
        Weight::from_parts(52_213_790, 4990)
            // Standard Error: 37_902
            .saturating_add(Weight::from_parts(53_940_478, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `681`
        //  Estimated: `37402`
        // Minimum execution time: 62_741_000 picoseconds.
        Weight::from_parts(90_810_420, 37402)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_328, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `164`
        //  Estimated: `33077`
        // Minimum execution time: 9_887_035_000 picoseconds.
        Weight::from_parts(353_656_005, 33077)
            // Standard Error: 148_602
            .saturating_add(Weight::from_parts(53_937_770, 0).saturating_mul(c.into()))
            // Standard Error: 8
            .saturating_add(Weight::from_parts(2_251, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(14_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `310`
        //  Estimated: `23285`
        // Minimum execution time: 54_474_000 picoseconds.
        Weight::from_parts(41_887_068, 23285)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(1_166, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `451`
        //  Estimated: `27177`
        // Minimum execution time: 87_839_000 picoseconds.
        Weight::from_parts(54_019_154, 27177)
            // Standard Error: 2
            .saturating_add(Weight::from_parts(1_240, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(9_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `883`
        //  Estimated: `40497`
        // Minimum execution time: 77_964_000 picoseconds.
        Weight::from_parts(63_960_879, 40497)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_173, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply_with_voucher(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1082`
        //  Estimated: `45766`
        // Minimum execution time: 136_428_000 picoseconds.
        Weight::from_parts(133_931_980, 45766)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_162, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(14_u64))
            .saturating_add(RocksDbWeight::get().writes(11_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `689`
        //  Estimated: `71875`
        // Minimum execution time: 295_825_000 picoseconds.
        Weight::from_parts(308_259_542, 71875)
            // Standard Error: 1_367
            .saturating_add(Weight::from_parts(5_226, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `689`
        //  Estimated: `71763`
        // Minimum execution time: 309_322_000 picoseconds.
        Weight::from_parts(326_061_562, 71763)
            .saturating_add(RocksDbWeight::get().reads(27_u64))
            .saturating_add(RocksDbWeight::get().writes(22_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3899 + c * (2150 ±0)`
        // Minimum execution time: 45_320_000 picoseconds.
        Weight::from_parts(45_973_000, 3899)
            // Standard Error: 24_987
            .saturating_add(Weight::from_parts(52_333_467, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 88_275_000 picoseconds.
        Weight::from_parts(89_733_000, 0)
            // Standard Error: 3_987_023
            .saturating_add(Weight::from_parts(669_872_725, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[1, 512]`.
    fn alloc_per_page(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 413_044_000 picoseconds.
        Weight::from_parts(343_710_210, 0)
            // Standard Error: 8_256
            .saturating_add(Weight::from_parts(31_367_607, 0).saturating_mul(p.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 242_596_000 picoseconds.
        Weight::from_parts(282_469_923, 0)
            // Standard Error: 397_100
            .saturating_add(Weight::from_parts(163_114_248, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn mem_grow(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_265_000 picoseconds.
        Weight::from_parts(3_465_198, 0)
            // Standard Error: 8_582
            .saturating_add(Weight::from_parts(22_066_748, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_455_000 picoseconds.
        Weight::from_parts(86_670_947, 0)
            // Standard Error: 8_243
            .saturating_add(Weight::from_parts(4_314_946, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 134_662_000 picoseconds.
        Weight::from_parts(135_651_447, 0)
            // Standard Error: 24_496
            .saturating_add(Weight::from_parts(4_660_288, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_825_000 picoseconds.
        Weight::from_parts(113_376_632, 0)
            // Standard Error: 451_002
            .saturating_add(Weight::from_parts(229_396_409, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_874_000 picoseconds.
        Weight::from_parts(87_482_719, 0)
            // Standard Error: 241_209
            .saturating_add(Weight::from_parts(225_074_263, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_424_000 picoseconds.
        Weight::from_parts(87_457_891, 0)
            // Standard Error: 343_654
            .saturating_add(Weight::from_parts(223_972_467, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_pay_program_rent(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 120_198 nanoseconds.
        Weight::from_parts(130_172_800, 0)
            // Standard Error: 2_420_191
            .saturating_add(Weight::from_parts(9_196_990, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_576_000 picoseconds.
        Weight::from_parts(81_987_812, 0)
            // Standard Error: 326_487
            .saturating_add(Weight::from_parts(224_021_774, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_062_000 picoseconds.
        Weight::from_parts(84_738_989, 0)
            // Standard Error: 326_108
            .saturating_add(Weight::from_parts(224_150_105, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_506_000 picoseconds.
        Weight::from_parts(85_780_457, 0)
            // Standard Error: 315_785
            .saturating_add(Weight::from_parts(223_203_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_398_000 picoseconds.
        Weight::from_parts(87_720_451, 0)
            // Standard Error: 355_509
            .saturating_add(Weight::from_parts(222_916_085, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_856_000 picoseconds.
        Weight::from_parts(81_978_713, 0)
            // Standard Error: 333_005
            .saturating_add(Weight::from_parts(223_589_312, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_035_000 picoseconds.
        Weight::from_parts(81_175_641, 0)
            // Standard Error: 371_488
            .saturating_add(Weight::from_parts(223_601_003, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 707_622_000 picoseconds.
        Weight::from_parts(775_668_067, 0)
            // Standard Error: 518_931
            .saturating_add(Weight::from_parts(303_585_684, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_019_360_000 picoseconds.
        Weight::from_parts(1_023_540_000, 0)
            // Standard Error: 59_193
            .saturating_add(Weight::from_parts(13_545_440, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_489_000 picoseconds.
        Weight::from_parts(86_828_514, 0)
            // Standard Error: 337_331
            .saturating_add(Weight::from_parts(223_427_707, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_974_000 picoseconds.
        Weight::from_parts(79_543_469, 0)
            // Standard Error: 373_848
            .saturating_add(Weight::from_parts(227_384_017, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_758_000 picoseconds.
        Weight::from_parts(109_128_309, 0)
            // Standard Error: 451_261
            .saturating_add(Weight::from_parts(292_953_148, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_deposit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 82_000_000 picoseconds.
        Weight::from_parts(154_918_188, 0)
            // Standard Error: 618_649
            .saturating_add(Weight::from_parts(739_860_064, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_771_000 picoseconds.
        Weight::from_parts(142_596_859, 0)
            // Standard Error: 522_119
            .saturating_add(Weight::from_parts(428_351_391, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 510_030_000 picoseconds.
        Weight::from_parts(515_910_000, 0)
            // Standard Error: 68_221
            .saturating_add(Weight::from_parts(21_327_544, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_980_000 picoseconds.
        Weight::from_parts(163_222_588, 0)
            // Standard Error: 491_863
            .saturating_add(Weight::from_parts(431_633_784, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 518_081_000 picoseconds.
        Weight::from_parts(522_651_000, 0)
            // Standard Error: 63_824
            .saturating_add(Weight::from_parts(21_155_134, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_858_000 picoseconds.
        Weight::from_parts(766_977_954, 0)
            // Standard Error: 545_689
            .saturating_add(Weight::from_parts(443_981_323, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 713_357_000 picoseconds.
        Weight::from_parts(791_178_659, 0)
            // Standard Error: 557_532
            .saturating_add(Weight::from_parts(448_990_785, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_972_000 picoseconds.
        Weight::from_parts(83_499_128, 0)
            // Standard Error: 355_406
            .saturating_add(Weight::from_parts(232_914_562, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_599_817_000 picoseconds.
        Weight::from_parts(4_740_344_196, 0)
            // Standard Error: 500_908
            .saturating_add(Weight::from_parts(329_587_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 635_018_000 picoseconds.
        Weight::from_parts(639_337_000, 0)
            // Standard Error: 63_613
            .saturating_add(Weight::from_parts(31_631_709, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_609_581_000 picoseconds.
        Weight::from_parts(4_730_267_676, 0)
            // Standard Error: 514_700
            .saturating_add(Weight::from_parts(388_013_624, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_590_956_000 picoseconds.
        Weight::from_parts(4_727_513_303, 0)
            // Standard Error: 522_841
            .saturating_add(Weight::from_parts(400_388_425, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 225_094_000 picoseconds.
        Weight::from_parts(304_521_274, 0)
            // Standard Error: 450_640
            .saturating_add(Weight::from_parts(442_541_038, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 685_897_000 picoseconds.
        Weight::from_parts(698_707_000, 0)
            // Standard Error: 68_258
            .saturating_add(Weight::from_parts(21_614_399, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_783_190_000 picoseconds.
        Weight::from_parts(4_923_849_495, 0)
            // Standard Error: 513_342
            .saturating_add(Weight::from_parts(397_043_290, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_149_000 picoseconds.
        Weight::from_parts(84_610_585, 0)
            // Standard Error: 247_995
            .saturating_add(Weight::from_parts(27_817_814, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_353_000 picoseconds.
        Weight::from_parts(95_410_315, 0)
            // Standard Error: 2_835
            .saturating_add(Weight::from_parts(429_971, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_557_000 picoseconds.
        Weight::from_parts(84_989_942, 0)
            // Standard Error: 238_308
            .saturating_add(Weight::from_parts(25_836_457, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_256_000 picoseconds.
        Weight::from_parts(93_810_527, 0)
            // Standard Error: 996
            .saturating_add(Weight::from_parts(427_253, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_478_000 picoseconds.
        Weight::from_parts(88_243_836, 0)
            // Standard Error: 253_045
            .saturating_add(Weight::from_parts(24_147_463, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_877_000 picoseconds.
        Weight::from_parts(87_502_304, 0)
            // Standard Error: 244_833
            .saturating_add(Weight::from_parts(21_823_195, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_825_000 picoseconds.
        Weight::from_parts(107_252_190, 0)
            // Standard Error: 427_416
            .saturating_add(Weight::from_parts(317_287_791, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_638_000 picoseconds.
        Weight::from_parts(106_334_000, 0)
            // Standard Error: 2_112
            .saturating_add(Weight::from_parts(640_884, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 700_449_000 picoseconds.
        Weight::from_parts(711_805_908, 0)
            // Standard Error: 1_330_204
            .saturating_add(Weight::from_parts(29_397_491, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 700_472_000 picoseconds.
        Weight::from_parts(712_966_353, 0)
            // Standard Error: 1_215_438
            .saturating_add(Weight::from_parts(30_417_346, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 93_509_000 picoseconds.
        Weight::from_parts(97_528_446, 0)
            // Standard Error: 251_822
            .saturating_add(Weight::from_parts(15_067_353, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 107_958_000 picoseconds.
        Weight::from_parts(94_675_639, 0)
            // Standard Error: 2_538
            .saturating_add(Weight::from_parts(431_780, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_770_000 picoseconds.
        Weight::from_parts(94_195_877, 0)
            // Standard Error: 263_692
            .saturating_add(Weight::from_parts(18_178_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 108_419_000 picoseconds.
        Weight::from_parts(93_346_913, 0)
            // Standard Error: 1_659
            .saturating_add(Weight::from_parts(428_792, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_063_000 picoseconds.
        Weight::from_parts(85_396_929, 0)
            // Standard Error: 346_825
            .saturating_add(Weight::from_parts(227_362_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_211_000 picoseconds.
        Weight::from_parts(84_025_602, 0)
            // Standard Error: 327_404
            .saturating_add(Weight::from_parts(227_134_886, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 706_124_000 picoseconds.
        Weight::from_parts(739_297_695, 0)
            // Standard Error: 476_059
            .saturating_add(Weight::from_parts(240_167_488, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 719_926_000 picoseconds.
        Weight::from_parts(736_118_689, 0)
            // Standard Error: 646
            .saturating_add(Weight::from_parts(154_290, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_256_437_000 picoseconds.
        Weight::from_parts(5_350_749_400, 0)
            // Standard Error: 488_269
            .saturating_add(Weight::from_parts(257_810_697, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_512_254_000 picoseconds.
        Weight::from_parts(5_502_496_522, 0)
            // Standard Error: 8_680
            .saturating_add(Weight::from_parts(13_719_548, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_538_000 picoseconds.
        Weight::from_parts(104_117_021, 0)
            // Standard Error: 402_932
            .saturating_add(Weight::from_parts(238_231_542, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 308_000_000 picoseconds.
        Weight::from_parts(310_532_000, 0)
            // Standard Error: 60_371
            .saturating_add(Weight::from_parts(25_856_497, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 81_959_000 picoseconds.
        Weight::from_parts(81_945_366, 0)
            // Standard Error: 324_586
            .saturating_add(Weight::from_parts(223_211_008, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_360_000 picoseconds.
        Weight::from_parts(86_594_408, 0)
            // Standard Error: 241_324
            .saturating_add(Weight::from_parts(26_084_291, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_040_000 picoseconds.
        Weight::from_parts(86_085_228, 0)
            // Standard Error: 233_631
            .saturating_add(Weight::from_parts(13_892_571, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_026_000 picoseconds.
        Weight::from_parts(87_403_708, 0)
            // Standard Error: 235_568
            .saturating_add(Weight::from_parts(15_067_391, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_859_000 picoseconds.
        Weight::from_parts(88_275_261, 0)
            // Standard Error: 253_025
            .saturating_add(Weight::from_parts(14_650_738, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_023_000 picoseconds.
        Weight::from_parts(87_604_377, 0)
            // Standard Error: 238_932
            .saturating_add(Weight::from_parts(14_000_622, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 141_310_000 picoseconds.
        Weight::from_parts(206_958_431, 0)
            // Standard Error: 400_501
            .saturating_add(Weight::from_parts(333_696_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_082_000 picoseconds.
        Weight::from_parts(156_632_427, 0)
            // Standard Error: 412_316
            .saturating_add(Weight::from_parts(513_723_126, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 45_030_954_000 picoseconds.
        Weight::from_parts(45_096_110_000, 0)
            // Standard Error: 263_167
            .saturating_add(Weight::from_parts(7_378_526, 0).saturating_mul(p.into()))
            // Standard Error: 263_154
            .saturating_add(Weight::from_parts(157_075_733, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_942_000 picoseconds.
        Weight::from_parts(142_236_888, 0)
            // Standard Error: 451_964
            .saturating_add(Weight::from_parts(518_401_980, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 46_241_459_000 picoseconds.
        Weight::from_parts(46_282_185_000, 0)
            // Standard Error: 278_840
            .saturating_add(Weight::from_parts(6_935_428, 0).saturating_mul(p.into()))
            // Standard Error: 278_826
            .saturating_add(Weight::from_parts(156_849_709, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 82_623_000 picoseconds.
        Weight::from_parts(118_249_499, 1131)
            // Standard Error: 6_620
            .saturating_add(Weight::from_parts(12_056_340, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 84_816_000 picoseconds.
        Weight::from_parts(86_081_000, 1131)
            // Standard Error: 27_277
            .saturating_add(Weight::from_parts(34_504_816, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_218_028_000 picoseconds.
        Weight::from_parts(6_057_302_789, 5069931)
            // Standard Error: 49_313
            .saturating_add(Weight::from_parts(34_499_636, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `1939 + p * (75482 ±0)`
        // Minimum execution time: 83_941_000 picoseconds.
        Weight::from_parts(85_575_000, 1939)
            // Standard Error: 60_804
            .saturating_add(Weight::from_parts(46_854_198, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 95_202_000 picoseconds.
        Weight::from_parts(93_587_585, 1496)
            // Standard Error: 71_098
            .saturating_add(Weight::from_parts(36_280_234, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1496 + p * (9883 ±2)`
        // Minimum execution time: 734_637_000 picoseconds.
        Weight::from_parts(737_719_349, 1496)
            // Standard Error: 101_478
            .saturating_add(Weight::from_parts(41_820_868, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9883).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 1_129_399_000 picoseconds.
        Weight::from_parts(1_130_250_863, 317931)
            // Standard Error: 117_710
            .saturating_add(Weight::from_parts(40_940_896, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_309_945_000 picoseconds.
        Weight::from_parts(4_312_186_541, 0)
            // Standard Error: 9_933
            .saturating_add(Weight::from_parts(3_360_504, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_319_177_000 picoseconds.
        Weight::from_parts(4_310_433_352, 0)
            // Standard Error: 9_817
            .saturating_add(Weight::from_parts(3_386_115, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_682_149_000 picoseconds.
        Weight::from_parts(9_534_903_961, 0)
            // Standard Error: 165_238
            .saturating_add(Weight::from_parts(15_711_508, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_439_284_000 picoseconds.
        Weight::from_parts(9_155_072_747, 0)
            // Standard Error: 229_147
            .saturating_add(Weight::from_parts(12_859_723, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_128_000 picoseconds.
        Weight::from_parts(2_194_000, 0)
            // Standard Error: 14_848
            .saturating_add(Weight::from_parts(3_845_678, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_000 picoseconds.
        Weight::from_parts(2_251_000, 0)
            // Standard Error: 8_592
            .saturating_add(Weight::from_parts(3_036_690, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_150_000 picoseconds.
        Weight::from_parts(3_370_596, 0)
            // Standard Error: 946
            .saturating_add(Weight::from_parts(1_560_442, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_115_000 picoseconds.
        Weight::from_parts(2_179_000, 0)
            // Standard Error: 8_397
            .saturating_add(Weight::from_parts(2_875_619, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_150_000 picoseconds.
        Weight::from_parts(2_232_000, 0)
            // Standard Error: 11_395
            .saturating_add(Weight::from_parts(5_262_522, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_899_000 picoseconds.
        Weight::from_parts(7_856_079, 0)
            // Standard Error: 1_858
            .saturating_add(Weight::from_parts(84_176, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_234_000 picoseconds.
        Weight::from_parts(3_679_699, 0)
            // Standard Error: 5_771
            .saturating_add(Weight::from_parts(2_574_381, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_parts(0, 0)
            .saturating_add(Weight::from_parts(2_574_381 -
            2_401_366, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_205_000 picoseconds.
        Weight::from_parts(3_872_252, 0)
            // Standard Error: 12_209
            .saturating_add(Weight::from_parts(2_401_366, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_566_000 picoseconds.
        Weight::from_parts(31_538, 0)
            // Standard Error: 31_816
            .saturating_add(Weight::from_parts(10_617_516, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_321_000 picoseconds.
        Weight::from_parts(12_464_000, 0)
            // Standard Error: 11_364
            .saturating_add(Weight::from_parts(990_467, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_209_000 picoseconds.
        Weight::from_parts(5_522_986, 0)
            // Standard Error: 14
            .saturating_add(Weight::from_parts(27, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_063_000 picoseconds.
        Weight::from_parts(1_941_048, 0)
            // Standard Error: 3_339
            .saturating_add(Weight::from_parts(225_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_085_000 picoseconds.
        Weight::from_parts(2_189_000, 0)
            // Standard Error: 8_114
            .saturating_add(Weight::from_parts(632_754, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_090_000 picoseconds.
        Weight::from_parts(2_154_000, 0)
            // Standard Error: 8_248
            .saturating_add(Weight::from_parts(691_250, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_935_000 picoseconds.
        Weight::from_parts(3_095_178, 0)
            // Standard Error: 12_920
            .saturating_add(Weight::from_parts(596_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_067_000 picoseconds.
        Weight::from_parts(6_123_000, 0)
            // Standard Error: 15_262
            .saturating_add(Weight::from_parts(1_053_243, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_780_000 picoseconds.
        Weight::from_parts(3_942_000, 0)
            // Standard Error: 10_662
            .saturating_add(Weight::from_parts(6_978_881, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_181_000, 0)
            // Standard Error: 11_650
            .saturating_add(Weight::from_parts(3_412_994, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_116_000 picoseconds.
        Weight::from_parts(2_135_000, 0)
            // Standard Error: 10_112
            .saturating_add(Weight::from_parts(3_164_714, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_139_000 picoseconds.
        Weight::from_parts(2_211_000, 0)
            // Standard Error: 9_532
            .saturating_add(Weight::from_parts(2_986_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(2_199_000, 0)
            // Standard Error: 9_525
            .saturating_add(Weight::from_parts(2_510_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_212_000 picoseconds.
        Weight::from_parts(2_288_000, 0)
            // Standard Error: 5_552
            .saturating_add(Weight::from_parts(533_719, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_104_000 picoseconds.
        Weight::from_parts(1_251_683, 0)
            // Standard Error: 5_219
            .saturating_add(Weight::from_parts(370_525, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_101_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 21_377
            .saturating_add(Weight::from_parts(1_566_668, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_120_000 picoseconds.
        Weight::from_parts(2_229_000, 0)
            // Standard Error: 10_885
            .saturating_add(Weight::from_parts(892_344, 0).saturating_mul(r.into()))
    }
        /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_275_000 picoseconds.
        Weight::from_parts(1_108_310, 0)
            // Standard Error: 4_694
            .saturating_add(Weight::from_parts(426_432, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_317_000 picoseconds.
        Weight::from_parts(1_738_492, 0)
            // Standard Error: 3_326
            .saturating_add(Weight::from_parts(383_698, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend8s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_277_000 picoseconds.
        Weight::from_parts(2_334_000, 0)
            // Standard Error: 3_868
            .saturating_add(Weight::from_parts(529_300, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend16s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_326_000 picoseconds.
        Weight::from_parts(2_396_000, 0)
            // Standard Error: 4_728
            .saturating_add(Weight::from_parts(525_181, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extend32s(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_258_000 picoseconds.
        Weight::from_parts(416_491, 0)
            // Standard Error: 7_377
            .saturating_add(Weight::from_parts(530_786, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_101_000 picoseconds.
        Weight::from_parts(2_285_581, 0)
            // Standard Error: 4_234
            .saturating_add(Weight::from_parts(267_210, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_092_000 picoseconds.
        Weight::from_parts(2_421_728, 0)
            // Standard Error: 2_258
            .saturating_add(Weight::from_parts(159_975, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_061_000 picoseconds.
        Weight::from_parts(2_769_492, 0)
            // Standard Error: 2_123
            .saturating_add(Weight::from_parts(160_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_242_000, 0)
            // Standard Error: 15_694
            .saturating_add(Weight::from_parts(1_779_551, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_049_000 picoseconds.
        Weight::from_parts(2_164_000, 0)
            // Standard Error: 11_580
            .saturating_add(Weight::from_parts(1_032_413, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_073_000 picoseconds.
        Weight::from_parts(2_161_000, 0)
            // Standard Error: 18_179
            .saturating_add(Weight::from_parts(1_722_573, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_105_000 picoseconds.
        Weight::from_parts(2_185_000, 0)
            // Standard Error: 12_114
            .saturating_add(Weight::from_parts(1_063_540, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_112_000 picoseconds.
        Weight::from_parts(2_231_000, 0)
            // Standard Error: 18_390
            .saturating_add(Weight::from_parts(1_790_832, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_187_000 picoseconds.
        Weight::from_parts(2_222_000, 0)
            // Standard Error: 11_507
            .saturating_add(Weight::from_parts(1_063_742, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_160_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 15_644
            .saturating_add(Weight::from_parts(1_737_557, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(2_230_000, 0)
            // Standard Error: 7_985
            .saturating_add(Weight::from_parts(1_141_500, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_180_000 picoseconds.
        Weight::from_parts(2_260_000, 0)
            // Standard Error: 10_070
            .saturating_add(Weight::from_parts(1_822_968, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_043_000 picoseconds.
        Weight::from_parts(2_187_000, 0)
            // Standard Error: 7_406
            .saturating_add(Weight::from_parts(1_200_921, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_133_000 picoseconds.
        Weight::from_parts(2_201_000, 0)
            // Standard Error: 12_270
            .saturating_add(Weight::from_parts(1_861_706, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_140_000 picoseconds.
        Weight::from_parts(2_207_000, 0)
            // Standard Error: 11_687
            .saturating_add(Weight::from_parts(1_018_179, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_213_000, 0)
            // Standard Error: 16_985
            .saturating_add(Weight::from_parts(1_730_980, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_052_000 picoseconds.
        Weight::from_parts(2_152_000, 0)
            // Standard Error: 12_660
            .saturating_add(Weight::from_parts(1_038_767, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_143_000 picoseconds.
        Weight::from_parts(2_257_000, 0)
            // Standard Error: 17_238
            .saturating_add(Weight::from_parts(1_625_018, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(2_202_000, 0)
            // Standard Error: 13_051
            .saturating_add(Weight::from_parts(1_014_911, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_096_000 picoseconds.
        Weight::from_parts(2_115_000, 0)
            // Standard Error: 17_557
            .saturating_add(Weight::from_parts(1_685_454, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_156_000 picoseconds.
        Weight::from_parts(2_193_000, 0)
            // Standard Error: 11_250
            .saturating_add(Weight::from_parts(971_206, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_021_000 picoseconds.
        Weight::from_parts(2_189_000, 0)
            // Standard Error: 16_960
            .saturating_add(Weight::from_parts(1_592_479, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_126_000 picoseconds.
        Weight::from_parts(2_214_000, 0)
            // Standard Error: 11_271
            .saturating_add(Weight::from_parts(959_747, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_145_000 picoseconds.
        Weight::from_parts(2_203_000, 0)
            // Standard Error: 12_661
            .saturating_add(Weight::from_parts(1_152_207, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_134_000 picoseconds.
        Weight::from_parts(2_255_000, 0)
            // Standard Error: 5_950
            .saturating_add(Weight::from_parts(569_437, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_185_000 picoseconds.
        Weight::from_parts(2_234_000, 0)
            // Standard Error: 12_196
            .saturating_add(Weight::from_parts(1_137_663, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_219_000 picoseconds.
        Weight::from_parts(2_265_000, 0)
            // Standard Error: 5_552
            .saturating_add(Weight::from_parts(546_651, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_098_000 picoseconds.
        Weight::from_parts(2_197_000, 0)
            // Standard Error: 16_892
            .saturating_add(Weight::from_parts(1_570_942, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_170_000 picoseconds.
        Weight::from_parts(2_248_000, 0)
            // Standard Error: 10_829
            .saturating_add(Weight::from_parts(1_032_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_086_000 picoseconds.
        Weight::from_parts(2_123_000, 0)
            // Standard Error: 10_493
            .saturating_add(Weight::from_parts(2_592_526, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_162_000 picoseconds.
        Weight::from_parts(2_204_000, 0)
            // Standard Error: 14_342
            .saturating_add(Weight::from_parts(2_135_253, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_094_000 picoseconds.
        Weight::from_parts(2_236_000, 0)
            // Standard Error: 15_839
            .saturating_add(Weight::from_parts(2_721_349, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_215_000, 0)
            // Standard Error: 17_136
            .saturating_add(Weight::from_parts(2_116_112, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_114_000 picoseconds.
        Weight::from_parts(2_173_000, 0)
            // Standard Error: 26_776
            .saturating_add(Weight::from_parts(9_557_552, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_150_000 picoseconds.
        Weight::from_parts(2_195_000, 0)
            // Standard Error: 26_356
            .saturating_add(Weight::from_parts(7_538_824, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_168_000, 0)
            // Standard Error: 12_144
            .saturating_add(Weight::from_parts(2_801_403, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_044_000 picoseconds.
        Weight::from_parts(2_158_000, 0)
            // Standard Error: 14_548
            .saturating_add(Weight::from_parts(2_250_205, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_000 picoseconds.
        Weight::from_parts(2_219_000, 0)
            // Standard Error: 13_025
            .saturating_add(Weight::from_parts(1_166_671, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_193_000, 0)
            // Standard Error: 5_870
            .saturating_add(Weight::from_parts(548_700, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_103_000 picoseconds.
        Weight::from_parts(2_184_000, 0)
            // Standard Error: 12_641
            .saturating_add(Weight::from_parts(1_235_057, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_221_000, 0)
            // Standard Error: 5_479
            .saturating_add(Weight::from_parts(535_320, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_114_000 picoseconds.
        Weight::from_parts(2_164_000, 0)
            // Standard Error: 12_576
            .saturating_add(Weight::from_parts(1_162_617, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_081_000 picoseconds.
        Weight::from_parts(2_186_000, 0)
            // Standard Error: 5_779
            .saturating_add(Weight::from_parts(587_029, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_104_000 picoseconds.
        Weight::from_parts(2_213_000, 0)
            // Standard Error: 10_772
            .saturating_add(Weight::from_parts(999_407, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_097_000 picoseconds.
        Weight::from_parts(2_169_000, 0)
            // Standard Error: 6_109
            .saturating_add(Weight::from_parts(511_909, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_121_000 picoseconds.
        Weight::from_parts(2_229_000, 0)
            // Standard Error: 10_402
            .saturating_add(Weight::from_parts(932_389, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_085_000 picoseconds.
        Weight::from_parts(2_197_000, 0)
            // Standard Error: 5_401
            .saturating_add(Weight::from_parts(528_443, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_158_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 11_722
            .saturating_add(Weight::from_parts(1_086_446, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_079_000 picoseconds.
        Weight::from_parts(2_165_000, 0)
            // Standard Error: 6_731
            .saturating_add(Weight::from_parts(539_142, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_203_000 picoseconds.
        Weight::from_parts(2_243_000, 0)
            // Standard Error: 12_208
            .saturating_add(Weight::from_parts(1_027_440, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_155_000 picoseconds.
        Weight::from_parts(16_315, 0)
            // Standard Error: 8_129
            .saturating_add(Weight::from_parts(573_271, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_167_000 picoseconds.
        Weight::from_parts(2_235_000, 0)
            // Standard Error: 11_151
            .saturating_add(Weight::from_parts(992_940, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_187_000 picoseconds.
        Weight::from_parts(2_256_000, 0)
            // Standard Error: 6_162
            .saturating_add(Weight::from_parts(509_221, 0).saturating_mul(r.into()))
    }
}
