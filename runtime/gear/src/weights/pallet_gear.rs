// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-17, STEPS: `20`, REPEAT: `40`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --pallet=pallet_gear --steps=20 --repeat=40 --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=5000 --template=.maintain/frame-weight-template.hbs --output=gear.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn db_write_per_kb(c: u32, ) -> Weight;
    fn db_read_per_kb(c: u32, ) -> Weight;
    fn instantiate_module_per_kb(c: u32, ) -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument_per_kb(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn free(r: u32, ) -> Weight;
    fn gr_reserve_gas(r: u32, ) -> Weight;
    fn gr_unreserve_gas(r: u32, ) -> Weight;
    fn gr_system_reserve_gas(r: u32, ) -> Weight;
    fn gr_message_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_random(n: u32, ) -> Weight;
    fn gr_send(r: u32, ) -> Weight;
    fn gr_send_per_kb(n: u32, ) -> Weight;
    fn gr_send_wgas(r: u32, ) -> Weight;
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_send_input(r: u32, ) -> Weight;
    fn gr_send_input_wgas(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_wgas(r: u32, ) -> Weight;
    fn gr_reservation_send(r: u32, ) -> Weight;
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_send_commit(r: u32, ) -> Weight;
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_signal_from(r: u32, ) -> Weight;
    fn gr_reply_push_input(r: u32, ) -> Weight;
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_send_push_input(r: u32, ) -> Weight;
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_debug_per_kb(n: u32, ) -> Weight;
    fn gr_error(r: u32, ) -> Weight;
    fn gr_status_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program(r: u32, ) -> Weight;
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight;
    fn lazy_pages_signal_read(p: u32, ) -> Weight;
    fn lazy_pages_signal_write(p: u32, ) -> Weight;
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight;
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight;
    fn lazy_pages_host_func_read(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write(p: u32, ) -> Weight;
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i32load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_i32store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call_const(r: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_call_per_local(l: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i32clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i32ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i32popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i32eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i32eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i32ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i32lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i32ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i32gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i32gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i32les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i32leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i32ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i32geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i32add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i32sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i32mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i32divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i32divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i32rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i32remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i32and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i32or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i32xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i32shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i32shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i32shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i32rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
    fn instr_i32rotr(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 942_000 picoseconds.
        Weight::from_parts(1_028_000, 0)
            // Standard Error: 1_115
            .saturating_add(Weight::from_parts(215_319, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_849_000 picoseconds.
        Weight::from_parts(2_888_000, 3506)
            // Standard Error: 1_072
            .saturating_add(Weight::from_parts(729_663, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_373_000 picoseconds.
        Weight::from_parts(79_717_528, 0)
            // Standard Error: 5_345
            .saturating_add(Weight::from_parts(2_328_326, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `720`
        //  Estimated: `22449`
        // Minimum execution time: 55_319_000 picoseconds.
        Weight::from_parts(56_957_000, 22449)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 71_569_000 picoseconds.
        Weight::from_parts(48_090_484, 4990)
            // Standard Error: 45_700
            .saturating_add(Weight::from_parts(51_771_911, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `572`
        //  Estimated: `27358`
        // Minimum execution time: 52_116_000 picoseconds.
        Weight::from_parts(74_065_412, 27358)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_318, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `23332`
        // Minimum execution time: 9_441_522_000 picoseconds.
        Weight::from_parts(9_548_323_000, 23332)
            // Standard Error: 518_363
            .saturating_add(Weight::from_parts(28_568_105, 0).saturating_mul(c.into()))
            // Standard Error: 30
            .saturating_add(Weight::from_parts(842, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `310`
        //  Estimated: `23285`
        // Minimum execution time: 52_998_000 picoseconds.
        Weight::from_parts(33_079_390, 23285)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_199, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `883`
        //  Estimated: `40497`
        // Minimum execution time: 76_674_000 picoseconds.
        Weight::from_parts(62_324_684, 40497)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_205, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `580`
        //  Estimated: `60291`
        // Minimum execution time: 288_413_000 picoseconds.
        Weight::from_parts(298_701_781, 60291)
            // Standard Error: 1_037
            .saturating_add(Weight::from_parts(3_090, 0).saturating_mul(q.into()))
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `580`
        //  Estimated: `59931`
        // Minimum execution time: 302_862_000 picoseconds.
        Weight::from_parts(314_018_455, 59931)
            .saturating_add(T::DbWeight::get().reads(24_u64))
            .saturating_add(T::DbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3923 + c * (2150 ±0)`
        // Minimum execution time: 55_757_000 picoseconds.
        Weight::from_parts(56_047_000, 3923)
            // Standard Error: 29_751
            .saturating_add(Weight::from_parts(51_399_689, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_386_000 picoseconds.
        Weight::from_parts(87_616_118, 0)
            // Standard Error: 371_434
            .saturating_add(Weight::from_parts(140_929_563, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 225_304_000 picoseconds.
        Weight::from_parts(215_896_967, 0)
            // Standard Error: 402_691
            .saturating_add(Weight::from_parts(144_254_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_802_000 picoseconds.
        Weight::from_parts(76_028_085, 0)
            // Standard Error: 15_691
            .saturating_add(Weight::from_parts(4_192_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 137_034_000 picoseconds.
        Weight::from_parts(128_793_769, 0)
            // Standard Error: 27_983
            .saturating_add(Weight::from_parts(4_586_274, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_127_000 picoseconds.
        Weight::from_parts(117_438_801, 0)
            // Standard Error: 416_030
            .saturating_add(Weight::from_parts(213_734_289, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_217_000 picoseconds.
        Weight::from_parts(86_771_121, 0)
            // Standard Error: 414_535
            .saturating_add(Weight::from_parts(215_951_429, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_514_000 picoseconds.
        Weight::from_parts(91_505_988, 0)
            // Standard Error: 358_160
            .saturating_add(Weight::from_parts(214_046_489, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_948_000 picoseconds.
        Weight::from_parts(95_262_618, 0)
            // Standard Error: 302_912
            .saturating_add(Weight::from_parts(211_907_520, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_938_000 picoseconds.
        Weight::from_parts(103_265_665, 0)
            // Standard Error: 323_928
            .saturating_add(Weight::from_parts(211_455_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_542_000 picoseconds.
        Weight::from_parts(97_756_772, 0)
            // Standard Error: 355_109
            .saturating_add(Weight::from_parts(211_610_258, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_757_000 picoseconds.
        Weight::from_parts(103_316_773, 0)
            // Standard Error: 321_969
            .saturating_add(Weight::from_parts(210_219_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_021_000 picoseconds.
        Weight::from_parts(99_331_413, 0)
            // Standard Error: 364_587
            .saturating_add(Weight::from_parts(210_508_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_741_000 picoseconds.
        Weight::from_parts(108_418_982, 0)
            // Standard Error: 379_231
            .saturating_add(Weight::from_parts(209_256_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 567_843_000 picoseconds.
        Weight::from_parts(619_213_799, 0)
            // Standard Error: 563_646
            .saturating_add(Weight::from_parts(289_993_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 865_762_000 picoseconds.
        Weight::from_parts(882_023_000, 0)
            // Standard Error: 51_488
            .saturating_add(Weight::from_parts(13_282_051, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_977_000 picoseconds.
        Weight::from_parts(88_212_792, 0)
            // Standard Error: 314_992
            .saturating_add(Weight::from_parts(214_253_492, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_860_000 picoseconds.
        Weight::from_parts(103_074_929, 0)
            // Standard Error: 311_651
            .saturating_add(Weight::from_parts(209_873_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_839_000 picoseconds.
        Weight::from_parts(114_086_288, 0)
            // Standard Error: 498_364
            .saturating_add(Weight::from_parts(274_974_174, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_263_000 picoseconds.
        Weight::from_parts(141_357_937, 0)
            // Standard Error: 631_879
            .saturating_add(Weight::from_parts(414_183_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 506_066_000 picoseconds.
        Weight::from_parts(510_981_000, 0)
            // Standard Error: 60_321
            .saturating_add(Weight::from_parts(25_245_540, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_090_000 picoseconds.
        Weight::from_parts(167_059_255, 0)
            // Standard Error: 639_955
            .saturating_add(Weight::from_parts(418_059_017, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 507_581_000 picoseconds.
        Weight::from_parts(512_088_000, 0)
            // Standard Error: 56_318
            .saturating_add(Weight::from_parts(24_777_045, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 562_068_000 picoseconds.
        Weight::from_parts(627_747_083, 0)
            // Standard Error: 666_749
            .saturating_add(Weight::from_parts(430_490_837, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 561_974_000 picoseconds.
        Weight::from_parts(620_831_772, 0)
            // Standard Error: 569_786
            .saturating_add(Weight::from_parts(439_132_981, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_674_000 picoseconds.
        Weight::from_parts(98_473_009, 0)
            // Standard Error: 330_976
            .saturating_add(Weight::from_parts(218_385_054, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_275_741_000 picoseconds.
        Weight::from_parts(4_488_884_436, 0)
            // Standard Error: 670_449
            .saturating_add(Weight::from_parts(311_456_668, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 614_560_000 picoseconds.
        Weight::from_parts(624_861_000, 0)
            // Standard Error: 48_146
            .saturating_add(Weight::from_parts(33_927_775, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_275_540_000 picoseconds.
        Weight::from_parts(4_494_110_807, 0)
            // Standard Error: 545_796
            .saturating_add(Weight::from_parts(366_070_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_294_437_000 picoseconds.
        Weight::from_parts(4_491_394_955, 0)
            // Standard Error: 567_460
            .saturating_add(Weight::from_parts(375_824_642, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_275_000 picoseconds.
        Weight::from_parts(306_847_190, 0)
            // Standard Error: 581_698
            .saturating_add(Weight::from_parts(428_364_920, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 674_101_000 picoseconds.
        Weight::from_parts(681_178_000, 0)
            // Standard Error: 55_632
            .saturating_add(Weight::from_parts(24_603_687, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_382_312_000 picoseconds.
        Weight::from_parts(4_540_145_572, 0)
            // Standard Error: 662_782
            .saturating_add(Weight::from_parts(388_529_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_197_000 picoseconds.
        Weight::from_parts(86_872_607, 0)
            // Standard Error: 147_251
            .saturating_add(Weight::from_parts(19_056_842, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_943_000 picoseconds.
        Weight::from_parts(94_072_716, 0)
            // Standard Error: 705
            .saturating_add(Weight::from_parts(471_429, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_147_000 picoseconds.
        Weight::from_parts(86_020_005, 0)
            // Standard Error: 143_486
            .saturating_add(Weight::from_parts(20_391_394, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_182_000 picoseconds.
        Weight::from_parts(93_659_425, 0)
            // Standard Error: 758
            .saturating_add(Weight::from_parts(472_152, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_027_000 picoseconds.
        Weight::from_parts(87_731_578, 0)
            // Standard Error: 155_986
            .saturating_add(Weight::from_parts(19_643_371, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_355_000 picoseconds.
        Weight::from_parts(88_120_318, 0)
            // Standard Error: 154_377
            .saturating_add(Weight::from_parts(20_301_881, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_008_000 picoseconds.
        Weight::from_parts(128_390_173, 0)
            // Standard Error: 509_080
            .saturating_add(Weight::from_parts(294_829_161, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_648_000 picoseconds.
        Weight::from_parts(101_780_000, 0)
            // Standard Error: 2_941
            .saturating_add(Weight::from_parts(664_432, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 555_344_000 picoseconds.
        Weight::from_parts(574_292_318, 0)
            // Standard Error: 1_217_216
            .saturating_add(Weight::from_parts(27_426_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 556_781_000 picoseconds.
        Weight::from_parts(574_685_100, 0)
            // Standard Error: 1_337_851
            .saturating_add(Weight::from_parts(29_894_500, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_492_000 picoseconds.
        Weight::from_parts(96_369_028, 0)
            // Standard Error: 165_034
            .saturating_add(Weight::from_parts(15_012_121, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_289_000 picoseconds.
        Weight::from_parts(97_247_616, 0)
            // Standard Error: 889
            .saturating_add(Weight::from_parts(477_654, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_052_000 picoseconds.
        Weight::from_parts(95_389_807, 0)
            // Standard Error: 172_207
            .saturating_add(Weight::from_parts(11_997_592, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_053_000 picoseconds.
        Weight::from_parts(96_541_001, 0)
            // Standard Error: 741
            .saturating_add(Weight::from_parts(472_452, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_815_000 picoseconds.
        Weight::from_parts(94_449_286, 0)
            // Standard Error: 399_857
            .saturating_add(Weight::from_parts(214_678_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_095_000 picoseconds.
        Weight::from_parts(94_065_394, 0)
            // Standard Error: 370_621
            .saturating_add(Weight::from_parts(214_671_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 572_953_000 picoseconds.
        Weight::from_parts(629_378_443, 0)
            // Standard Error: 605_237
            .saturating_add(Weight::from_parts(223_723_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 586_522_000 picoseconds.
        Weight::from_parts(593_862_297, 0)
            // Standard Error: 2_840
            .saturating_add(Weight::from_parts(143_395, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_810_639_000 picoseconds.
        Weight::from_parts(5_030_732_486, 0)
            // Standard Error: 612_903
            .saturating_add(Weight::from_parts(232_483_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_049_851_000 picoseconds.
        Weight::from_parts(5_023_755_301, 0)
            // Standard Error: 13_386
            .saturating_add(Weight::from_parts(12_577_182, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_417_000 picoseconds.
        Weight::from_parts(126_317_804, 0)
            // Standard Error: 484_220
            .saturating_add(Weight::from_parts(224_485_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_224_000 picoseconds.
        Weight::from_parts(308_840_000, 0)
            // Standard Error: 51_204
            .saturating_add(Weight::from_parts(30_701_253, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_389_000 picoseconds.
        Weight::from_parts(125_622_346, 0)
            // Standard Error: 496_288
            .saturating_add(Weight::from_parts(282_798_735, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_425_000 picoseconds.
        Weight::from_parts(97_873_163, 0)
            // Standard Error: 420_707
            .saturating_add(Weight::from_parts(213_070_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_548_000 picoseconds.
        Weight::from_parts(88_293_644, 0)
            // Standard Error: 162_545
            .saturating_add(Weight::from_parts(27_073_505, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_596_000 picoseconds.
        Weight::from_parts(88_673_118, 0)
            // Standard Error: 184_835
            .saturating_add(Weight::from_parts(17_235_481, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_511_000 picoseconds.
        Weight::from_parts(88_641_076, 0)
            // Standard Error: 151_050
            .saturating_add(Weight::from_parts(14_969_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_770_000 picoseconds.
        Weight::from_parts(88_505_797, 0)
            // Standard Error: 145_791
            .saturating_add(Weight::from_parts(16_043_652, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_993_000 picoseconds.
        Weight::from_parts(88_884_631, 0)
            // Standard Error: 152_870
            .saturating_add(Weight::from_parts(15_879_518, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_321_000 picoseconds.
        Weight::from_parts(207_147_605, 0)
            // Standard Error: 662_182
            .saturating_add(Weight::from_parts(315_498_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_385_000 picoseconds.
        Weight::from_parts(142_303_469, 0)
            // Standard Error: 520_176
            .saturating_add(Weight::from_parts(504_832_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_921_725_000 picoseconds.
        Weight::from_parts(52_023_406_000, 0)
            // Standard Error: 347_695
            .saturating_add(Weight::from_parts(9_157_301, 0).saturating_mul(p.into()))
            // Standard Error: 347_675
            .saturating_add(Weight::from_parts(153_533_369, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_475_000 picoseconds.
        Weight::from_parts(160_219_898, 0)
            // Standard Error: 544_860
            .saturating_add(Weight::from_parts(506_752_091, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_901_500_000 picoseconds.
        Weight::from_parts(51_181_585_000, 0)
            // Standard Error: 332_030
            .saturating_add(Weight::from_parts(8_952_248, 0).saturating_mul(p.into()))
            // Standard Error: 332_011
            .saturating_add(Weight::from_parts(154_563_348, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 82_691_000 picoseconds.
        Weight::from_parts(122_779_256, 1131)
            // Standard Error: 8_511
            .saturating_add(Weight::from_parts(11_788_843, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 83_344_000 picoseconds.
        Weight::from_parts(84_328_000, 1131)
            // Standard Error: 30_459
            .saturating_add(Weight::from_parts(37_963_039, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_079_609_000 picoseconds.
        Weight::from_parts(5_971_989_670, 5069931)
            // Standard Error: 52_680
            .saturating_add(Weight::from_parts(39_694_570, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `2002 + p * (75482 ±0)`
        // Minimum execution time: 83_385_000 picoseconds.
        Weight::from_parts(84_436_000, 2002)
            // Standard Error: 47_620
            .saturating_add(Weight::from_parts(46_269_835, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1574 + p * (9879 ±2)`
        // Minimum execution time: 99_322_000 picoseconds.
        Weight::from_parts(91_041_610, 1574)
            // Standard Error: 56_435
            .saturating_add(Weight::from_parts(40_464_640, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1574 + p * (9879 ±2)`
        // Minimum execution time: 606_652_000 picoseconds.
        Weight::from_parts(602_689_562, 1574)
            // Standard Error: 139_290
            .saturating_add(Weight::from_parts(46_442_889, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 984_174_000 picoseconds.
        Weight::from_parts(1_017_752_442, 317931)
            // Standard Error: 351_121
            .saturating_add(Weight::from_parts(49_340_664, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_250_528_000 picoseconds.
        Weight::from_parts(4_234_751_523, 0)
            // Standard Error: 13_516
            .saturating_add(Weight::from_parts(3_402_481, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_242_693_000 picoseconds.
        Weight::from_parts(4_241_212_775, 0)
            // Standard Error: 14_525
            .saturating_add(Weight::from_parts(3_408_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_969_856_000 picoseconds.
        Weight::from_parts(10_002_881_163, 0)
            // Standard Error: 191_699
            .saturating_add(Weight::from_parts(15_403_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_623_464_000 picoseconds.
        Weight::from_parts(10_000_474_312, 0)
            // Standard Error: 171_046
            .saturating_add(Weight::from_parts(11_078_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_077_000 picoseconds.
        Weight::from_parts(2_161_000, 0)
            // Standard Error: 9_451
            .saturating_add(Weight::from_parts(3_849_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_071_000 picoseconds.
        Weight::from_parts(2_159_000, 0)
            // Standard Error: 4_400
            .saturating_add(Weight::from_parts(3_080_078, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_074_000 picoseconds.
        Weight::from_parts(3_262_803, 0)
            // Standard Error: 1_189
            .saturating_add(Weight::from_parts(1_564_393, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_071_000 picoseconds.
        Weight::from_parts(2_120_000, 0)
            // Standard Error: 5_877
            .saturating_add(Weight::from_parts(3_066_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_064_000 picoseconds.
        Weight::from_parts(1_812_915, 0)
            // Standard Error: 15_479
            .saturating_add(Weight::from_parts(5_210_469, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_530_000 picoseconds.
        Weight::from_parts(4_194_878, 0)
            // Standard Error: 1_802
            .saturating_add(Weight::from_parts(177_825, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_174_000 picoseconds.
        Weight::from_parts(3_668_578, 0)
            // Standard Error: 8_049
            .saturating_add(Weight::from_parts(2_603_796, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_603_796 -
            2_501_394).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_000 picoseconds.
        Weight::from_parts(3_166_916, 0)
            // Standard Error: 12_838
            .saturating_add(Weight::from_parts(2_501_394, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_494_000 picoseconds.
        Weight::from_parts(17_444_335, 0)
            // Standard Error: 28_697
            .saturating_add(Weight::from_parts(9_785_515, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_798_000 picoseconds.
        Weight::from_parts(3_049_617, 0)
            // Standard Error: 7_056
            .saturating_add(Weight::from_parts(1_189_800, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_151_000 picoseconds.
        Weight::from_parts(5_397_354, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(41, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_127_000 picoseconds.
        Weight::from_parts(1_630_940, 0)
            // Standard Error: 3_120
            .saturating_add(Weight::from_parts(257_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(2_203_000, 0)
            // Standard Error: 6_216
            .saturating_add(Weight::from_parts(784_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_128_000 picoseconds.
        Weight::from_parts(2_190_000, 0)
            // Standard Error: 6_805
            .saturating_add(Weight::from_parts(781_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_892_000 picoseconds.
        Weight::from_parts(1_993_566, 0)
            // Standard Error: 8_154
            .saturating_add(Weight::from_parts(808_421, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_831_000 picoseconds.
        Weight::from_parts(5_976_000, 0)
            // Standard Error: 8_108
            .saturating_add(Weight::from_parts(1_317_538, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_398_000 picoseconds.
        Weight::from_parts(2_166_867, 0)
            // Standard Error: 12_356
            .saturating_add(Weight::from_parts(6_861_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_103_000 picoseconds.
        Weight::from_parts(2_174_000, 0)
            // Standard Error: 6_492
            .saturating_add(Weight::from_parts(3_311_346, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_132_000 picoseconds.
        Weight::from_parts(2_202_000, 0)
            // Standard Error: 5_736
            .saturating_add(Weight::from_parts(3_084_127, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_088_000 picoseconds.
        Weight::from_parts(2_187_000, 0)
            // Standard Error: 7_604
            .saturating_add(Weight::from_parts(3_081_825, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_067_000 picoseconds.
        Weight::from_parts(2_115_000, 0)
            // Standard Error: 4_483
            .saturating_add(Weight::from_parts(2_645_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_114_000 picoseconds.
        Weight::from_parts(2_162_000, 0)
            // Standard Error: 4_129
            .saturating_add(Weight::from_parts(582_946, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(1_652_465, 0)
            // Standard Error: 2_886
            .saturating_add(Weight::from_parts(389_195, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_086_000 picoseconds.
        Weight::from_parts(2_131_000, 0)
            // Standard Error: 9_873
            .saturating_add(Weight::from_parts(1_783_211, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_185_000, 0)
            // Standard Error: 8_559
            .saturating_add(Weight::from_parts(1_172_705, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_120_000 picoseconds.
        Weight::from_parts(1_775_965, 0)
            // Standard Error: 2_995
            .saturating_add(Weight::from_parts(319_267, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_099_000 picoseconds.
        Weight::from_parts(2_651_440, 0)
            // Standard Error: 1_420
            .saturating_add(Weight::from_parts(157_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_048_000 picoseconds.
        Weight::from_parts(2_780_995, 0)
            // Standard Error: 1_473
            .saturating_add(Weight::from_parts(150_488, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_064_000 picoseconds.
        Weight::from_parts(2_154_000, 0)
            // Standard Error: 11_103
            .saturating_add(Weight::from_parts(1_806_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_997_000 picoseconds.
        Weight::from_parts(2_098_000, 0)
            // Standard Error: 8_505
            .saturating_add(Weight::from_parts(1_145_581, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_147_000 picoseconds.
        Weight::from_parts(2_213_000, 0)
            // Standard Error: 11_439
            .saturating_add(Weight::from_parts(1_817_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_998_000 picoseconds.
        Weight::from_parts(2_163_000, 0)
            // Standard Error: 8_619
            .saturating_add(Weight::from_parts(1_160_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_216_000, 0)
            // Standard Error: 10_569
            .saturating_add(Weight::from_parts(1_853_717, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_069_000 picoseconds.
        Weight::from_parts(2_130_000, 0)
            // Standard Error: 7_749
            .saturating_add(Weight::from_parts(1_176_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_101_000 picoseconds.
        Weight::from_parts(2_151_000, 0)
            // Standard Error: 10_826
            .saturating_add(Weight::from_parts(1_869_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_077_000 picoseconds.
        Weight::from_parts(2_143_000, 0)
            // Standard Error: 6_658
            .saturating_add(Weight::from_parts(1_142_489, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_109_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 10_532
            .saturating_add(Weight::from_parts(1_789_647, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(2_233_000, 0)
            // Standard Error: 9_596
            .saturating_add(Weight::from_parts(1_165_933, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_139_000 picoseconds.
        Weight::from_parts(2_195_000, 0)
            // Standard Error: 11_533
            .saturating_add(Weight::from_parts(1_790_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_082_000 picoseconds.
        Weight::from_parts(2_133_000, 0)
            // Standard Error: 7_734
            .saturating_add(Weight::from_parts(1_114_820, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_069_000 picoseconds.
        Weight::from_parts(2_138_000, 0)
            // Standard Error: 9_932
            .saturating_add(Weight::from_parts(1_762_613, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_140_000 picoseconds.
        Weight::from_parts(2_215_000, 0)
            // Standard Error: 8_709
            .saturating_add(Weight::from_parts(1_130_939, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(2_198_000, 0)
            // Standard Error: 10_064
            .saturating_add(Weight::from_parts(1_882_394, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_075_000 picoseconds.
        Weight::from_parts(2_164_000, 0)
            // Standard Error: 8_199
            .saturating_add(Weight::from_parts(1_171_159, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_104_000 picoseconds.
        Weight::from_parts(2_196_000, 0)
            // Standard Error: 11_442
            .saturating_add(Weight::from_parts(1_879_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_988_000 picoseconds.
        Weight::from_parts(2_114_000, 0)
            // Standard Error: 8_254
            .saturating_add(Weight::from_parts(1_174_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_057_000 picoseconds.
        Weight::from_parts(2_165_000, 0)
            // Standard Error: 9_545
            .saturating_add(Weight::from_parts(1_776_225, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_093_000 picoseconds.
        Weight::from_parts(2_199_000, 0)
            // Standard Error: 7_070
            .saturating_add(Weight::from_parts(1_113_099, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_126_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 8_457
            .saturating_add(Weight::from_parts(1_251_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_111_000 picoseconds.
        Weight::from_parts(2_188_000, 0)
            // Standard Error: 4_720
            .saturating_add(Weight::from_parts(625_362, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_090_000 picoseconds.
        Weight::from_parts(2_173_000, 0)
            // Standard Error: 8_729
            .saturating_add(Weight::from_parts(1_329_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_115_000 picoseconds.
        Weight::from_parts(2_187_000, 0)
            // Standard Error: 5_371
            .saturating_add(Weight::from_parts(663_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_081_000 picoseconds.
        Weight::from_parts(2_156_000, 0)
            // Standard Error: 11_844
            .saturating_add(Weight::from_parts(1_807_838, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_113_000 picoseconds.
        Weight::from_parts(2_196_000, 0)
            // Standard Error: 8_329
            .saturating_add(Weight::from_parts(1_175_377, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_112_000 picoseconds.
        Weight::from_parts(3_228_056, 0)
            // Standard Error: 12_610
            .saturating_add(Weight::from_parts(2_590_244, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_101_000 picoseconds.
        Weight::from_parts(992_955, 0)
            // Standard Error: 11_937
            .saturating_add(Weight::from_parts(2_567_023, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_122_000 picoseconds.
        Weight::from_parts(2_092_413, 0)
            // Standard Error: 13_992
            .saturating_add(Weight::from_parts(2_969_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_102_000 picoseconds.
        Weight::from_parts(605_997, 0)
            // Standard Error: 11_278
            .saturating_add(Weight::from_parts(2_527_576, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_118_000 picoseconds.
        Weight::from_parts(2_187_000, 0)
            // Standard Error: 12_684
            .saturating_add(Weight::from_parts(9_413_280, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_096_000 picoseconds.
        Weight::from_parts(983_356, 0)
            // Standard Error: 43_201
            .saturating_add(Weight::from_parts(7_767_987, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_075_000 picoseconds.
        Weight::from_parts(3_772_643, 0)
            // Standard Error: 14_916
            .saturating_add(Weight::from_parts(2_949_181, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_079_000 picoseconds.
        Weight::from_parts(491_599, 0)
            // Standard Error: 11_383
            .saturating_add(Weight::from_parts(2_524_894, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_057_000 picoseconds.
        Weight::from_parts(2_176_000, 0)
            // Standard Error: 8_953
            .saturating_add(Weight::from_parts(1_316_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_146_000 picoseconds.
        Weight::from_parts(2_213_000, 0)
            // Standard Error: 5_602
            .saturating_add(Weight::from_parts(665_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_087_000 picoseconds.
        Weight::from_parts(2_153_000, 0)
            // Standard Error: 8_541
            .saturating_add(Weight::from_parts(1_263_616, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_073_000 picoseconds.
        Weight::from_parts(2_173_000, 0)
            // Standard Error: 5_207
            .saturating_add(Weight::from_parts(638_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_093_000 picoseconds.
        Weight::from_parts(2_206_000, 0)
            // Standard Error: 8_702
            .saturating_add(Weight::from_parts(1_258_762, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_062_000 picoseconds.
        Weight::from_parts(2_150_000, 0)
            // Standard Error: 4_982
            .saturating_add(Weight::from_parts(632_850, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_113_000 picoseconds.
        Weight::from_parts(2_173_000, 0)
            // Standard Error: 7_703
            .saturating_add(Weight::from_parts(1_083_848, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_147_000 picoseconds.
        Weight::from_parts(2_220_000, 0)
            // Standard Error: 4_178
            .saturating_add(Weight::from_parts(592_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_138_000 picoseconds.
        Weight::from_parts(2_181_000, 0)
            // Standard Error: 8_711
            .saturating_add(Weight::from_parts(1_097_721, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_074_000 picoseconds.
        Weight::from_parts(259_263, 0)
            // Standard Error: 6_041
            .saturating_add(Weight::from_parts(633_017, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_135_000 picoseconds.
        Weight::from_parts(2_210_000, 0)
            // Standard Error: 8_900
            .saturating_add(Weight::from_parts(1_104_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_142_000 picoseconds.
        Weight::from_parts(2_191_000, 0)
            // Standard Error: 4_110
            .saturating_add(Weight::from_parts(552_364, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_054_000 picoseconds.
        Weight::from_parts(2_150_000, 0)
            // Standard Error: 7_638
            .saturating_add(Weight::from_parts(1_070_205, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_080_000 picoseconds.
        Weight::from_parts(77_993, 0)
            // Standard Error: 6_103
            .saturating_add(Weight::from_parts(622_817, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_186_000, 0)
            // Standard Error: 7_918
            .saturating_add(Weight::from_parts(1_091_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_160_000, 0)
            // Standard Error: 4_934
            .saturating_add(Weight::from_parts(588_130, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_write_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 942_000 picoseconds.
        Weight::from_parts(1_028_000, 0)
            // Standard Error: 1_115
            .saturating_add(Weight::from_parts(215_319, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn db_read_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42 + c * (1024 ±0)`
        //  Estimated: `3506 + c * (1024 ±0)`
        // Minimum execution time: 2_849_000 picoseconds.
        Weight::from_parts(2_888_000, 3506)
            // Standard Error: 1_072
            .saturating_add(Weight::from_parts(729_663, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(Weight::from_parts(0, 1024).saturating_mul(c.into()))
    }
    /// The range of component `c` is `[0, 512]`.
    fn instantiate_module_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 52_373_000 picoseconds.
        Weight::from_parts(79_717_528, 0)
            // Standard Error: 5_345
            .saturating_add(Weight::from_parts(2_328_326, 0).saturating_mul(c.into()))
    }
    fn claim_value() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `720`
        //  Estimated: `22449`
        // Minimum execution time: 55_319_000 picoseconds.
        Weight::from_parts(56_957_000, 22449)
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    fn upload_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10`
        //  Estimated: `4990`
        // Minimum execution time: 71_569_000 picoseconds.
        Weight::from_parts(48_090_484, 4990)
            // Standard Error: 45_700
            .saturating_add(Weight::from_parts(51_771_911, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(4_u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `572`
        //  Estimated: `27358`
        // Minimum execution time: 52_116_000 picoseconds.
        Weight::from_parts(74_065_412, 27358)
            // Standard Error: 0
            .saturating_add(Weight::from_parts(2_318, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `c` is `[0, 250]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `23332`
        // Minimum execution time: 9_441_522_000 picoseconds.
        Weight::from_parts(9_548_323_000, 23332)
            // Standard Error: 518_363
            .saturating_add(Weight::from_parts(28_568_105, 0).saturating_mul(c.into()))
            // Standard Error: 30
            .saturating_add(Weight::from_parts(842, 0).saturating_mul(s.into()))
            .saturating_add(RocksDbWeight::get().reads(10_u64))
            .saturating_add(RocksDbWeight::get().writes(12_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_message(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `310`
        //  Estimated: `23285`
        // Minimum execution time: 52_998_000 picoseconds.
        Weight::from_parts(33_079_390, 23285)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_199, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    /// The range of component `p` is `[0, 2097152]`.
    fn send_reply(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `883`
        //  Estimated: `40497`
        // Minimum execution time: 76_674_000 picoseconds.
        Weight::from_parts(62_324_684, 40497)
            // Standard Error: 1
            .saturating_add(Weight::from_parts(1_205, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(13_u64))
            .saturating_add(RocksDbWeight::get().writes(10_u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `580`
        //  Estimated: `60291`
        // Minimum execution time: 288_413_000 picoseconds.
        Weight::from_parts(298_701_781, 60291)
            // Standard Error: 1_037
            .saturating_add(Weight::from_parts(3_090, 0).saturating_mul(q.into()))
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `580`
        //  Estimated: `59931`
        // Minimum execution time: 302_862_000 picoseconds.
        Weight::from_parts(314_018_455, 59931)
            .saturating_add(RocksDbWeight::get().reads(24_u64))
            .saturating_add(RocksDbWeight::get().writes(21_u64))
    }
    /// The range of component `c` is `[0, 512]`.
    fn reinstrument_per_kb(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + c * (1075 ±0)`
        //  Estimated: `3923 + c * (2150 ±0)`
        // Minimum execution time: 55_757_000 picoseconds.
        Weight::from_parts(56_047_000, 3923)
            // Standard Error: 29_751
            .saturating_add(Weight::from_parts(51_399_689, 0).saturating_mul(c.into()))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_parts(0, 2150).saturating_mul(c.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_386_000 picoseconds.
        Weight::from_parts(87_616_118, 0)
            // Standard Error: 371_434
            .saturating_add(Weight::from_parts(140_929_563, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn free(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 225_304_000 picoseconds.
        Weight::from_parts(215_896_967, 0)
            // Standard Error: 402_691
            .saturating_add(Weight::from_parts(144_254_528, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_802_000 picoseconds.
        Weight::from_parts(76_028_085, 0)
            // Standard Error: 15_691
            .saturating_add(Weight::from_parts(4_192_577, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 256]`.
    fn gr_unreserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 137_034_000 picoseconds.
        Weight::from_parts(128_793_769, 0)
            // Standard Error: 27_983
            .saturating_add(Weight::from_parts(4_586_274, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_system_reserve_gas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_127_000 picoseconds.
        Weight::from_parts(117_438_801, 0)
            // Standard Error: 416_030
            .saturating_add(Weight::from_parts(213_734_289, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_message_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_217_000 picoseconds.
        Weight::from_parts(86_771_121, 0)
            // Standard Error: 414_535
            .saturating_add(Weight::from_parts(215_951_429, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_514_000 picoseconds.
        Weight::from_parts(91_505_988, 0)
            // Standard Error: 358_160
            .saturating_add(Weight::from_parts(214_046_489, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_948_000 picoseconds.
        Weight::from_parts(95_262_618, 0)
            // Standard Error: 302_912
            .saturating_add(Weight::from_parts(211_907_520, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_938_000 picoseconds.
        Weight::from_parts(103_265_665, 0)
            // Standard Error: 323_928
            .saturating_add(Weight::from_parts(211_455_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_542_000 picoseconds.
        Weight::from_parts(97_756_772, 0)
            // Standard Error: 355_109
            .saturating_add(Weight::from_parts(211_610_258, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_757_000 picoseconds.
        Weight::from_parts(103_316_773, 0)
            // Standard Error: 321_969
            .saturating_add(Weight::from_parts(210_219_591, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_021_000 picoseconds.
        Weight::from_parts(99_331_413, 0)
            // Standard Error: 364_587
            .saturating_add(Weight::from_parts(210_508_130, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_741_000 picoseconds.
        Weight::from_parts(108_418_982, 0)
            // Standard Error: 379_231
            .saturating_add(Weight::from_parts(209_256_798, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 567_843_000 picoseconds.
        Weight::from_parts(619_213_799, 0)
            // Standard Error: 563_646
            .saturating_add(Weight::from_parts(289_993_914, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 865_762_000 picoseconds.
        Weight::from_parts(882_023_000, 0)
            // Standard Error: 51_488
            .saturating_add(Weight::from_parts(13_282_051, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_977_000 picoseconds.
        Weight::from_parts(88_212_792, 0)
            // Standard Error: 314_992
            .saturating_add(Weight::from_parts(214_253_492, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_860_000 picoseconds.
        Weight::from_parts(103_074_929, 0)
            // Standard Error: 311_651
            .saturating_add(Weight::from_parts(209_873_764, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 20]`.
    fn gr_random(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_839_000 picoseconds.
        Weight::from_parts(114_086_288, 0)
            // Standard Error: 498_364
            .saturating_add(Weight::from_parts(274_974_174, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_263_000 picoseconds.
        Weight::from_parts(141_357_937, 0)
            // Standard Error: 631_879
            .saturating_add(Weight::from_parts(414_183_532, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 506_066_000 picoseconds.
        Weight::from_parts(510_981_000, 0)
            // Standard Error: 60_321
            .saturating_add(Weight::from_parts(25_245_540, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_090_000 picoseconds.
        Weight::from_parts(167_059_255, 0)
            // Standard Error: 639_955
            .saturating_add(Weight::from_parts(418_059_017, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 507_581_000 picoseconds.
        Weight::from_parts(512_088_000, 0)
            // Standard Error: 56_318
            .saturating_add(Weight::from_parts(24_777_045, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 562_068_000 picoseconds.
        Weight::from_parts(627_747_083, 0)
            // Standard Error: 666_749
            .saturating_add(Weight::from_parts(430_490_837, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 561_974_000 picoseconds.
        Weight::from_parts(620_831_772, 0)
            // Standard Error: 569_786
            .saturating_add(Weight::from_parts(439_132_981, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_674_000 picoseconds.
        Weight::from_parts(98_473_009, 0)
            // Standard Error: 330_976
            .saturating_add(Weight::from_parts(218_385_054, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_275_741_000 picoseconds.
        Weight::from_parts(4_488_884_436, 0)
            // Standard Error: 670_449
            .saturating_add(Weight::from_parts(311_456_668, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 614_560_000 picoseconds.
        Weight::from_parts(624_861_000, 0)
            // Standard Error: 48_146
            .saturating_add(Weight::from_parts(33_927_775, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_275_540_000 picoseconds.
        Weight::from_parts(4_494_110_807, 0)
            // Standard Error: 545_796
            .saturating_add(Weight::from_parts(366_070_936, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_294_437_000 picoseconds.
        Weight::from_parts(4_491_394_955, 0)
            // Standard Error: 567_460
            .saturating_add(Weight::from_parts(375_824_642, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 241_275_000 picoseconds.
        Weight::from_parts(306_847_190, 0)
            // Standard Error: 581_698
            .saturating_add(Weight::from_parts(428_364_920, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_send_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 674_101_000 picoseconds.
        Weight::from_parts(681_178_000, 0)
            // Standard Error: 55_632
            .saturating_add(Weight::from_parts(24_603_687, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reservation_send_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_382_312_000 picoseconds.
        Weight::from_parts(4_540_145_572, 0)
            // Standard Error: 662_782
            .saturating_add(Weight::from_parts(388_529_844, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_197_000 picoseconds.
        Weight::from_parts(86_872_607, 0)
            // Standard Error: 147_251
            .saturating_add(Weight::from_parts(19_056_842, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_943_000 picoseconds.
        Weight::from_parts(94_072_716, 0)
            // Standard Error: 705
            .saturating_add(Weight::from_parts(471_429, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_147_000 picoseconds.
        Weight::from_parts(86_020_005, 0)
            // Standard Error: 143_486
            .saturating_add(Weight::from_parts(20_391_394, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_wgas_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 104_182_000 picoseconds.
        Weight::from_parts(93_659_425, 0)
            // Standard Error: 758
            .saturating_add(Weight::from_parts(472_152, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_027_000 picoseconds.
        Weight::from_parts(87_731_578, 0)
            // Standard Error: 155_986
            .saturating_add(Weight::from_parts(19_643_371, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_355_000 picoseconds.
        Weight::from_parts(88_120_318, 0)
            // Standard Error: 154_377
            .saturating_add(Weight::from_parts(20_301_881, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_008_000 picoseconds.
        Weight::from_parts(128_390_173, 0)
            // Standard Error: 509_080
            .saturating_add(Weight::from_parts(294_829_161, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 8192]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 99_648_000 picoseconds.
        Weight::from_parts(101_780_000, 0)
            // Standard Error: 2_941
            .saturating_add(Weight::from_parts(664_432, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 555_344_000 picoseconds.
        Weight::from_parts(574_292_318, 0)
            // Standard Error: 1_217_216
            .saturating_add(Weight::from_parts(27_426_331, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 556_781_000 picoseconds.
        Weight::from_parts(574_685_100, 0)
            // Standard Error: 1_337_851
            .saturating_add(Weight::from_parts(29_894_500, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_492_000 picoseconds.
        Weight::from_parts(96_369_028, 0)
            // Standard Error: 165_034
            .saturating_add(Weight::from_parts(15_012_121, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 106_289_000 picoseconds.
        Weight::from_parts(97_247_616, 0)
            // Standard Error: 889
            .saturating_add(Weight::from_parts(477_654, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_052_000 picoseconds.
        Weight::from_parts(95_389_807, 0)
            // Standard Error: 172_207
            .saturating_add(Weight::from_parts(11_997_592, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reservation_reply_commit_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 105_053_000 picoseconds.
        Weight::from_parts(96_541_001, 0)
            // Standard Error: 741
            .saturating_add(Weight::from_parts(472_452, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 83_815_000 picoseconds.
        Weight::from_parts(94_449_286, 0)
            // Standard Error: 399_857
            .saturating_add(Weight::from_parts(214_678_162, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_signal_from(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_095_000 picoseconds.
        Weight::from_parts(94_065_394, 0)
            // Standard Error: 370_621
            .saturating_add(Weight::from_parts(214_671_356, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 572_953_000 picoseconds.
        Weight::from_parts(629_378_443, 0)
            // Standard Error: 605_237
            .saturating_add(Weight::from_parts(223_723_013, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_reply_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 586_522_000 picoseconds.
        Weight::from_parts(593_862_297, 0)
            // Standard Error: 2_840
            .saturating_add(Weight::from_parts(143_395, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_810_639_000 picoseconds.
        Weight::from_parts(5_030_732_486, 0)
            // Standard Error: 612_903
            .saturating_add(Weight::from_parts(232_483_245, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_send_push_input_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_049_851_000 picoseconds.
        Weight::from_parts(5_023_755_301, 0)
            // Standard Error: 13_386
            .saturating_add(Weight::from_parts(12_577_182, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 87_417_000 picoseconds.
        Weight::from_parts(126_317_804, 0)
            // Standard Error: 484_220
            .saturating_add(Weight::from_parts(224_485_414, 0).saturating_mul(r.into()))
    }
    /// The range of component `n` is `[0, 2048]`.
    fn gr_debug_per_kb(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 297_224_000 picoseconds.
        Weight::from_parts(308_840_000, 0)
            // Standard Error: 51_204
            .saturating_add(Weight::from_parts(30_701_253, 0).saturating_mul(n.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_error(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 100_389_000 picoseconds.
        Weight::from_parts(125_622_346, 0)
            // Standard Error: 496_288
            .saturating_add(Weight::from_parts(282_798_735, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_status_code(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 86_425_000 picoseconds.
        Weight::from_parts(97_873_163, 0)
            // Standard Error: 420_707
            .saturating_add(Weight::from_parts(213_070_594, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 84_548_000 picoseconds.
        Weight::from_parts(88_293_644, 0)
            // Standard Error: 162_545
            .saturating_add(Weight::from_parts(27_073_505, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_596_000 picoseconds.
        Weight::from_parts(88_673_118, 0)
            // Standard Error: 184_835
            .saturating_add(Weight::from_parts(17_235_481, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_511_000 picoseconds.
        Weight::from_parts(88_641_076, 0)
            // Standard Error: 151_050
            .saturating_add(Weight::from_parts(14_969_473, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_770_000 picoseconds.
        Weight::from_parts(88_505_797, 0)
            // Standard Error: 145_791
            .saturating_add(Weight::from_parts(16_043_652, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 85_993_000 picoseconds.
        Weight::from_parts(88_884_631, 0)
            // Standard Error: 152_870
            .saturating_add(Weight::from_parts(15_879_518, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 139_321_000 picoseconds.
        Weight::from_parts(207_147_605, 0)
            // Standard Error: 662_182
            .saturating_add(Weight::from_parts(315_498_521, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_385_000 picoseconds.
        Weight::from_parts(142_303_469, 0)
            // Standard Error: 520_176
            .saturating_add(Weight::from_parts(504_832_475, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 51_921_725_000 picoseconds.
        Weight::from_parts(52_023_406_000, 0)
            // Standard Error: 347_695
            .saturating_add(Weight::from_parts(9_157_301, 0).saturating_mul(p.into()))
            // Standard Error: 347_675
            .saturating_add(Weight::from_parts(153_533_369, 0).saturating_mul(s.into()))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_475_000 picoseconds.
        Weight::from_parts(160_219_898, 0)
            // Standard Error: 544_860
            .saturating_add(Weight::from_parts(506_752_091, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 2048]`.
    /// The range of component `s` is `[1, 2048]`.
    fn gr_create_program_wgas_per_kb(p: u32, s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 50_901_500_000 picoseconds.
        Weight::from_parts(51_181_585_000, 0)
            // Standard Error: 332_030
            .saturating_add(Weight::from_parts(8_952_248, 0).saturating_mul(p.into()))
            // Standard Error: 332_011
            .saturating_add(Weight::from_parts(154_563_348, 0).saturating_mul(s.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 82_691_000 picoseconds.
        Weight::from_parts(122_779_256, 1131)
            // Standard Error: 8_511
            .saturating_add(Weight::from_parts(11_788_843, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1131 + p * (9900 ±0)`
        // Minimum execution time: 83_344_000 picoseconds.
        Weight::from_parts(84_328_000, 1131)
            // Standard Error: 30_459
            .saturating_add(Weight::from_parts(37_963_039, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9900).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_signal_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `5069931`
        // Minimum execution time: 6_079_609_000 picoseconds.
        Weight::from_parts(5_971_989_670, 5069931)
            // Standard Error: 52_680
            .saturating_add(Weight::from_parts(39_694_570, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(2048_u64))
    }
    /// The range of component `p` is `[0, 512]`.
    fn lazy_pages_load_page_storage_data(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1813 + p * (65580 ±0)`
        //  Estimated: `2002 + p * (75482 ±0)`
        // Minimum execution time: 83_385_000 picoseconds.
        Weight::from_parts(84_436_000, 2002)
            // Standard Error: 47_620
            .saturating_add(Weight::from_parts(46_269_835, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 75482).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1574 + p * (9879 ±2)`
        // Minimum execution time: 99_322_000 picoseconds.
        Weight::from_parts(91_041_610, 1574)
            // Standard Error: 56_435
            .saturating_add(Weight::from_parts(40_464_640, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `1574 + p * (9879 ±2)`
        // Minimum execution time: 606_652_000 picoseconds.
        Weight::from_parts(602_689_562, 1574)
            // Standard Error: 139_290
            .saturating_add(Weight::from_parts(46_442_889, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 9879).saturating_mul(p.into()))
    }
    /// The range of component `p` is `[0, 32]`.
    fn lazy_pages_host_func_write_after_read(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `141`
        //  Estimated: `317931`
        // Minimum execution time: 984_174_000 picoseconds.
        Weight::from_parts(1_017_752_442, 317931)
            // Standard Error: 351_121
            .saturating_add(Weight::from_parts(49_340_664, 0).saturating_mul(p.into()))
            .saturating_add(RocksDbWeight::get().reads(128_u64))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_250_528_000 picoseconds.
        Weight::from_parts(4_234_751_523, 0)
            // Standard Error: 13_516
            .saturating_add(Weight::from_parts(3_402_481, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32load(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_242_693_000 picoseconds.
        Weight::from_parts(4_241_212_775, 0)
            // Standard Error: 14_525
            .saturating_add(Weight::from_parts(3_408_370, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i64store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_969_856_000 picoseconds.
        Weight::from_parts(10_002_881_163, 0)
            // Standard Error: 191_699
            .saturating_add(Weight::from_parts(15_403_582, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[50, 500]`.
    fn instr_i32store(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_623_464_000 picoseconds.
        Weight::from_parts(10_000_474_312, 0)
            // Standard Error: 171_046
            .saturating_add(Weight::from_parts(11_078_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_077_000 picoseconds.
        Weight::from_parts(2_161_000, 0)
            // Standard Error: 9_451
            .saturating_add(Weight::from_parts(3_849_979, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_071_000 picoseconds.
        Weight::from_parts(2_159_000, 0)
            // Standard Error: 4_400
            .saturating_add(Weight::from_parts(3_080_078, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_074_000 picoseconds.
        Weight::from_parts(3_262_803, 0)
            // Standard Error: 1_189
            .saturating_add(Weight::from_parts(1_564_393, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_071_000 picoseconds.
        Weight::from_parts(2_120_000, 0)
            // Standard Error: 5_877
            .saturating_add(Weight::from_parts(3_066_146, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_064_000 picoseconds.
        Weight::from_parts(1_812_915, 0)
            // Standard Error: 15_479
            .saturating_add(Weight::from_parts(5_210_469, 0).saturating_mul(r.into()))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_530_000 picoseconds.
        Weight::from_parts(4_194_878, 0)
            // Standard Error: 1_802
            .saturating_add(Weight::from_parts(177_825, 0).saturating_mul(e.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_const(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_174_000 picoseconds.
        Weight::from_parts(3_668_578, 0)
            // Standard Error: 8_049
            .saturating_add(Weight::from_parts(2_603_796, 0).saturating_mul(r.into()))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(0)
            .saturating_add(Weight::from_ref_time(2_603_796 -
            2_501_394).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_172_000 picoseconds.
        Weight::from_parts(3_166_916, 0)
            // Standard Error: 12_838
            .saturating_add(Weight::from_parts(2_501_394, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_494_000 picoseconds.
        Weight::from_parts(17_444_335, 0)
            // Standard Error: 28_697
            .saturating_add(Weight::from_parts(9_785_515, 0).saturating_mul(r.into()))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 11_798_000 picoseconds.
        Weight::from_parts(3_049_617, 0)
            // Standard Error: 7_056
            .saturating_add(Weight::from_parts(1_189_800, 0).saturating_mul(p.into()))
    }
    /// The range of component `l` is `[0, 1024]`.
    fn instr_call_per_local(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_151_000 picoseconds.
        Weight::from_parts(5_397_354, 0)
            // Standard Error: 10
            .saturating_add(Weight::from_parts(41, 0).saturating_mul(l.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_127_000 picoseconds.
        Weight::from_parts(1_630_940, 0)
            // Standard Error: 3_120
            .saturating_add(Weight::from_parts(257_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_131_000 picoseconds.
        Weight::from_parts(2_203_000, 0)
            // Standard Error: 6_216
            .saturating_add(Weight::from_parts(784_419, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_128_000 picoseconds.
        Weight::from_parts(2_190_000, 0)
            // Standard Error: 6_805
            .saturating_add(Weight::from_parts(781_435, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_892_000 picoseconds.
        Weight::from_parts(1_993_566, 0)
            // Standard Error: 8_154
            .saturating_add(Weight::from_parts(808_421, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_831_000 picoseconds.
        Weight::from_parts(5_976_000, 0)
            // Standard Error: 8_108
            .saturating_add(Weight::from_parts(1_317_538, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_398_000 picoseconds.
        Weight::from_parts(2_166_867, 0)
            // Standard Error: 12_356
            .saturating_add(Weight::from_parts(6_861_802, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_103_000 picoseconds.
        Weight::from_parts(2_174_000, 0)
            // Standard Error: 6_492
            .saturating_add(Weight::from_parts(3_311_346, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32clz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_132_000 picoseconds.
        Weight::from_parts(2_202_000, 0)
            // Standard Error: 5_736
            .saturating_add(Weight::from_parts(3_084_127, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_088_000 picoseconds.
        Weight::from_parts(2_187_000, 0)
            // Standard Error: 7_604
            .saturating_add(Weight::from_parts(3_081_825, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ctz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_067_000 picoseconds.
        Weight::from_parts(2_115_000, 0)
            // Standard Error: 4_483
            .saturating_add(Weight::from_parts(2_645_062, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_114_000 picoseconds.
        Weight::from_parts(2_162_000, 0)
            // Standard Error: 4_129
            .saturating_add(Weight::from_parts(582_946, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32popcnt(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(1_652_465, 0)
            // Standard Error: 2_886
            .saturating_add(Weight::from_parts(389_195, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_086_000 picoseconds.
        Weight::from_parts(2_131_000, 0)
            // Standard Error: 9_873
            .saturating_add(Weight::from_parts(1_783_211, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eqz(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_185_000, 0)
            // Standard Error: 8_559
            .saturating_add(Weight::from_parts(1_172_705, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_120_000 picoseconds.
        Weight::from_parts(1_775_965, 0)
            // Standard Error: 2_995
            .saturating_add(Weight::from_parts(319_267, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_099_000 picoseconds.
        Weight::from_parts(2_651_440, 0)
            // Standard Error: 1_420
            .saturating_add(Weight::from_parts(157_872, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_048_000 picoseconds.
        Weight::from_parts(2_780_995, 0)
            // Standard Error: 1_473
            .saturating_add(Weight::from_parts(150_488, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_064_000 picoseconds.
        Weight::from_parts(2_154_000, 0)
            // Standard Error: 11_103
            .saturating_add(Weight::from_parts(1_806_083, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32eq(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_997_000 picoseconds.
        Weight::from_parts(2_098_000, 0)
            // Standard Error: 8_505
            .saturating_add(Weight::from_parts(1_145_581, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_147_000 picoseconds.
        Weight::from_parts(2_213_000, 0)
            // Standard Error: 11_439
            .saturating_add(Weight::from_parts(1_817_198, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ne(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_998_000 picoseconds.
        Weight::from_parts(2_163_000, 0)
            // Standard Error: 8_619
            .saturating_add(Weight::from_parts(1_160_337, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_124_000 picoseconds.
        Weight::from_parts(2_216_000, 0)
            // Standard Error: 10_569
            .saturating_add(Weight::from_parts(1_853_717, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32lts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_069_000 picoseconds.
        Weight::from_parts(2_130_000, 0)
            // Standard Error: 7_749
            .saturating_add(Weight::from_parts(1_176_544, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_101_000 picoseconds.
        Weight::from_parts(2_151_000, 0)
            // Standard Error: 10_826
            .saturating_add(Weight::from_parts(1_869_584, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ltu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_077_000 picoseconds.
        Weight::from_parts(2_143_000, 0)
            // Standard Error: 6_658
            .saturating_add(Weight::from_parts(1_142_489, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_109_000 picoseconds.
        Weight::from_parts(2_209_000, 0)
            // Standard Error: 10_532
            .saturating_add(Weight::from_parts(1_789_647, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gts(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190_000 picoseconds.
        Weight::from_parts(2_233_000, 0)
            // Standard Error: 9_596
            .saturating_add(Weight::from_parts(1_165_933, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_139_000 picoseconds.
        Weight::from_parts(2_195_000, 0)
            // Standard Error: 11_533
            .saturating_add(Weight::from_parts(1_790_899, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32gtu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_082_000 picoseconds.
        Weight::from_parts(2_133_000, 0)
            // Standard Error: 7_734
            .saturating_add(Weight::from_parts(1_114_820, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_069_000 picoseconds.
        Weight::from_parts(2_138_000, 0)
            // Standard Error: 9_932
            .saturating_add(Weight::from_parts(1_762_613, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32les(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_140_000 picoseconds.
        Weight::from_parts(2_215_000, 0)
            // Standard Error: 8_709
            .saturating_add(Weight::from_parts(1_130_939, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_106_000 picoseconds.
        Weight::from_parts(2_198_000, 0)
            // Standard Error: 10_064
            .saturating_add(Weight::from_parts(1_882_394, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32leu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_075_000 picoseconds.
        Weight::from_parts(2_164_000, 0)
            // Standard Error: 8_199
            .saturating_add(Weight::from_parts(1_171_159, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_104_000 picoseconds.
        Weight::from_parts(2_196_000, 0)
            // Standard Error: 11_442
            .saturating_add(Weight::from_parts(1_879_569, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32ges(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_988_000 picoseconds.
        Weight::from_parts(2_114_000, 0)
            // Standard Error: 8_254
            .saturating_add(Weight::from_parts(1_174_484, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_057_000 picoseconds.
        Weight::from_parts(2_165_000, 0)
            // Standard Error: 9_545
            .saturating_add(Weight::from_parts(1_776_225, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32geu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_093_000 picoseconds.
        Weight::from_parts(2_199_000, 0)
            // Standard Error: 7_070
            .saturating_add(Weight::from_parts(1_113_099, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_126_000 picoseconds.
        Weight::from_parts(2_192_000, 0)
            // Standard Error: 8_457
            .saturating_add(Weight::from_parts(1_251_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32add(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_111_000 picoseconds.
        Weight::from_parts(2_188_000, 0)
            // Standard Error: 4_720
            .saturating_add(Weight::from_parts(625_362, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_090_000 picoseconds.
        Weight::from_parts(2_173_000, 0)
            // Standard Error: 8_729
            .saturating_add(Weight::from_parts(1_329_087, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32sub(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_115_000 picoseconds.
        Weight::from_parts(2_187_000, 0)
            // Standard Error: 5_371
            .saturating_add(Weight::from_parts(663_558, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_081_000 picoseconds.
        Weight::from_parts(2_156_000, 0)
            // Standard Error: 11_844
            .saturating_add(Weight::from_parts(1_807_838, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32mul(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_113_000 picoseconds.
        Weight::from_parts(2_196_000, 0)
            // Standard Error: 8_329
            .saturating_add(Weight::from_parts(1_175_377, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_112_000 picoseconds.
        Weight::from_parts(3_228_056, 0)
            // Standard Error: 12_610
            .saturating_add(Weight::from_parts(2_590_244, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_101_000 picoseconds.
        Weight::from_parts(992_955, 0)
            // Standard Error: 11_937
            .saturating_add(Weight::from_parts(2_567_023, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_122_000 picoseconds.
        Weight::from_parts(2_092_413, 0)
            // Standard Error: 13_992
            .saturating_add(Weight::from_parts(2_969_995, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32divu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_102_000 picoseconds.
        Weight::from_parts(605_997, 0)
            // Standard Error: 11_278
            .saturating_add(Weight::from_parts(2_527_576, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_118_000 picoseconds.
        Weight::from_parts(2_187_000, 0)
            // Standard Error: 12_684
            .saturating_add(Weight::from_parts(9_413_280, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rems(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_096_000 picoseconds.
        Weight::from_parts(983_356, 0)
            // Standard Error: 43_201
            .saturating_add(Weight::from_parts(7_767_987, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_075_000 picoseconds.
        Weight::from_parts(3_772_643, 0)
            // Standard Error: 14_916
            .saturating_add(Weight::from_parts(2_949_181, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32remu(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_079_000 picoseconds.
        Weight::from_parts(491_599, 0)
            // Standard Error: 11_383
            .saturating_add(Weight::from_parts(2_524_894, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_057_000 picoseconds.
        Weight::from_parts(2_176_000, 0)
            // Standard Error: 8_953
            .saturating_add(Weight::from_parts(1_316_548, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32and(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_146_000 picoseconds.
        Weight::from_parts(2_213_000, 0)
            // Standard Error: 5_602
            .saturating_add(Weight::from_parts(665_468, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_087_000 picoseconds.
        Weight::from_parts(2_153_000, 0)
            // Standard Error: 8_541
            .saturating_add(Weight::from_parts(1_263_616, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32or(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_073_000 picoseconds.
        Weight::from_parts(2_173_000, 0)
            // Standard Error: 5_207
            .saturating_add(Weight::from_parts(638_088, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_093_000 picoseconds.
        Weight::from_parts(2_206_000, 0)
            // Standard Error: 8_702
            .saturating_add(Weight::from_parts(1_258_762, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32xor(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_062_000 picoseconds.
        Weight::from_parts(2_150_000, 0)
            // Standard Error: 4_982
            .saturating_add(Weight::from_parts(632_850, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_113_000 picoseconds.
        Weight::from_parts(2_173_000, 0)
            // Standard Error: 7_703
            .saturating_add(Weight::from_parts(1_083_848, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_147_000 picoseconds.
        Weight::from_parts(2_220_000, 0)
            // Standard Error: 4_178
            .saturating_add(Weight::from_parts(592_900, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_138_000 picoseconds.
        Weight::from_parts(2_181_000, 0)
            // Standard Error: 8_711
            .saturating_add(Weight::from_parts(1_097_721, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shrs(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_074_000 picoseconds.
        Weight::from_parts(259_263, 0)
            // Standard Error: 6_041
            .saturating_add(Weight::from_parts(633_017, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_135_000 picoseconds.
        Weight::from_parts(2_210_000, 0)
            // Standard Error: 8_900
            .saturating_add(Weight::from_parts(1_104_174, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32shru(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_142_000 picoseconds.
        Weight::from_parts(2_191_000, 0)
            // Standard Error: 4_110
            .saturating_add(Weight::from_parts(552_364, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_054_000 picoseconds.
        Weight::from_parts(2_150_000, 0)
            // Standard Error: 7_638
            .saturating_add(Weight::from_parts(1_070_205, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotl(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_080_000 picoseconds.
        Weight::from_parts(77_993, 0)
            // Standard Error: 6_103
            .saturating_add(Weight::from_parts(622_817, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_100_000 picoseconds.
        Weight::from_parts(2_186_000, 0)
            // Standard Error: 7_918
            .saturating_add(Weight::from_parts(1_091_771, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32rotr(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_125_000 picoseconds.
        Weight::from_parts(2_160_000, 0)
            // Standard Error: 4_934
            .saturating_add(Weight::from_parts(588_130, 0).saturating_mul(r.into()))
    }
}
