// This file is part of Gear.

// Copyright (C) 2022-2023 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-27, STEPS: `2`, REPEAT: `1000`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! CPU: `Intel(R) Xeon(R) Platinum 8375C CPU @ 2.90GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("gear-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear benchmark pallet --chain=gear-dev --steps=2 --repeat=1000 --pallet=pallet_gear --extrinsic=gr_reply,gr_reply_wgas,gr_reply_commit,gr_reply_commit_wgas,gr_reply_input,gr_reply_input_wgas,gr_reservation_reply,gr_reservation_reply_commit,gr_exit,gr_leave,gr_wait,gr_wait_for,gr_wait_up_to --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear_onetime.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn gr_reply(r: u32, ) -> Weight;
    fn gr_reply_wgas(r: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_wgas(r: u32, ) -> Weight;
    fn gr_reply_input(r: u32, ) -> Weight;
    fn gr_reply_input_wgas(r: u32, ) -> Weight;
    fn gr_reservation_reply(r: u32, ) -> Weight;
    fn gr_reservation_reply_commit(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Gear node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_541_000 picoseconds.
        Weight::from_parts(102_074_380, 0)
            // Standard Error: 80_253
            .saturating_add(Weight::from_parts(20_577_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_217_000 picoseconds.
        Weight::from_parts(102_820_116, 0)
            // Standard Error: 70_881
            .saturating_add(Weight::from_parts(20_198_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_934_000 picoseconds.
        Weight::from_parts(99_436_614, 0)
            // Standard Error: 75_756
            .saturating_add(Weight::from_parts(20_017_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_685_000 picoseconds.
        Weight::from_parts(100_507_900, 0)
            // Standard Error: 74_256
            .saturating_add(Weight::from_parts(16_679_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 720_195_000 picoseconds.
        Weight::from_parts(738_553_478, 0)
            // Standard Error: 340_878
            .saturating_add(Weight::from_parts(10_667_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 721_127_000 picoseconds.
        Weight::from_parts(733_748_668, 0)
            // Standard Error: 383_608
            .saturating_add(Weight::from_parts(32_391_916, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_794_000 picoseconds.
        Weight::from_parts(110_377_956, 0)
            // Standard Error: 76_526
            .saturating_add(Weight::from_parts(6_912_932, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_895_000 picoseconds.
        Weight::from_parts(109_157_292, 0)
            // Standard Error: 69_826
            .saturating_add(Weight::from_parts(4_600_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_035_000 picoseconds.
        Weight::from_parts(98_674_780, 0)
            // Standard Error: 2_399_172
            .saturating_add(Weight::from_parts(179_813_382, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_493_000 picoseconds.
        Weight::from_parts(101_635_476, 0)
            // Standard Error: 2_074_239
            .saturating_add(Weight::from_parts(163_141_746, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_751_000 picoseconds.
        Weight::from_parts(98_196_104, 0)
            // Standard Error: 1_885_586
            .saturating_add(Weight::from_parts(131_263_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_807_000 picoseconds.
        Weight::from_parts(100_880_538, 0)
            // Standard Error: 2_127_302
            .saturating_add(Weight::from_parts(166_173_696, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_852_000 picoseconds.
        Weight::from_parts(97_599_076, 0)
            // Standard Error: 2_359_740
            .saturating_add(Weight::from_parts(168_401_966, 0).saturating_mul(r.into()))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_541_000 picoseconds.
        Weight::from_parts(102_074_380, 0)
            // Standard Error: 80_253
            .saturating_add(Weight::from_parts(20_577_464, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 96_217_000 picoseconds.
        Weight::from_parts(102_820_116, 0)
            // Standard Error: 70_881
            .saturating_add(Weight::from_parts(20_198_794, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_934_000 picoseconds.
        Weight::from_parts(99_436_614, 0)
            // Standard Error: 75_756
            .saturating_add(Weight::from_parts(20_017_120, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_commit_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_685_000 picoseconds.
        Weight::from_parts(100_507_900, 0)
            // Standard Error: 74_256
            .saturating_add(Weight::from_parts(16_679_310, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 720_195_000 picoseconds.
        Weight::from_parts(738_553_478, 0)
            // Standard Error: 340_878
            .saturating_add(Weight::from_parts(10_667_010, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reply_input_wgas(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 721_127_000 picoseconds.
        Weight::from_parts(733_748_668, 0)
            // Standard Error: 383_608
            .saturating_add(Weight::from_parts(32_391_916, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 103_794_000 picoseconds.
        Weight::from_parts(110_377_956, 0)
            // Standard Error: 76_526
            .saturating_add(Weight::from_parts(6_912_932, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_reservation_reply_commit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 102_895_000 picoseconds.
        Weight::from_parts(109_157_292, 0)
            // Standard Error: 69_826
            .saturating_add(Weight::from_parts(4_600_122, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 92_035_000 picoseconds.
        Weight::from_parts(98_674_780, 0)
            // Standard Error: 2_399_172
            .saturating_add(Weight::from_parts(179_813_382, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 95_493_000 picoseconds.
        Weight::from_parts(101_635_476, 0)
            // Standard Error: 2_074_239
            .saturating_add(Weight::from_parts(163_141_746, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 91_751_000 picoseconds.
        Weight::from_parts(98_196_104, 0)
            // Standard Error: 1_885_586
            .saturating_add(Weight::from_parts(131_263_910, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 94_807_000 picoseconds.
        Weight::from_parts(100_880_538, 0)
            // Standard Error: 2_127_302
            .saturating_add(Weight::from_parts(166_173_696, 0).saturating_mul(r.into()))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 90_852_000 picoseconds.
        Weight::from_parts(97_599_076, 0)
            // Standard Error: 2_359_740
            .saturating_add(Weight::from_parts(168_401_966, 0).saturating_mul(r.into()))
    }
}
