// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-24, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("rococo_gear-local"), DB CACHE: 1024

// Executed Command:
// ./target/release/gear-collator benchmark pallet --chain=rococo_gear-local --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
    fn allocation_cost() -> Weight;
    fn grow_cost() -> Weight;
    fn initial_cost() -> Weight;
    fn load_cost() -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn gas(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_msg_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_up_to(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        T::DbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        T::DbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        T::DbWeight::get().reads(1)
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(70_000_000 as u64)
            .saturating_add(T::DbWeight::get().reads(8 as u64))
            .saturating_add(T::DbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(0 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(39_000 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(36_191_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_000 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(0 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(39_000 as u64).saturating_mul(c as u64))
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_000 as u64).saturating_mul(s as u64))
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(_p: u32, ) -> Weight {
        Weight::from_ref_time(50_657_000 as u64)
            .saturating_add(T::DbWeight::get().reads(10 as u64))
            .saturating_add(T::DbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(_p: u32, ) -> Weight {
        Weight::from_ref_time(89_898_000 as u64)
            .saturating_add(T::DbWeight::get().reads(14 as u64))
            .saturating_add(T::DbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        Weight::from_ref_time(147_707_000 as u64)
            .saturating_add(T::DbWeight::get().reads(27 as u64))
            .saturating_add(T::DbWeight::get().writes(24 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        Weight::from_ref_time(353_641_000 as u64)
            .saturating_add(T::DbWeight::get().reads(28 as u64))
            .saturating_add(T::DbWeight::get().writes(25 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(4_879_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(40_000 as u64).saturating_mul(c as u64))
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(53_577_442_000 as u64)
            // Standard Error: 957_000
            .saturating_add(Weight::from_ref_time(34_054_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gas(r: u32, ) -> Weight {
        Weight::from_ref_time(53_575_973_000 as u64)
            // Standard Error: 1_148_000
            .saturating_add(Weight::from_ref_time(21_021_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(53_510_324_000 as u64)
            // Standard Error: 1_168_000
            .saturating_add(Weight::from_ref_time(26_536_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_msg_id(r: u32, ) -> Weight {
        Weight::from_ref_time(53_621_885_000 as u64)
            // Standard Error: 950_000
            .saturating_add(Weight::from_ref_time(23_843_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(53_719_427_000 as u64)
            // Standard Error: 965_000
            .saturating_add(Weight::from_ref_time(18_492_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(53_612_966_000 as u64)
            // Standard Error: 968_000
            .saturating_add(Weight::from_ref_time(29_383_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(_r: u32, ) -> Weight {
        Weight::from_ref_time(53_793_151_000 as u64)
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(53_501_041_000 as u64)
            // Standard Error: 973_000
            .saturating_add(Weight::from_ref_time(36_810_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(53_588_124_000 as u64)
            // Standard Error: 917_000
            .saturating_add(Weight::from_ref_time(33_495_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(53_606_950_000 as u64)
            // Standard Error: 889_000
            .saturating_add(Weight::from_ref_time(16_867_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(52_822_795_000 as u64)
            // Standard Error: 5_856_000
            .saturating_add(Weight::from_ref_time(35_845_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(52_858_524_000 as u64)
            // Standard Error: 1_836_000
            .saturating_add(Weight::from_ref_time(7_513_000 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(53_710_726_000 as u64)
            // Standard Error: 1_478_000
            .saturating_add(Weight::from_ref_time(12_850_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(53_643_074_000 as u64)
            // Standard Error: 1_487_000
            .saturating_add(Weight::from_ref_time(19_360_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(53_699_799_000 as u64)
            // Standard Error: 1_012_000
            .saturating_add(Weight::from_ref_time(34_414_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(53_650_979_000 as u64)
            // Standard Error: 2_148_000
            .saturating_add(Weight::from_ref_time(95_306_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(53_737_559_000 as u64)
            // Standard Error: 332_000
            .saturating_add(Weight::from_ref_time(37_745_000 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(52_877_220_000 as u64)
            // Standard Error: 5_801_000
            .saturating_add(Weight::from_ref_time(26_557_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(52_823_151_000 as u64)
            // Standard Error: 1_843_000
            .saturating_add(Weight::from_ref_time(1_610_000 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(52_965_256_000 as u64)
            // Standard Error: 5_877_000
            .saturating_add(Weight::from_ref_time(42_534_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_commit_per_kb(_n: u32, ) -> Weight {
        Weight::from_ref_time(53_809_090_000 as u64)
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(_r: u32, ) -> Weight {
        Weight::from_ref_time(52_422_190_000 as u64)
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(52_743_007_000 as u64)
            // Standard Error: 569_000
            .saturating_add(Weight::from_ref_time(37_767_000 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(52_593_056_000 as u64)
            // Standard Error: 857_000
            .saturating_add(Weight::from_ref_time(24_757_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(52_620_582_000 as u64)
            // Standard Error: 1_021_000
            .saturating_add(Weight::from_ref_time(30_547_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(52_664_857_000 as u64)
            // Standard Error: 1_044_000
            .saturating_add(Weight::from_ref_time(15_581_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(_r: u32, ) -> Weight {
        Weight::from_ref_time(52_652_118_000 as u64)
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(52_653_378_000 as u64)
            // Standard Error: 33_693_000
            .saturating_add(Weight::from_ref_time(49_222_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(_r: u32, ) -> Weight {
        Weight::from_ref_time(52_731_727_000 as u64)
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(52_762_167_000 as u64)
            // Standard Error: 39_074_000
            .saturating_add(Weight::from_ref_time(147_833_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(53_162_435_000 as u64)
            // Standard Error: 104_733_000
            .saturating_add(Weight::from_ref_time(292_865_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(53_558_161_000 as u64)
            // Standard Error: 2_041_000
            .saturating_add(Weight::from_ref_time(72_431_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(53_564_731_000 as u64)
            // Standard Error: 27_769_000
            .saturating_add(Weight::from_ref_time(31_269_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(53_614_569_000 as u64)
            // Standard Error: 482_000
            .saturating_add(Weight::from_ref_time(2_514_000 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(85_009_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(794_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(86_073_000 as u64)
            // Standard Error: 9_000
            .saturating_add(Weight::from_ref_time(1_976_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(85_562_000 as u64)
            // Standard Error: 6_000
            .saturating_add(Weight::from_ref_time(1_914_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(84_674_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(2_063_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(85_442_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(2_127_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(85_089_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_190_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(84_776_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_627_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(84_757_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_783_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(87_739_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_000 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(84_844_000 as u64)
            // Standard Error: 20_000
            .saturating_add(Weight::from_ref_time(9_690_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(93_375_000 as u64)
            // Standard Error: 5_000
            .saturating_add(Weight::from_ref_time(12_951_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(107_825_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(497_000 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(85_330_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(771_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(85_054_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(811_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(85_106_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_173_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(90_012_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_567_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(90_092_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_614_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(84_859_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(827_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(84_502_000 as u64)
            // Standard Error: 30_000
            .saturating_add(Weight::from_ref_time(1_277_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(84_793_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_193_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(84_826_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_208_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(84_883_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_186_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(84_930_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_159_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(84_754_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_166_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(85_015_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_162_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(84_880_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_636_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(84_573_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_643_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(84_693_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_636_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(84_655_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_641_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(84_619_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_641_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(84_699_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_636_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(84_575_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_646_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(84_234_000 as u64)
            // Standard Error: 16_000
            .saturating_add(Weight::from_ref_time(1_674_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(83_891_000 as u64)
            // Standard Error: 4_000
            .saturating_add(Weight::from_ref_time(1_595_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(82_828_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_612_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(82_952_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_606_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(82_990_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_609_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(82_899_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_609_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(82_865_000 as u64)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(1_603_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(82_954_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_591_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(83_035_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_599_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(82_906_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_609_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(82_554_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_613_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(83_080_000 as u64)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(1_606_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(83_049_000 as u64)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(1_605_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(81_792_000 as u64)
            // Standard Error: 33_000
            .saturating_add(Weight::from_ref_time(1_717_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(83_668_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_572_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(82_565_000 as u64)
            // Standard Error: 6_000
            .saturating_add(Weight::from_ref_time(1_624_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(83_694_000 as u64)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(1_570_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(83_054_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_584_000 as u64).saturating_mul(r as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn allocation_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn grow_cost() -> Weight {
        // To be changed with the proper value.
        RocksDbWeight::get().writes(1)
    }
    fn initial_cost() -> Weight {
        RocksDbWeight::get().writes(1)
    }
    fn load_cost() -> Weight {
        RocksDbWeight::get().reads(1)
    }
    fn claim_value() -> Weight {
        Weight::from_ref_time(70_000_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(8 as u64))
            .saturating_add(RocksDbWeight::get().writes(6 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    fn upload_code(c: u32, ) -> Weight {
        Weight::from_ref_time(0 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(39_000 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    /// The range of component `s` is `[0, 4194304]`.
    fn create_program(s: u32, ) -> Weight {
        Weight::from_ref_time(36_191_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_000 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `c` is `[0, 256902]`.
    /// The range of component `s` is `[0, 4194304]`.
    fn upload_program(c: u32, s: u32, ) -> Weight {
        Weight::from_ref_time(0 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(39_000 as u64).saturating_mul(c as u64))
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_000 as u64).saturating_mul(s as u64))
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_message(_p: u32, ) -> Weight {
        Weight::from_ref_time(50_657_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(10 as u64))
            .saturating_add(RocksDbWeight::get().writes(8 as u64))
    }
    /// The range of component `p` is `[0, 65536]`.
    fn send_reply(_p: u32, ) -> Weight {
        Weight::from_ref_time(89_898_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(14 as u64))
            .saturating_add(RocksDbWeight::get().writes(11 as u64))
    }
    /// The range of component `q` is `[1, 512]`.
    fn initial_allocation(_q: u32, ) -> Weight {
        Weight::from_ref_time(147_707_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(27 as u64))
            .saturating_add(RocksDbWeight::get().writes(24 as u64))
    }
    /// The range of component `q` is `[0, 512]`.
    fn alloc_in_handle(_q: u32, ) -> Weight {
        Weight::from_ref_time(353_641_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(28 as u64))
            .saturating_add(RocksDbWeight::get().writes(25 as u64))
    }
    /// The range of component `c` is `[0, 524288]`.
    fn reinstrument(c: u32, ) -> Weight {
        Weight::from_ref_time(4_879_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(40_000 as u64).saturating_mul(c as u64))
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn alloc(r: u32, ) -> Weight {
        Weight::from_ref_time(53_577_442_000 as u64)
            // Standard Error: 957_000
            .saturating_add(Weight::from_ref_time(34_054_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gas(r: u32, ) -> Weight {
        Weight::from_ref_time(53_575_973_000 as u64)
            // Standard Error: 1_148_000
            .saturating_add(Weight::from_ref_time(21_021_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_gas_available(r: u32, ) -> Weight {
        Weight::from_ref_time(53_510_324_000 as u64)
            // Standard Error: 1_168_000
            .saturating_add(Weight::from_ref_time(26_536_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_msg_id(r: u32, ) -> Weight {
        Weight::from_ref_time(53_621_885_000 as u64)
            // Standard Error: 950_000
            .saturating_add(Weight::from_ref_time(23_843_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_origin(r: u32, ) -> Weight {
        Weight::from_ref_time(53_719_427_000 as u64)
            // Standard Error: 965_000
            .saturating_add(Weight::from_ref_time(18_492_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_program_id(r: u32, ) -> Weight {
        Weight::from_ref_time(53_612_966_000 as u64)
            // Standard Error: 968_000
            .saturating_add(Weight::from_ref_time(29_383_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_source(_r: u32, ) -> Weight {
        Weight::from_ref_time(53_793_151_000 as u64)
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value(r: u32, ) -> Weight {
        Weight::from_ref_time(53_501_041_000 as u64)
            // Standard Error: 973_000
            .saturating_add(Weight::from_ref_time(36_810_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_value_available(r: u32, ) -> Weight {
        Weight::from_ref_time(53_588_124_000 as u64)
            // Standard Error: 917_000
            .saturating_add(Weight::from_ref_time(33_495_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_size(r: u32, ) -> Weight {
        Weight::from_ref_time(53_606_950_000 as u64)
            // Standard Error: 889_000
            .saturating_add(Weight::from_ref_time(16_867_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_read(r: u32, ) -> Weight {
        Weight::from_ref_time(52_822_795_000 as u64)
            // Standard Error: 5_856_000
            .saturating_add(Weight::from_ref_time(35_845_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_read_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(52_858_524_000 as u64)
            // Standard Error: 1_836_000
            .saturating_add(Weight::from_ref_time(7_513_000 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_height(r: u32, ) -> Weight {
        Weight::from_ref_time(53_710_726_000 as u64)
            // Standard Error: 1_478_000
            .saturating_add(Weight::from_ref_time(12_850_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_block_timestamp(r: u32, ) -> Weight {
        Weight::from_ref_time(53_643_074_000 as u64)
            // Standard Error: 1_487_000
            .saturating_add(Weight::from_ref_time(19_360_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_init(r: u32, ) -> Weight {
        Weight::from_ref_time(53_699_799_000 as u64)
            // Standard Error: 1_012_000
            .saturating_add(Weight::from_ref_time(34_414_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_push(r: u32, ) -> Weight {
        Weight::from_ref_time(53_650_979_000 as u64)
            // Standard Error: 2_148_000
            .saturating_add(Weight::from_ref_time(95_306_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(53_737_559_000 as u64)
            // Standard Error: 332_000
            .saturating_add(Weight::from_ref_time(37_745_000 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_send_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(52_877_220_000 as u64)
            // Standard Error: 5_801_000
            .saturating_add(Weight::from_ref_time(26_557_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(52_823_151_000 as u64)
            // Standard Error: 1_843_000
            .saturating_add(Weight::from_ref_time(1_610_000 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_commit(r: u32, ) -> Weight {
        Weight::from_ref_time(52_965_256_000 as u64)
            // Standard Error: 5_877_000
            .saturating_add(Weight::from_ref_time(42_534_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_commit_per_kb(_n: u32, ) -> Weight {
        Weight::from_ref_time(53_809_090_000 as u64)
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_push(_r: u32, ) -> Weight {
        Weight::from_ref_time(52_422_190_000 as u64)
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(52_743_007_000 as u64)
            // Standard Error: 569_000
            .saturating_add(Weight::from_ref_time(37_767_000 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_reply_to(r: u32, ) -> Weight {
        Weight::from_ref_time(52_593_056_000 as u64)
            // Standard Error: 857_000
            .saturating_add(Weight::from_ref_time(24_757_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_debug(r: u32, ) -> Weight {
        Weight::from_ref_time(52_620_582_000 as u64)
            // Standard Error: 1_021_000
            .saturating_add(Weight::from_ref_time(30_547_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_exit_code(r: u32, ) -> Weight {
        Weight::from_ref_time(52_664_857_000 as u64)
            // Standard Error: 1_044_000
            .saturating_add(Weight::from_ref_time(15_581_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_exit(_r: u32, ) -> Weight {
        Weight::from_ref_time(52_652_118_000 as u64)
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_leave(r: u32, ) -> Weight {
        Weight::from_ref_time(52_653_378_000 as u64)
            // Standard Error: 33_693_000
            .saturating_add(Weight::from_ref_time(49_222_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait(_r: u32, ) -> Weight {
        Weight::from_ref_time(52_731_727_000 as u64)
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_for(r: u32, ) -> Weight {
        Weight::from_ref_time(52_762_167_000 as u64)
            // Standard Error: 39_074_000
            .saturating_add(Weight::from_ref_time(147_833_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_wait_up_to(r: u32, ) -> Weight {
        Weight::from_ref_time(53_162_435_000 as u64)
            // Standard Error: 104_733_000
            .saturating_add(Weight::from_ref_time(292_865_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 20]`.
    fn gr_wake(r: u32, ) -> Weight {
        Weight::from_ref_time(53_558_161_000 as u64)
            // Standard Error: 2_041_000
            .saturating_add(Weight::from_ref_time(72_431_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 1]`.
    fn gr_create_program_wgas(r: u32, ) -> Weight {
        Weight::from_ref_time(53_564_731_000 as u64)
            // Standard Error: 27_769_000
            .saturating_add(Weight::from_ref_time(31_269_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `n` is `[0, 64]`.
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        Weight::from_ref_time(53_614_569_000 as u64)
            // Standard Error: 482_000
            .saturating_add(Weight::from_ref_time(2_514_000 as u64).saturating_mul(n as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64const(r: u32, ) -> Weight {
        Weight::from_ref_time(85_009_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(794_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64load(r: u32, ) -> Weight {
        Weight::from_ref_time(86_073_000 as u64)
            // Standard Error: 9_000
            .saturating_add(Weight::from_ref_time(1_976_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64store(r: u32, ) -> Weight {
        Weight::from_ref_time(85_562_000 as u64)
            // Standard Error: 6_000
            .saturating_add(Weight::from_ref_time(1_914_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_select(r: u32, ) -> Weight {
        Weight::from_ref_time(84_674_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(2_063_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_if(r: u32, ) -> Weight {
        Weight::from_ref_time(85_442_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(2_127_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br(r: u32, ) -> Weight {
        Weight::from_ref_time(85_089_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_190_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_if(r: u32, ) -> Weight {
        Weight::from_ref_time(84_776_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_627_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_br_table(r: u32, ) -> Weight {
        Weight::from_ref_time(84_757_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_783_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `e` is `[1, 256]`.
    fn instr_br_table_per_entry(e: u32, ) -> Weight {
        Weight::from_ref_time(87_739_000 as u64)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(1_000 as u64).saturating_mul(e as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call(r: u32, ) -> Weight {
        Weight::from_ref_time(84_844_000 as u64)
            // Standard Error: 20_000
            .saturating_add(Weight::from_ref_time(9_690_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_call_indirect(r: u32, ) -> Weight {
        Weight::from_ref_time(93_375_000 as u64)
            // Standard Error: 5_000
            .saturating_add(Weight::from_ref_time(12_951_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `p` is `[0, 128]`.
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        Weight::from_ref_time(107_825_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(497_000 as u64).saturating_mul(p as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_get(r: u32, ) -> Weight {
        Weight::from_ref_time(85_330_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(771_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_set(r: u32, ) -> Weight {
        Weight::from_ref_time(85_054_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(811_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_local_tee(r: u32, ) -> Weight {
        Weight::from_ref_time(85_106_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_173_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_get(r: u32, ) -> Weight {
        Weight::from_ref_time(90_012_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_567_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_global_set(r: u32, ) -> Weight {
        Weight::from_ref_time(90_092_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_614_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_memory_current(r: u32, ) -> Weight {
        Weight::from_ref_time(84_859_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(827_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64clz(r: u32, ) -> Weight {
        Weight::from_ref_time(84_502_000 as u64)
            // Standard Error: 30_000
            .saturating_add(Weight::from_ref_time(1_277_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ctz(r: u32, ) -> Weight {
        Weight::from_ref_time(84_793_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_193_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64popcnt(r: u32, ) -> Weight {
        Weight::from_ref_time(84_826_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_208_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eqz(r: u32, ) -> Weight {
        Weight::from_ref_time(84_883_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_186_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        Weight::from_ref_time(84_930_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_159_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64extendui32(r: u32, ) -> Weight {
        Weight::from_ref_time(84_754_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_166_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        Weight::from_ref_time(85_015_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_162_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64eq(r: u32, ) -> Weight {
        Weight::from_ref_time(84_880_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_636_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ne(r: u32, ) -> Weight {
        Weight::from_ref_time(84_573_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_643_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64lts(r: u32, ) -> Weight {
        Weight::from_ref_time(84_693_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_636_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ltu(r: u32, ) -> Weight {
        Weight::from_ref_time(84_655_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_641_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gts(r: u32, ) -> Weight {
        Weight::from_ref_time(84_619_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_641_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64gtu(r: u32, ) -> Weight {
        Weight::from_ref_time(84_699_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_636_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64les(r: u32, ) -> Weight {
        Weight::from_ref_time(84_575_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_646_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64leu(r: u32, ) -> Weight {
        Weight::from_ref_time(84_234_000 as u64)
            // Standard Error: 16_000
            .saturating_add(Weight::from_ref_time(1_674_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64ges(r: u32, ) -> Weight {
        Weight::from_ref_time(83_891_000 as u64)
            // Standard Error: 4_000
            .saturating_add(Weight::from_ref_time(1_595_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64geu(r: u32, ) -> Weight {
        Weight::from_ref_time(82_828_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_612_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64add(r: u32, ) -> Weight {
        Weight::from_ref_time(82_952_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_606_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64sub(r: u32, ) -> Weight {
        Weight::from_ref_time(82_990_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_609_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64mul(r: u32, ) -> Weight {
        Weight::from_ref_time(82_899_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_609_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divs(r: u32, ) -> Weight {
        Weight::from_ref_time(82_865_000 as u64)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(1_603_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64divu(r: u32, ) -> Weight {
        Weight::from_ref_time(82_954_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_591_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rems(r: u32, ) -> Weight {
        Weight::from_ref_time(83_035_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_599_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64remu(r: u32, ) -> Weight {
        Weight::from_ref_time(82_906_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_609_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64and(r: u32, ) -> Weight {
        Weight::from_ref_time(82_554_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_613_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64or(r: u32, ) -> Weight {
        Weight::from_ref_time(83_080_000 as u64)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(1_606_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64xor(r: u32, ) -> Weight {
        Weight::from_ref_time(83_049_000 as u64)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(1_605_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shl(r: u32, ) -> Weight {
        Weight::from_ref_time(81_792_000 as u64)
            // Standard Error: 33_000
            .saturating_add(Weight::from_ref_time(1_717_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shrs(r: u32, ) -> Weight {
        Weight::from_ref_time(83_668_000 as u64)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(1_572_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64shru(r: u32, ) -> Weight {
        Weight::from_ref_time(82_565_000 as u64)
            // Standard Error: 6_000
            .saturating_add(Weight::from_ref_time(1_624_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotl(r: u32, ) -> Weight {
        Weight::from_ref_time(83_694_000 as u64)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(1_570_000 as u64).saturating_mul(r as u64))
    }
    /// The range of component `r` is `[0, 50]`.
    fn instr_i64rotr(r: u32, ) -> Weight {
        Weight::from_ref_time(83_054_000 as u64)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_584_000 as u64).saturating_mul(r as u64))
    }
}
