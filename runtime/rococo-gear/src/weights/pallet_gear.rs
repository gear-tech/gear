// This file is part of Gear.

// Copyright (C) 2022 Gear Technologies Inc.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_gear
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-09-12, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("rococo_gear-local"), DB CACHE: 1024

// Executed Command:
// ./target/production/gear-collator benchmark pallet --chain=rococo_gear-local --steps=50 --repeat=20 --pallet=pallet_gear --extrinsic=* --execution=wasm --wasm-execution=compiled --heap-pages=4096 --output=./scripts/benchmarking/weights-output/pallet_gear.rs --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_gear.
pub trait WeightInfo {
	fn allocation_cost() -> Weight;
	fn grow_cost() -> Weight;
	fn initial_cost() -> Weight;
	fn load_cost() -> Weight;
    fn claim_value() -> Weight;
    fn upload_code(c: u32, ) -> Weight;
    fn create_program(s: u32, ) -> Weight;
    fn upload_program(c: u32, s: u32, ) -> Weight;
    fn send_message(p: u32, ) -> Weight;
    fn send_reply(p: u32, ) -> Weight;
    fn initial_allocation(q: u32, ) -> Weight;
    fn alloc_in_handle(q: u32, ) -> Weight;
    fn reinstrument(c: u32, ) -> Weight;
    fn alloc(r: u32, ) -> Weight;
    fn gas(r: u32, ) -> Weight;
    fn gr_gas_available(r: u32, ) -> Weight;
    fn gr_msg_id(r: u32, ) -> Weight;
    fn gr_origin(r: u32, ) -> Weight;
    fn gr_program_id(r: u32, ) -> Weight;
    fn gr_source(r: u32, ) -> Weight;
    fn gr_value(r: u32, ) -> Weight;
    fn gr_value_available(r: u32, ) -> Weight;
    fn gr_size(r: u32, ) -> Weight;
    fn gr_read(r: u32, ) -> Weight;
    fn gr_read_per_kb(n: u32, ) -> Weight;
    fn gr_block_height(r: u32, ) -> Weight;
    fn gr_block_timestamp(r: u32, ) -> Weight;
    fn gr_send_init(r: u32, ) -> Weight;
    fn gr_send_push(r: u32, ) -> Weight;
    fn gr_send_push_per_kb(n: u32, ) -> Weight;
    fn gr_send_commit(r: u32, ) -> Weight;
    fn gr_send_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_commit(r: u32, ) -> Weight;
    fn gr_reply_commit_per_kb(n: u32, ) -> Weight;
    fn gr_reply_push(r: u32, ) -> Weight;
    fn gr_reply_push_per_kb(n: u32, ) -> Weight;
    fn gr_reply_to(r: u32, ) -> Weight;
    fn gr_debug(r: u32, ) -> Weight;
    fn gr_exit_code(r: u32, ) -> Weight;
    fn gr_exit(r: u32, ) -> Weight;
    fn gr_leave(r: u32, ) -> Weight;
    fn gr_wait(r: u32, ) -> Weight;
    fn gr_wait_for(r: u32, ) -> Weight;
    fn gr_wait_no_more(r: u32, ) -> Weight;
    fn gr_wake(r: u32, ) -> Weight;
    fn gr_create_program_wgas(r: u32, ) -> Weight;
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight;
    fn instr_i64const(r: u32, ) -> Weight;
    fn instr_i64load(r: u32, ) -> Weight;
    fn instr_i64store(r: u32, ) -> Weight;
    fn instr_select(r: u32, ) -> Weight;
    fn instr_if(r: u32, ) -> Weight;
    fn instr_br(r: u32, ) -> Weight;
    fn instr_br_if(r: u32, ) -> Weight;
    fn instr_br_table(r: u32, ) -> Weight;
    fn instr_br_table_per_entry(e: u32, ) -> Weight;
    fn instr_call(r: u32, ) -> Weight;
    fn instr_call_indirect(r: u32, ) -> Weight;
    fn instr_call_indirect_per_param(p: u32, ) -> Weight;
    fn instr_local_get(r: u32, ) -> Weight;
    fn instr_local_set(r: u32, ) -> Weight;
    fn instr_local_tee(r: u32, ) -> Weight;
    fn instr_global_get(r: u32, ) -> Weight;
    fn instr_global_set(r: u32, ) -> Weight;
    fn instr_memory_current(r: u32, ) -> Weight;
    fn instr_i64clz(r: u32, ) -> Weight;
    fn instr_i64ctz(r: u32, ) -> Weight;
    fn instr_i64popcnt(r: u32, ) -> Weight;
    fn instr_i64eqz(r: u32, ) -> Weight;
    fn instr_i64extendsi32(r: u32, ) -> Weight;
    fn instr_i64extendui32(r: u32, ) -> Weight;
    fn instr_i32wrapi64(r: u32, ) -> Weight;
    fn instr_i64eq(r: u32, ) -> Weight;
    fn instr_i64ne(r: u32, ) -> Weight;
    fn instr_i64lts(r: u32, ) -> Weight;
    fn instr_i64ltu(r: u32, ) -> Weight;
    fn instr_i64gts(r: u32, ) -> Weight;
    fn instr_i64gtu(r: u32, ) -> Weight;
    fn instr_i64les(r: u32, ) -> Weight;
    fn instr_i64leu(r: u32, ) -> Weight;
    fn instr_i64ges(r: u32, ) -> Weight;
    fn instr_i64geu(r: u32, ) -> Weight;
    fn instr_i64add(r: u32, ) -> Weight;
    fn instr_i64sub(r: u32, ) -> Weight;
    fn instr_i64mul(r: u32, ) -> Weight;
    fn instr_i64divs(r: u32, ) -> Weight;
    fn instr_i64divu(r: u32, ) -> Weight;
    fn instr_i64rems(r: u32, ) -> Weight;
    fn instr_i64remu(r: u32, ) -> Weight;
    fn instr_i64and(r: u32, ) -> Weight;
    fn instr_i64or(r: u32, ) -> Weight;
    fn instr_i64xor(r: u32, ) -> Weight;
    fn instr_i64shl(r: u32, ) -> Weight;
    fn instr_i64shrs(r: u32, ) -> Weight;
    fn instr_i64shru(r: u32, ) -> Weight;
    fn instr_i64rotl(r: u32, ) -> Weight;
    fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_gear using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_gear::WeightInfo for SubstrateWeight<T> {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		T::DbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		T::DbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		T::DbWeight::get().reads(1 as Weight)
	}
    fn claim_value() -> Weight {
        (93_186_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(8 as Weight))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
    }
    fn upload_code(c: u32, ) -> Weight {
        (14_778_000 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    fn create_program(s: u32, ) -> Weight {
        (29_273_000 as Weight)
            // Standard Error: 0
            .saturating_add((2_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(8 as Weight))
    }
    fn upload_program(c: u32, s: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((51_000 as Weight).saturating_mul(c as Weight))
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(11 as Weight))
    }
    fn send_message(p: u32, ) -> Weight {
        (74_377_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(10 as Weight))
            .saturating_add(T::DbWeight::get().writes(8 as Weight))
    }
    fn send_reply(p: u32, ) -> Weight {
        (119_283_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(14 as Weight))
            .saturating_add(T::DbWeight::get().writes(11 as Weight))
    }
    fn initial_allocation(_q: u32, ) -> Weight {
        (206_482_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(27 as Weight))
            .saturating_add(T::DbWeight::get().writes(24 as Weight))
    }
    fn alloc_in_handle(q: u32, ) -> Weight {
        (447_808_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((6_000 as Weight).saturating_mul(q as Weight))
            .saturating_add(T::DbWeight::get().reads(28 as Weight))
            .saturating_add(T::DbWeight::get().writes(25 as Weight))
    }
    fn reinstrument(c: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((52_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn alloc(r: u32, ) -> Weight {
        (73_542_595_000 as Weight)
            // Standard Error: 2_550_000
            .saturating_add((48_082_000 as Weight).saturating_mul(r as Weight))
    }
    fn gas(r: u32, ) -> Weight {
        (73_533_678_000 as Weight)
            // Standard Error: 2_988_000
            .saturating_add((19_667_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_gas_available(r: u32, ) -> Weight {
        (73_409_247_000 as Weight)
            // Standard Error: 2_390_000
            .saturating_add((16_917_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_msg_id(r: u32, ) -> Weight {
        (72_815_903_000 as Weight)
            // Standard Error: 12_735_000
            .saturating_add((72_061_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_origin(r: u32, ) -> Weight {
        (72_928_916_000 as Weight)
            // Standard Error: 2_886_000
            .saturating_add((61_022_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_program_id(r: u32, ) -> Weight {
        (72_942_124_000 as Weight)
            // Standard Error: 2_810_000
            .saturating_add((52_666_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_source(r: u32, ) -> Weight {
        (72_968_225_000 as Weight)
            // Standard Error: 3_482_000
            .saturating_add((54_225_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_value(r: u32, ) -> Weight {
        (72_958_270_000 as Weight)
            // Standard Error: 2_627_000
            .saturating_add((63_718_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_value_available(r: u32, ) -> Weight {
        (73_110_018_000 as Weight)
            // Standard Error: 2_804_000
            .saturating_add((50_232_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_size(r: u32, ) -> Weight {
        (73_248_769_000 as Weight)
            // Standard Error: 4_940_000
            .saturating_add((26_041_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read(r: u32, ) -> Weight {
        (72_014_901_000 as Weight)
            // Standard Error: 40_363_000
            .saturating_add((73_418_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read_per_kb(n: u32, ) -> Weight {
        (72_934_153_000 as Weight)
            // Standard Error: 8_966_000
            .saturating_add((7_283_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_block_height(r: u32, ) -> Weight {
        (73_259_861_000 as Weight)
            // Standard Error: 3_313_000
            .saturating_add((35_492_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_block_timestamp(r: u32, ) -> Weight {
        (73_417_473_000 as Weight)
            // Standard Error: 3_327_000
            .saturating_add((23_251_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_init(r: u32, ) -> Weight {
        (73_891_566_000 as Weight)
            // Standard Error: 42_720_000
            .saturating_add((52_722_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_push(r: u32, ) -> Weight {
        (73_531_390_000 as Weight)
            // Standard Error: 4_687_000
            .saturating_add((112_967_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        (74_613_656_000 as Weight)
            // Standard Error: 4_441_000
            .saturating_add((43_552_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_send_commit(r: u32, ) -> Weight {
        (71_680_977_000 as Weight)
            // Standard Error: 43_835_000
            .saturating_add((153_623_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        (72_357_931_000 as Weight)
            // Standard Error: 6_034_000
            .saturating_add((5_003_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_reply_commit(r: u32, ) -> Weight {
        (71_795_344_000 as Weight)
            // Standard Error: 25_260_000
            .saturating_add((67_742_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_reply_commit_per_kb(_n: u32, ) -> Weight {
        (72_698_713_000 as Weight)
    }
    fn gr_reply_push(r: u32, ) -> Weight {
        (71_546_915_000 as Weight)
            // Standard Error: 24_713_000
            .saturating_add((77_487_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        (72_871_854_000 as Weight)
            // Standard Error: 511_000
            .saturating_add((45_887_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_reply_to(r: u32, ) -> Weight {
        (73_109_942_000 as Weight)
            // Standard Error: 3_675_000
            .saturating_add((37_489_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_debug(r: u32, ) -> Weight {
        (73_111_709_000 as Weight)
            // Standard Error: 2_074_000
            .saturating_add((37_814_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit_code(r: u32, ) -> Weight {
        (73_082_496_000 as Weight)
            // Standard Error: 2_639_000
            .saturating_add((35_599_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit(r: u32, ) -> Weight {
        (73_276_833_000 as Weight)
            // Standard Error: 494_450_000
            .saturating_add((1_033_783_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_leave(r: u32, ) -> Weight {
        (73_184_720_000 as Weight)
            // Standard Error: 60_073_000
            .saturating_add((17_008_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait(r: u32, ) -> Weight {
        (73_802_550_000 as Weight)
            // Standard Error: 932_988_000
            .saturating_add((1_179_453_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait_for(_r: u32, ) -> Weight {
        (73_311_264_000 as Weight)
    }
    fn gr_wait_no_more(_r: u32, ) -> Weight {
        (73_356_852_000 as Weight)
    }
    fn gr_wake(_r: u32, ) -> Weight {
        (89_995_986_000 as Weight)
    }
    fn gr_create_program_wgas(_r: u32, ) -> Weight {
        (73_597_762_000 as Weight)
    }
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        (73_460_989_000 as Weight)
            // Standard Error: 4_755_000
            .saturating_add((7_907_000 as Weight).saturating_mul(n as Weight))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        (80_924_000 as Weight)
            // Standard Error: 6_000
            .saturating_add((2_200_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64load(r: u32, ) -> Weight {
        (160_703_000 as Weight)
            // Standard Error: 52_000
            .saturating_add((5_802_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64store(r: u32, ) -> Weight {
        (153_933_000 as Weight)
            // Standard Error: 46_000
            .saturating_add((6_224_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_select(r: u32, ) -> Weight {
        (80_130_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((5_612_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_if(r: u32, ) -> Weight {
        (80_213_000 as Weight)
            // Standard Error: 0
            .saturating_add((5_393_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br(r: u32, ) -> Weight {
        (80_058_000 as Weight)
            // Standard Error: 0
            .saturating_add((3_377_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_if(r: u32, ) -> Weight {
        (79_691_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_540_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table(r: u32, ) -> Weight {
        (79_998_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((4_607_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table_per_entry(_e: u32, ) -> Weight {
        (88_596_000 as Weight)
    }
    fn instr_call(r: u32, ) -> Weight {
        (84_269_000 as Weight)
            // Standard Error: 57_000
            .saturating_add((11_012_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect(r: u32, ) -> Weight {
        (96_069_000 as Weight)
            // Standard Error: 24_000
            .saturating_add((15_352_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        (119_117_000 as Weight)
            // Standard Error: 16_000
            .saturating_add((1_142_000 as Weight).saturating_mul(p as Weight))
    }
    fn instr_local_get(r: u32, ) -> Weight {
        (81_467_000 as Weight)
            // Standard Error: 11_000
            .saturating_add((2_205_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_set(r: u32, ) -> Weight {
        (82_245_000 as Weight)
            // Standard Error: 16_000
            .saturating_add((2_178_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_tee(r: u32, ) -> Weight {
        (81_811_000 as Weight)
            // Standard Error: 9_000
            .saturating_add((3_269_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_get(r: u32, ) -> Weight {
        (86_874_000 as Weight)
            // Standard Error: 7_000
            .saturating_add((2_896_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_set(r: u32, ) -> Weight {
        (86_880_000 as Weight)
            // Standard Error: 8_000
            .saturating_add((3_033_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_memory_current(r: u32, ) -> Weight {
        (116_864_000 as Weight)
            // Standard Error: 23_000
            .saturating_add((2_135_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64clz(r: u32, ) -> Weight {
        (81_715_000 as Weight)
            // Standard Error: 11_000
            .saturating_add((3_296_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ctz(r: u32, ) -> Weight {
        (81_799_000 as Weight)
            // Standard Error: 14_000
            .saturating_add((3_281_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64popcnt(r: u32, ) -> Weight {
        (84_504_000 as Weight)
            // Standard Error: 31_000
            .saturating_add((3_219_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eqz(r: u32, ) -> Weight {
        (89_028_000 as Weight)
            // Standard Error: 39_000
            .saturating_add((3_082_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        (82_399_000 as Weight)
            // Standard Error: 16_000
            .saturating_add((3_240_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendui32(r: u32, ) -> Weight {
        (83_239_000 as Weight)
            // Standard Error: 17_000
            .saturating_add((3_254_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        (84_812_000 as Weight)
            // Standard Error: 29_000
            .saturating_add((3_211_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eq(r: u32, ) -> Weight {
        (82_536_000 as Weight)
            // Standard Error: 15_000
            .saturating_add((4_403_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ne(r: u32, ) -> Weight {
        (80_139_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_472_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64lts(r: u32, ) -> Weight {
        (80_144_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_474_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ltu(r: u32, ) -> Weight {
        (80_156_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_469_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gts(r: u32, ) -> Weight {
        (80_060_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((4_476_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gtu(r: u32, ) -> Weight {
        (80_165_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_467_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64les(r: u32, ) -> Weight {
        (80_128_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_474_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64leu(r: u32, ) -> Weight {
        (80_006_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((4_478_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ges(r: u32, ) -> Weight {
        (80_107_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_470_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64geu(r: u32, ) -> Weight {
        (80_283_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((4_472_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64add(r: u32, ) -> Weight {
        (80_119_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((4_475_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64sub(r: u32, ) -> Weight {
        (80_209_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_469_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64mul(r: u32, ) -> Weight {
        (80_055_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_477_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divs(r: u32, ) -> Weight {
        (80_279_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_529_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divu(r: u32, ) -> Weight {
        (80_150_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_564_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rems(r: u32, ) -> Weight {
        (80_114_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_506_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64remu(r: u32, ) -> Weight {
        (80_124_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_561_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64and(r: u32, ) -> Weight {
        (80_346_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((4_496_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64or(r: u32, ) -> Weight {
        (80_227_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_499_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64xor(r: u32, ) -> Weight {
        (80_274_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_499_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shl(r: u32, ) -> Weight {
        (80_112_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_508_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shrs(r: u32, ) -> Weight {
        (80_686_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((4_486_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shru(r: u32, ) -> Weight {
        (80_296_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((4_501_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotl(r: u32, ) -> Weight {
        (80_428_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_492_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotr(r: u32, ) -> Weight {
        (80_173_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_499_000 as Weight).saturating_mul(r as Weight))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn allocation_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn grow_cost() -> Weight {
		// To be changed with the proper value.
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn initial_cost() -> Weight {
		RocksDbWeight::get().writes(1 as Weight)
	}
	fn load_cost() -> Weight {
		RocksDbWeight::get().reads(1 as Weight)
	}
    fn claim_value() -> Weight {
        (93_186_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(8 as Weight))
            .saturating_add(RocksDbWeight::get().writes(6 as Weight))
    }
    fn upload_code(c: u32, ) -> Weight {
        (14_778_000 as Weight)
            // Standard Error: 0
            .saturating_add((50_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(RocksDbWeight::get().reads(1 as Weight))
            .saturating_add(RocksDbWeight::get().writes(3 as Weight))
    }
    fn create_program(s: u32, ) -> Weight {
        (29_273_000 as Weight)
            // Standard Error: 0
            .saturating_add((2_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(8 as Weight))
    }
    fn upload_program(c: u32, s: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((51_000 as Weight).saturating_mul(c as Weight))
            // Standard Error: 0
            .saturating_add((3_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(11 as Weight))
    }
    fn send_message(p: u32, ) -> Weight {
        (74_377_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(RocksDbWeight::get().reads(10 as Weight))
            .saturating_add(RocksDbWeight::get().writes(8 as Weight))
    }
    fn send_reply(p: u32, ) -> Weight {
        (119_283_000 as Weight)
            // Standard Error: 0
            .saturating_add((1_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(RocksDbWeight::get().reads(14 as Weight))
            .saturating_add(RocksDbWeight::get().writes(11 as Weight))
    }
    fn initial_allocation(_q: u32, ) -> Weight {
        (206_482_000 as Weight)
            .saturating_add(RocksDbWeight::get().reads(27 as Weight))
            .saturating_add(RocksDbWeight::get().writes(24 as Weight))
    }
    fn alloc_in_handle(q: u32, ) -> Weight {
        (447_808_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((6_000 as Weight).saturating_mul(q as Weight))
            .saturating_add(RocksDbWeight::get().reads(28 as Weight))
            .saturating_add(RocksDbWeight::get().writes(25 as Weight))
    }
    fn reinstrument(c: u32, ) -> Weight {
        (0 as Weight)
            // Standard Error: 0
            .saturating_add((52_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(RocksDbWeight::get().reads(2 as Weight))
            .saturating_add(RocksDbWeight::get().writes(1 as Weight))
    }
    fn alloc(r: u32, ) -> Weight {
        (73_542_595_000 as Weight)
            // Standard Error: 2_550_000
            .saturating_add((48_082_000 as Weight).saturating_mul(r as Weight))
    }
    fn gas(r: u32, ) -> Weight {
        (73_533_678_000 as Weight)
            // Standard Error: 2_988_000
            .saturating_add((19_667_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_gas_available(r: u32, ) -> Weight {
        (73_409_247_000 as Weight)
            // Standard Error: 2_390_000
            .saturating_add((16_917_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_msg_id(r: u32, ) -> Weight {
        (72_815_903_000 as Weight)
            // Standard Error: 12_735_000
            .saturating_add((72_061_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_origin(r: u32, ) -> Weight {
        (72_928_916_000 as Weight)
            // Standard Error: 2_886_000
            .saturating_add((61_022_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_program_id(r: u32, ) -> Weight {
        (72_942_124_000 as Weight)
            // Standard Error: 2_810_000
            .saturating_add((52_666_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_source(r: u32, ) -> Weight {
        (72_968_225_000 as Weight)
            // Standard Error: 3_482_000
            .saturating_add((54_225_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_value(r: u32, ) -> Weight {
        (72_958_270_000 as Weight)
            // Standard Error: 2_627_000
            .saturating_add((63_718_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_value_available(r: u32, ) -> Weight {
        (73_110_018_000 as Weight)
            // Standard Error: 2_804_000
            .saturating_add((50_232_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_size(r: u32, ) -> Weight {
        (73_248_769_000 as Weight)
            // Standard Error: 4_940_000
            .saturating_add((26_041_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read(r: u32, ) -> Weight {
        (72_014_901_000 as Weight)
            // Standard Error: 40_363_000
            .saturating_add((73_418_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_read_per_kb(n: u32, ) -> Weight {
        (72_934_153_000 as Weight)
            // Standard Error: 8_966_000
            .saturating_add((7_283_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_block_height(r: u32, ) -> Weight {
        (73_259_861_000 as Weight)
            // Standard Error: 3_313_000
            .saturating_add((35_492_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_block_timestamp(r: u32, ) -> Weight {
        (73_417_473_000 as Weight)
            // Standard Error: 3_327_000
            .saturating_add((23_251_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_init(r: u32, ) -> Weight {
        (73_891_566_000 as Weight)
            // Standard Error: 42_720_000
            .saturating_add((52_722_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_push(r: u32, ) -> Weight {
        (73_531_390_000 as Weight)
            // Standard Error: 4_687_000
            .saturating_add((112_967_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_push_per_kb(n: u32, ) -> Weight {
        (74_613_656_000 as Weight)
            // Standard Error: 4_441_000
            .saturating_add((43_552_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_send_commit(r: u32, ) -> Weight {
        (71_680_977_000 as Weight)
            // Standard Error: 43_835_000
            .saturating_add((153_623_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_send_commit_per_kb(n: u32, ) -> Weight {
        (72_357_931_000 as Weight)
            // Standard Error: 6_034_000
            .saturating_add((5_003_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_reply_commit(r: u32, ) -> Weight {
        (71_795_344_000 as Weight)
            // Standard Error: 25_260_000
            .saturating_add((67_742_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_reply_commit_per_kb(_n: u32, ) -> Weight {
        (72_698_713_000 as Weight)
    }
    fn gr_reply_push(r: u32, ) -> Weight {
        (71_546_915_000 as Weight)
            // Standard Error: 24_713_000
            .saturating_add((77_487_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_reply_push_per_kb(n: u32, ) -> Weight {
        (72_871_854_000 as Weight)
            // Standard Error: 511_000
            .saturating_add((45_887_000 as Weight).saturating_mul(n as Weight))
    }
    fn gr_reply_to(r: u32, ) -> Weight {
        (73_109_942_000 as Weight)
            // Standard Error: 3_675_000
            .saturating_add((37_489_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_debug(r: u32, ) -> Weight {
        (73_111_709_000 as Weight)
            // Standard Error: 2_074_000
            .saturating_add((37_814_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit_code(r: u32, ) -> Weight {
        (73_082_496_000 as Weight)
            // Standard Error: 2_639_000
            .saturating_add((35_599_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_exit(r: u32, ) -> Weight {
        (73_276_833_000 as Weight)
            // Standard Error: 494_450_000
            .saturating_add((1_033_783_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_leave(r: u32, ) -> Weight {
        (73_184_720_000 as Weight)
            // Standard Error: 60_073_000
            .saturating_add((17_008_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait(r: u32, ) -> Weight {
        (73_802_550_000 as Weight)
            // Standard Error: 932_988_000
            .saturating_add((1_179_453_000 as Weight).saturating_mul(r as Weight))
    }
    fn gr_wait_for(_r: u32, ) -> Weight {
        (73_311_264_000 as Weight)
    }
    fn gr_wait_no_more(_r: u32, ) -> Weight {
        (73_356_852_000 as Weight)
    }
    fn gr_wake(_r: u32, ) -> Weight {
        (89_995_986_000 as Weight)
    }
    fn gr_create_program_wgas(_r: u32, ) -> Weight {
        (73_597_762_000 as Weight)
    }
    fn gr_create_program_wgas_per_kb(n: u32, ) -> Weight {
        (73_460_989_000 as Weight)
            // Standard Error: 4_755_000
            .saturating_add((7_907_000 as Weight).saturating_mul(n as Weight))
    }
    fn instr_i64const(r: u32, ) -> Weight {
        (80_924_000 as Weight)
            // Standard Error: 6_000
            .saturating_add((2_200_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64load(r: u32, ) -> Weight {
        (160_703_000 as Weight)
            // Standard Error: 52_000
            .saturating_add((5_802_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64store(r: u32, ) -> Weight {
        (153_933_000 as Weight)
            // Standard Error: 46_000
            .saturating_add((6_224_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_select(r: u32, ) -> Weight {
        (80_130_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((5_612_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_if(r: u32, ) -> Weight {
        (80_213_000 as Weight)
            // Standard Error: 0
            .saturating_add((5_393_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br(r: u32, ) -> Weight {
        (80_058_000 as Weight)
            // Standard Error: 0
            .saturating_add((3_377_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_if(r: u32, ) -> Weight {
        (79_691_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_540_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table(r: u32, ) -> Weight {
        (79_998_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((4_607_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_br_table_per_entry(_e: u32, ) -> Weight {
        (88_596_000 as Weight)
    }
    fn instr_call(r: u32, ) -> Weight {
        (84_269_000 as Weight)
            // Standard Error: 57_000
            .saturating_add((11_012_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect(r: u32, ) -> Weight {
        (96_069_000 as Weight)
            // Standard Error: 24_000
            .saturating_add((15_352_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_call_indirect_per_param(p: u32, ) -> Weight {
        (119_117_000 as Weight)
            // Standard Error: 16_000
            .saturating_add((1_142_000 as Weight).saturating_mul(p as Weight))
    }
    fn instr_local_get(r: u32, ) -> Weight {
        (81_467_000 as Weight)
            // Standard Error: 11_000
            .saturating_add((2_205_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_set(r: u32, ) -> Weight {
        (82_245_000 as Weight)
            // Standard Error: 16_000
            .saturating_add((2_178_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_local_tee(r: u32, ) -> Weight {
        (81_811_000 as Weight)
            // Standard Error: 9_000
            .saturating_add((3_269_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_get(r: u32, ) -> Weight {
        (86_874_000 as Weight)
            // Standard Error: 7_000
            .saturating_add((2_896_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_global_set(r: u32, ) -> Weight {
        (86_880_000 as Weight)
            // Standard Error: 8_000
            .saturating_add((3_033_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_memory_current(r: u32, ) -> Weight {
        (116_864_000 as Weight)
            // Standard Error: 23_000
            .saturating_add((2_135_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64clz(r: u32, ) -> Weight {
        (81_715_000 as Weight)
            // Standard Error: 11_000
            .saturating_add((3_296_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ctz(r: u32, ) -> Weight {
        (81_799_000 as Weight)
            // Standard Error: 14_000
            .saturating_add((3_281_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64popcnt(r: u32, ) -> Weight {
        (84_504_000 as Weight)
            // Standard Error: 31_000
            .saturating_add((3_219_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eqz(r: u32, ) -> Weight {
        (89_028_000 as Weight)
            // Standard Error: 39_000
            .saturating_add((3_082_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendsi32(r: u32, ) -> Weight {
        (82_399_000 as Weight)
            // Standard Error: 16_000
            .saturating_add((3_240_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64extendui32(r: u32, ) -> Weight {
        (83_239_000 as Weight)
            // Standard Error: 17_000
            .saturating_add((3_254_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i32wrapi64(r: u32, ) -> Weight {
        (84_812_000 as Weight)
            // Standard Error: 29_000
            .saturating_add((3_211_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64eq(r: u32, ) -> Weight {
        (82_536_000 as Weight)
            // Standard Error: 15_000
            .saturating_add((4_403_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ne(r: u32, ) -> Weight {
        (80_139_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_472_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64lts(r: u32, ) -> Weight {
        (80_144_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_474_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ltu(r: u32, ) -> Weight {
        (80_156_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_469_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gts(r: u32, ) -> Weight {
        (80_060_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((4_476_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64gtu(r: u32, ) -> Weight {
        (80_165_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_467_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64les(r: u32, ) -> Weight {
        (80_128_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_474_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64leu(r: u32, ) -> Weight {
        (80_006_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((4_478_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64ges(r: u32, ) -> Weight {
        (80_107_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_470_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64geu(r: u32, ) -> Weight {
        (80_283_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((4_472_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64add(r: u32, ) -> Weight {
        (80_119_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((4_475_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64sub(r: u32, ) -> Weight {
        (80_209_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_469_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64mul(r: u32, ) -> Weight {
        (80_055_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_477_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divs(r: u32, ) -> Weight {
        (80_279_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_529_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64divu(r: u32, ) -> Weight {
        (80_150_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_564_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rems(r: u32, ) -> Weight {
        (80_114_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_506_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64remu(r: u32, ) -> Weight {
        (80_124_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_561_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64and(r: u32, ) -> Weight {
        (80_346_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((4_496_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64or(r: u32, ) -> Weight {
        (80_227_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_499_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64xor(r: u32, ) -> Weight {
        (80_274_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_499_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shl(r: u32, ) -> Weight {
        (80_112_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_508_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shrs(r: u32, ) -> Weight {
        (80_686_000 as Weight)
            // Standard Error: 4_000
            .saturating_add((4_486_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64shru(r: u32, ) -> Weight {
        (80_296_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((4_501_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotl(r: u32, ) -> Weight {
        (80_428_000 as Weight)
            // Standard Error: 2_000
            .saturating_add((4_492_000 as Weight).saturating_mul(r as Weight))
    }
    fn instr_i64rotr(r: u32, ) -> Weight {
        (80_173_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((4_499_000 as Weight).saturating_mul(r as Weight))
    }
}