//! build script for gear-program cli
use frame_metadata::RuntimeMetadataPrefixed;
use parity_scale_codec::{Decode, Encode};
use std::{
    env, fs,
    io::Write,
    process::{Command, Stdio},
};
use subxt_codegen::DerivesRegistry;

const GENERATED_TITLE: &str = r#"
//! Auto generated by subxt-cli
//!
//! subxt codegen | rustfmt --edition=2021
"#;

/// Generate api
fn codegen(raw_derives: Vec<String>) -> String {
    let encoded = gear_runtime::Runtime::metadata().encode();

    let metadata = <RuntimeMetadataPrefixed as Decode>::decode(&mut encoded.as_ref())
        .expect("decode metadata failed");
    let generator = subxt_codegen::RuntimeGenerator::new(metadata);
    let item_mod = syn::parse_quote!(
        pub mod api {}
    );

    let p = raw_derives
        .iter()
        .map(|raw| syn::parse_str(raw))
        .collect::<Result<Vec<_>, _>>()
        .expect("parse derives failed");
    let mut derives = DerivesRegistry::default();
    derives.extend_for_all(p.into_iter());

    generator.generate_runtime(item_mod, derives).to_string()
}

/// Check build gear-node
fn check_node() {
    let mut cargo = Command::new("cargo");
    let profile = std::env::var("PROFILE").unwrap();
    let node = env!("CARGO_MANIFEST_DIR").to_owned() + "../node";

    cargo.args(&[
        "build",
        "--manifest-path",
        &node,
        &("--".to_owned() + &profile),
    ]);
}

/// Update runtime api
fn update_api() {
    let api = codegen(vec![]);

    // format generated code
    let mut rustfmt = Command::new("rustfmt");
    let mut code = rustfmt
        .args(&["--edition=2021"])
        .stdin(Stdio::piped())
        .stdout(Stdio::piped())
        .spawn()
        .unwrap();

    // pipe api to rustfmt
    write!(code.stdin.as_mut().unwrap(), "{}", api).unwrap();
    let output = code.wait_with_output().unwrap();

    // write api to disk
    fs::write(
        &[env!("CARGO_MANIFEST_DIR"), "/src/api/generated/metadata.rs"].concat(),
        GENERATED_TITLE.to_owned().trim().to_owned()
            + "\n"
            + &String::from_utf8_lossy(&output.stdout),
    )
    .expect("update api failed")
}

fn main() {
    println!("cargo:rerun-if-changed=build.rs");
    println!("cargo:rerun-if-changed=../runtime");
    println!("cargo:rerun-if-changed=../pallets/gear");

    // 0. check build the node.
    check_node();

    // 1. update api
    update_api()
}
